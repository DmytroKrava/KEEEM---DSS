{"version":3,"sources":["images/3.jpg","images/1.jpg","images/2.jpg","utils/constants.js","utils/httpService.js","components/auth/auth.jsx","components/modals/modal.jsx","components/auth/login.jsx","components/context/environmentsInfoContext.jsx","components/radiowidget/radiowidget.jsx","components/menu/menu.jsx","components/charts/compareChart.jsx","utils/helpers.js","components/modals/modalCompare.jsx","components/rangePicker/dateRangePicker.jsx","components/charts/chart.jsx","components/charts/emissionsLineChart.jsx","components/helperComponents/calculationsInfo.jsx","components/charts/emissionsChartModal.jsx","components/mapObjects/points/points.jsx","components/mapObjects/polygons/polygons.jsx","utils/regionsCounter.js","components/medStat/regionMedStatModal.jsx","components/mapObjects/regions/regions.jsx","utils/getFileType.js","utils/txtFilesService.js","components/submitForm/submitForm.jsx","components/addComponents/addPointModal.jsx","components/addComponents/addPolygonModal.jsx","components/addComponents/addTubeModal.jsx","components/filtrations/filtrationByTask.jsx","components/helperComponents/outsideClick.jsx","components/helperComponents/pseudo/pseudo.jsx","components/filtrations/filtration.jsx","components/map/polygonFiltration.jsx","components/onMapFinder/onMapFinder.jsx","components/mapObjects/tubes/tubes.jsx","components/helperComponents/mapLegend/mapLegend.jsx","components/map/map.jsx","components/advancedmap/advancedmap.jsx","components/home/carousel.jsx","components/home/KEEMPrinciples.jsx","components/home/home.jsx","utils/maps.js","components/addComponents/addDictionaryRecord.jsx","components/dictionary/dictionaryModes.jsx","components/dictionary/removeDictionaryRecord.jsx","components/dictionary/editDictionaryRecord.jsx","components/dictionary/dictionary.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MAP_CENTER_COORDS","TABLE_NAMES","elements","gdk","environment","type_of_object","tax_values","DICTIONARY_MODES","search","add","edit","delete","getLegendDescription","type","envId","points","1","2","3","4","5","6","8","region","DENGEROUS_LVL_DEFAULT","lvl","min","Infinity","max","color","DENGEROUS_LVL_ATMOSPHERE","DENGEROUS_LVL_WATER","DENGEROUS_LVL_POINT","getDataForLegendPoint","idEnvironment","post","url","body","a","axios","get","put","deleteRequest","Auth","props","React","useState","login","setLogin","password","setPassword","Container","Row","className","Col","xs","Form","Group","controlId","Label","Control","placeholder","value","onChange","e","target","Button","variant","onClick","then","user","data","onHide","setUser","sessionStorage","setItem","JSON","stringify","alert","VerticallyCenteredModal","Modal","size","style","zIndex","dialogClassName","aria-labelledby","centered","Header","closeButton","Title","id","header","Body","children","Footer","Login","modalShow","setModalShow","Fragment","show","environmentsInfoInitialState","selected","environments","EnvironmentsInfoContext","createContext","Widget","refer","useRef","useEffect","connectionScript","document","createElement","initialComponentScript","src","innerHTML","current","append","onload","ref","height","Spinner","animation","RadioWidget","hideRadio","showRadioModal","TABLE_NAMES_ON_IU","MenuView","dictionary","setDictionary","history","useHistory","location","useLocation","useContext","environmentsInfo","setEnvironmentsInfo","isSpecial","setIsSpecial","setshowRadioModal","isActive","Navbar","bg","expand","Toggle","aria-controls","Collapse","Nav","Item","Link","primaryColorObject","push","NavDropdown","title","map","name","setMapChosenType","selectedEnvironment","find","selectEnvironment","key","active","id_of_expert","Object","values","index","selectDictionary","pathname","FIO","expert_name","removeItem","COLORS","CompareChart","datesForView","Set","el","DateEm","itr","filter","item","Name_Object","ValueAvg","width","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","length","removeObjectDuplicates","items","prop","obj","arr","mapObj","indexOf","formatEmissionsLineChart","emissionCalculations","elementNames","forEach","emission","includes","element","reduce","temp","date","day","month","year","averageCalculations","average","maximumCalculations","getIdColumnNameForDictionaryObject","possibleName","keys","some","transformCalculationDate","getDate","getMonth","getFullYear","getHours","getMinutes","formParamsForGetCheckbox","label","query","i","formParamsForGetArr","removeDuplicates","result","duplicatesIndices","comparisonIndex","comparison","currentKeys","comparisonKeys","sort","join","toLowerCase","valuesEqual","CompareModal","polygons","chosenEnvironments","Compares","setCompares","window","innerWidth","dateWidth","setDateWidth","handleWidth","onresize","removeEventListener","addEventListener","measure","EmissionModes","setEmissionModes","base","set","measue","ChosenEmissionMode","setChosenEmissionMode","TableWillUpdate","setTableWillUpdate","startDate","Date","endDate","addDays","state","setState","IdArr","chosenEnv","toISOString","ElementName","Measure","visible","TableData","Table","responsive","d","ValueMax","locale","uk","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","display","editableDateInputs","DropdownButton","Dropdown","DateRangePickerView","param","setEmissionCalculations","EnvironmentAttachment","envParam","ActualEmmisionDate","dateState","SetDateState","initilDate","enabled","Chart","dataForView","toFixed","padding","cx","cy","labelLine","outerRadius","fill","isAnimationActive","entry","verticalAlign","iconType","EmissionLineChart","emissions","elementName","setElementName","Menu","emissionName","connectNulls","FormulaCalculationsInfo","loaded","setLoaded","setData","catch","err","console","log","formula","textAlign","marginTop","marginBottom","EmissionsChartModal","isPoint","isAdvanced","getEmissionCalculations","chartAverageData","quantity","total","findAverageForEmissionCalculations","chartMaxData","findMaxForEmissionCalculations","Tabs","Tab","eventKey","exceedingByAverage","gdkAverage","exceedingByMaximum","gdkMax","envName","getItem","ReturnLastData","slice","reverse","short_name","Year","Month","Point","Name","coordinates","Name_object","description","image","owner_type","handleClick","setComaprePointId","isPointsNonEditable","emmissionsStats","isComapre","setCompare","emmissionsStatsInfo","chosenemmissionsStats","setchosenemmissionsStats","curr","coif","FindMaxCoif","Marker","position","icon","divIcon","html","Popup","maxWidth","faBalanceScale","ChoosePoint","faPencilAlt","striped","bordered","Points","setShowPointModal","setPointId","setIsEditPointMode","uniqueObjectTypes","LayersControl","Overlay","Object_Type_Id","checked","Object_Type_Name","LayerGroup","poi","Id","Description","Image","Environments","initialState","showEmissionsChartModal","CorArr","Polygonobj","poligonId","polygonPoints","lineThickness","brushColorR","brushColorG","brushColorB","mapMode","PointsInfo","user_name","setcomparePolygonId","isPolyggonsNonEditable","setemmissionsStats","Polygon","positions","weight","hover","DragPoint","DeleteMarker","newPolygonCoordinates","setNewPolygonCoordinates","markerRef","ondrag","leafletElement","_latlng","draggable","Tooltip","AddingPolygon","splice","findIndex","Polygons","setPolygonId","setIsEditPolygonMode","setShowPolygonModal","polygonId","DangerClassAtmosphere","getResultLvl","list","undefined","countWater","tmp","grouped","resValue","acc","elem","mpc_avrg_d","isNaN","res","resArr","countElse","CountersList","envirnonment","countFunc","avg","Math","pow","danger_class","RegionMedStatModal","regionId","modalHeader","checkboxes","setCheckboxes","medStatData","setMedStatData","setResult","md","entries","concat","name_of_formula","measurement_of_formula","nomer","onUpdateCb","updatedData","isExpandable","node","depth","isDeletable","onCheckToggleCb","nodes","checkState","isChecked","applyCheckStateTo","float","Check","Region","regionPoints","AttachedEmmissions","Emmissions","setEmmissions","DetailedModalShow","setDetailedModalShow","CountedData","setCountedData","chosenData","setChosenData","parse","CountData","fillOpacity","Regions","regions","setFilteredRegions","ActualRegionDate","AdvancedEnvironments","FetchedData","emmissions","uploadedFileTypes","txt","xlsx","excelTypes","acceptString","extension","txtTypes","getUploadedFileType","file","fileExtension","split","txtComparer","excelComparer","Error","createDate","dateString","preparedDataPromise","plainText","row","match","columnName","now","form","valueAvg","valueMax","code","SubmitForm","onSave","preloadedEmission","isLoading","setIsActive","buttonText","setDate","setAvgValue","gdkAvg","setGdkAvg","setMaxValue","setGdkMax","setElements","selectedElement","setElement","setMeasure","handleSubmit","idElement","selectElement","handleDate","maximumValue","averageValue","formattedDate","error","toString","Alert","disabled","cursor","pointerEvents","as","role","aria-hidden","ownerType","emptyState","AddPointModal","setShouldFetchData","isEditPointMode","pointId","setName","setDescription","setType","setOwnerType","types","setTypes","ownerTypes","setOwnerTypes","setIsLoading","setPreloadedEmission","clearForm","hide","mappedTypes","imageName","Image_Name","fileUpload","preventDefault","files","reader","FileReader","mappedResult","setModalFields","readAsText","readXlsxFile","rows","actionsMap","Map","columnValue","accept","typeOfObject","owner_type_id","id_of_user","brushColor","r","g","b","AddPolygonModal","isEditPolygonMode","setLineThickness","setColor","line_thickness","brush_color_r","bruch_color_g","brush_color_b","brush_alfa","rgbaString","test","colors","colorValue","message","extractRGBA","onChangeComplete","rgb","line_collor_r","line_color_g","line_color_b","line_alfa","Number","point","latitude","lat","longitude","lng","order123","AddTubeModal","tubeId","settubeId","isEditTubeMode","setisEditTubeMode","setnewTubeCordinates","FiltarionByTasks","filteredPoints","setFilteredPoints","setFilteredItems","setTitle","Chosen","setChosen","Tasks","setAllTasks","setTasks","tempTasks","object_arr","id_of_object","shouldUpdate","setUpdate","isMyObjectsSelectionChecked","chosen","tempPoints","substring","DropHandlerClick","useOnClickOutside","handler","listener","event","contains","Pseudo","setOpened","prev","Filtration","filtrationForm","sideLeftFilterOpened","setLeftFilterOpened","existingExperts","setExistingExperts","environmentState","setenvironmentState","onSubmit","expertCheckboxes","expertCheckbox","myCheckbox","selectedExperts","Array","from","expert","PolygonFiltration","setmapMode","selectHanler","initialConst","Cities","CitiesToogle","forwardRef","href","CitiesMenu","labeledBy","setValue","FormControl","autoFocus","Children","toArray","child","startsWith","CityFinder","ViewReposition","cities","setCities","lon","CordFinder","setLat","setLon","isinv","setisinv","marginLeft","marginRight","required","isInvalid","AdressFinder","Adress","setAdress","isInv","setIsInv","TempWarning","setTempWarning","setTimeout","FinderOnMap","sideRightFilterOpened","setRightFilterOpened","Tube","tube","Polyline","lineCollorR","lineColorG","lineColorB","Tubes","tubeArr","setshowTubeModal","tubeid","newTubeCordinates","AddingTube","Legend","pointData","regionData","pointDesc","regionDesc","text","grades","legendTypes","chosenType","background","expertName","regionPolygons","tubes","tubePoints","filteredPolygons","filteredRegions","filteredItems","isAddPointModeEnabled","isAddPolygonModeEnabled","isAddTubeMode","showPointModal","showPolygonModal","showTubeModal","newPointCoordinates","shouldFetchData","compareMode","comparePointsId","comparePolygonsId","comaprePointId","isCompare","comparePolygonId","compareModalForm","geographicalObj","isModeEnabled","MapView","SettingsShow","SetSettingsShow","setAddPointMode","setNewPointCoordinates","setcomparePointsId","ActualPointsDate","SetActualPointsDate","LastDateMode","setLastDateMode","setFilteredPolygons","setAddPolygonMode","setcomparePolygonsId","SetActualRegionDate","filteredTubes","setFilteredTubes","setisAddTubeMode","setuniqueObjectTypes","fetchPoints","fetchPolygons","filterByExpert","idOfExpert","filterByUser","idOfUser","myPolygons","myPoints","MapRef","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","preferCanvas","latlng","TileLayer","scale","setView","AdpFooterRef","createRef","AdaptiveFooterComponents","elmargin","setShow","flexDirection","alignItems","justifyContent","backgroundColor","visibility","myRef","FooterMap","changeFooter","setChangeFooter","getBoundingClientRect","setHeight","showFooterMenu","setFooterMenu","faAngleDoubleDown","faAlignJustify","FooterComponents","isAdaptive","isCompareMode","setCompareMode","setcompareModalForm","UpButton","AdvancedMap","showWarning","setShowWarning","LoadedPoints","setPoints","LoadedPolygons","setPolygons","setEnvironments","chosenObjects","setChosenObjects","submitForm","forms","advancedForm","environmentCheckbox","chosenEnvironment","chosenExperts","objectCheckbox","choshenIssue","issueCheckbox","expQuer","formQuery","envQuer","issueQuer","PromiseArr","Promise","resolve","rejcet","all","AdvancedFilter","existingObjects","possibleIssues","setPossibleIssues","setisLoading","fetchpossibleIssues","CheckAllCheckBoxes","objName","secondary","mainCheckBox","secondaryCheckBoxes","issue_id","WarningAlert","isNotShowing","setIsNotShowing","CarouselView","Carousel","img1","alt","Caption","img2","img3","KEEMPrinciples","ListGroup","Home","URL_FROM_TABLE_NAME_MAP","getInitialState","columns","field","o","ExceptionColumns","AddDictionaryRecord","Obj","x","headerName","formValues","setFormValues","flexWrap","setForm","every","Boolean","response","sqlMessage","DictionaryModes","setSelectedMode","mode","displayName","RemoveDictionaryRecord","selectedRow","setShouldDeselectSelectedRows","idColumnName","setIdColumnName","idValue","setIdValue","removeRecord","warningMessage","prompt","InputGroup","Prepend","Text","aria-label","aria-describedby","EditDictionaryRecord","editRecord","Dictionary","tableName","setColumns","setRows","gridOptions","setGridOptions","selectedMode","setSelectedRow","shouldDeselectSelectedRows","mappedColumns","sortable","mapColumns","api","deselectAll","onFilterTextBoxChanged","inputText","setQuickFilter","exportDataAsCsv","fileName","paddingTop","paddingBottom","onInput","foundTable","dicLegend","el2","table","found","names","initName","newName","columnDefs","rowData","rowSelection","onGridReady","onRowSelected","selectedData","getSelectedNodes","App","Provider","exact","path","component","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b05c895.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3.d5d8d4cc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.d3521650.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.8cf8d7c3.jpg\";","export const LOGIN_URL = '/login';\r\nexport const POLYGONS_URL = '/polygons';\r\nexport const POLYGON_URL = '/polygon';\r\nexport const REGIONS_URL = '/regions';\r\nexport const POINTS_URL = '/points';\r\nexport const POINT_URL = '/point';\r\nexport const TYPE_OF_OBJECT_URL = '/typeofobjects';\r\nexport const EXPERTS_URL = '/experts';\r\nexport const ENVIRONMENTS_URL = '/environments';\r\nexport const ELEMENTS_URL = '/elements';\r\nexport const GDK_URL = '/gdk';\r\nexport const GDK_FIND_URL = '/gdk/find';\r\nexport const EMISSIONS_CALCULATIONS_URL = '/emissionscalculations';\r\nexport const OWNER_TYPES_URL = '/ownertypes';\r\nexport const TAX_VALUES_URL = '/taxvalues';\r\nexport const COMPARE_EMISSIONS = '/compareEmissions';\r\nexport const TASK_URL = '/tasks';\r\nexport const TUBE_URl = '/tube';\r\nexport const FORMULA_CALCULATIONS_URL = '/getcalculationsinfo';\r\nexport const GET_POSSIBLE_ISSUES = '/issuegetter';\r\nexport const ADVANCED_POINTS_URL = '/advancedpoints';\r\nexport const ADVANCED_POLYGONS_URL = '/advancedpolygons';\r\n\r\nexport const GET_PARAMS_URL = '/getParams';\r\nexport const GET_MED_STAT_BY_PARAMS = '/getMedStatByParams';\r\nexport const GET_MED_STAT_VALUES = '/getMedStatValues';\r\n\r\n// export const AGES_URL = '/ages';\r\n\r\nexport const MAP_CENTER_COORDS = [49.0139, 31.2858];\r\nexport const OPEN_STREET_MAP_URL = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';\r\n\r\nexport const TABLE_NAMES = {\r\n  elements: 'elements',\r\n  gdk: 'gdk',\r\n  environment: 'environment',\r\n  type_of_object: 'type_of_object',\r\n  tax_values: 'tax_values',\r\n};\r\n\r\nexport const DICTIONARY_MODES = {\r\n  search: 'search',\r\n  add: 'add',\r\n  edit: 'edit',\r\n  delete: 'delete',\r\n};\r\n\r\nexport const getLegendDescription = (type, envId) => {\r\n  return {\r\n    points: {\r\n      1: 'Розрахунок забруднення атмосфери',\r\n      2: 'Розрахунок забруднення питної води',\r\n      3: 'Розрахунок забруднення технічної води',\r\n      4: 'Розрахунок забруднення грунтів',\r\n      5: 'Розрахунок забруднення господарських грунтів',\r\n      6: 'Розрахунок забруднення поверхневих вод',\r\n      8: 'Розрахунок забруднення стратосфери',\r\n    },\r\n    region: {\r\n      1: 'Комплексний індекс забруднення атмосфери',\r\n      2: 'Індекс забрудненості питної води',\r\n      3: 'Індекс забрудненості технічної води',\r\n      4: 'Розрахунок забруднення грунтів',\r\n      5: 'Розрахунок забруднення господарських грунтів',\r\n      6: 'Індекс забрудненості поверхневих вод',\r\n      8: 'Розрахунок забруднення стратосфери',\r\n    },\r\n  }[type][envId];\r\n};\r\n\r\nexport const DENGEROUS_LVL_DEFAULT = [\r\n  {\r\n    lvl: 1,\r\n    min: -Infinity,\r\n    max: 1.5,\r\n    color: '#51e459',\r\n  },\r\n  {\r\n    lvl: 2,\r\n    min: 1.5,\r\n    max: 2,\r\n    color: 'darkgreen',\r\n  },\r\n  {\r\n    lvl: 3,\r\n    min: 2,\r\n    max: 2.5,\r\n    color: '#e4ed37',\r\n  },\r\n  {\r\n    lvl: 4,\r\n    min: 2.5,\r\n    max: 3,\r\n    color: '#FFAA00',\r\n  },\r\n  {\r\n    lvl: 5,\r\n    min: 3,\r\n    max: Infinity,\r\n    color: '#DB4437',\r\n  },\r\n];\r\n\r\nexport const DENGEROUS_LVL_ATMOSPHERE = [\r\n  {\r\n    lvl: 1,\r\n    min: -Infinity,\r\n    max: 2.5,\r\n    color: '#51e459',\r\n  },\r\n  {\r\n    lvl: 2,\r\n    min: 2.5,\r\n    max: 7.5,\r\n    color: 'darkgreen',\r\n  },\r\n  {\r\n    lvl: 3,\r\n    min: 7.5,\r\n    max: 12.5,\r\n    color: '#e4ed37',\r\n  },\r\n  {\r\n    lvl: 4,\r\n    min: 12.5,\r\n    max: 22.5,\r\n    color: '#FFAA00',\r\n  },\r\n  {\r\n    lvl: 5,\r\n    min: 22.5,\r\n    max: 52.5,\r\n    color: '#E88617',\r\n  },\r\n  {\r\n    lvl: 6,\r\n    min: 52.5,\r\n    max: Infinity,\r\n    color: '#DB4437',\r\n  },\r\n];\r\n\r\nexport const DENGEROUS_LVL_WATER = [\r\n  {\r\n    lvl: 1,\r\n    min: -Infinity,\r\n    max: 0.2,\r\n    color: '#51e459',\r\n  },\r\n  {\r\n    lvl: 2,\r\n    min: 0.2,\r\n    max: 1,\r\n    color: 'darkgreen',\r\n  },\r\n  {\r\n    lvl: 3,\r\n    min: 1,\r\n    max: 2,\r\n    color: '#e4ed37',\r\n  },\r\n  {\r\n    lvl: 4,\r\n    min: 2,\r\n    max: 4,\r\n    color: '#858a21',\r\n  },\r\n  {\r\n    lvl: 5,\r\n    min: 4,\r\n    max: 6,\r\n    color: '#FFAA00',\r\n  },\r\n  {\r\n    lvl: 6,\r\n    min: 6,\r\n    max: 10,\r\n    color: '#E88617',\r\n  },\r\n  {\r\n    lvl: 7,\r\n    min: 10,\r\n    max: Infinity,\r\n    color: '#DB4437',\r\n  },\r\n];\r\n\r\nexport const DENGEROUS_LVL_POINT = [\r\n  {\r\n    lvl: 1,\r\n    min: 1,\r\n    max: 1.5,\r\n    color: 'rgba(0, 200, 0, 1)',\r\n  },\r\n  {\r\n    lvl: 2,\r\n    min: 1.5,\r\n    max: 2,\r\n    color: 'rgba(0, 110, 0, 1)',\r\n  },\r\n  {\r\n    lvl: 3,\r\n    min: 2,\r\n    max: 2.5,\r\n    color: 'rgba(255, 255, 102,1)',\r\n  },\r\n  {\r\n    lvl: 4,\r\n    min: 2.5,\r\n    max: 3,\r\n    color: 'rgba(179, 179, 0,1)',\r\n  },\r\n  {\r\n    lvl: 5,\r\n    min: 3,\r\n    max: Infinity,\r\n    color: 'rgba(242, 54, 7, 1)',\r\n  },\r\n];\r\n\r\nexport const getDataForLegendPoint = (idEnvironment) => {\r\n  return {\r\n    1: DENGEROUS_LVL_POINT,\r\n    2: DENGEROUS_LVL_POINT,\r\n    3: DENGEROUS_LVL_POINT,\r\n    4: DENGEROUS_LVL_POINT,\r\n    5: DENGEROUS_LVL_POINT,\r\n    6: DENGEROUS_LVL_POINT,\r\n    8: DENGEROUS_LVL_POINT,\r\n  }[idEnvironment];\r\n};\r\n\r\nexport const getDataForLegendRegion = (idEnvironment) => {\r\n  return {\r\n    1: DENGEROUS_LVL_ATMOSPHERE,\r\n    2: DENGEROUS_LVL_WATER,\r\n    3: DENGEROUS_LVL_WATER,\r\n    4: DENGEROUS_LVL_DEFAULT,\r\n    5: DENGEROUS_LVL_DEFAULT,\r\n    6: DENGEROUS_LVL_WATER,\r\n    8: DENGEROUS_LVL_DEFAULT,\r\n  }[idEnvironment];\r\n};\r\n","import axios from 'axios';\r\n\r\nasync function post(url, body) {\r\n  return axios.post(url, body);\r\n}\r\n\r\nasync function get(url) {\r\n  return axios.get(url);\r\n}\r\n\r\nasync function put(url, body) {\r\n  return axios.put(url, body);\r\n}\r\n\r\nasync function deleteRequest(url, body) {\r\n  return axios.delete(url);\r\n}\r\n\r\nexport { post, get, put, deleteRequest };\r\n","import React from 'react';\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap';\r\n\r\nimport { post } from '../../utils/httpService';\r\nimport { LOGIN_URL } from '../../utils/constants';\r\n\r\nexport const Auth = (props) => {\r\n  const [login, setLogin] = React.useState('');\r\n  const [password, setPassword] = React.useState('');\r\n\r\n  const loginUser = () => {\r\n    post(LOGIN_URL, {\r\n      login: login,\r\n      password: password,\r\n    }).then(({ data: user }) => {\r\n      if (user) {\r\n        props.onHide();\r\n        props.setUser(user);\r\n        sessionStorage.setItem('user', JSON.stringify(user));\r\n      } else {\r\n        alert('Incorrect login/password');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className='justify-content-center'>\r\n        <Col xs={6}>\r\n          <Form>\r\n            <Form.Group controlId='formUsername'>\r\n              <Form.Label>Логін</Form.Label>\r\n              <Form.Control\r\n                type='input'\r\n                placeholder='Введіть логін'\r\n                value={login}\r\n                onChange={(e) => setLogin(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='formBasicPassword'>\r\n              <Form.Label>Пароль</Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Введіть пароль'\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Button variant='primary' onClick={loginUser}>\r\n              Увійти\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nimport \"./modal.css\";\r\n\r\nexport const VerticallyCenteredModal = (props) => (\r\n  <Modal\r\n    {...props}\r\n    size={props.size || 'lg'}\r\n    style={{zIndex:2000}}\r\n    dialogClassName=\"modalAdaptive\"\r\n    aria-labelledby='contained-modal-title-vcenter'\r\n    centered\r\n  >\r\n    <Modal.Header closeButton>\r\n      <Modal.Title id='contained-modal-title-vcenter'>\r\n        {props.header}\r\n      </Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>{props.children}</Modal.Body>\r\n    <Modal.Footer>\r\n      <Button onClick={props.onHide}>Закрити</Button>\r\n    </Modal.Footer>\r\n  </Modal>\r\n);\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { Auth } from './auth';\r\nimport { VerticallyCenteredModal } from '../modals/modal';\r\n\r\nexport const Login = (props) => {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant='primary' onClick={() => setModalShow(true)}>\r\n        Увійти\r\n      </Button>\r\n      <VerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        header='Увійти до персонального акаунту'\r\n      >\r\n        <Auth onHide={() => setModalShow(false)} setUser={props.setUser} />\r\n      </VerticallyCenteredModal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { createContext } from 'react';\r\n\r\nexport const environmentsInfoInitialState = {\r\n  selected: null,\r\n  environments: [],\r\n};\r\n\r\nexport const EnvironmentsInfoContext = createContext(\r\n  environmentsInfoInitialState\r\n);\r\n","import React, { useRef, useEffect, useState } from 'react';\r\nimport { Button, Modal, Spinner } from 'react-bootstrap';\r\n\r\nimport './radiowidget.css';\r\n\r\nconst Widget = ({}) => {\r\n  const refer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const connectionScript = document.createElement('script');\r\n    const initialComponentScript = document.createElement('script');\r\n    connectionScript.src =\r\n      'https://rewidget.jrc.ec.europa.eu/v3/loader.ashx?theme=eu-2015&lang=en';\r\n    initialComponentScript.innerHTML = \"__eurdep_maps('widget', {center: [49.664447, 31.034037], zoom: 6});\";\r\n    refer.current.append(connectionScript);\r\n    connectionScript.onload = () => {\r\n      refer.current.append(initialComponentScript);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={refer}>\r\n      <div id='widget' style={{ height: '500px' }}>\r\n        <Spinner\r\n          className='loading-spiner'\r\n          animation='border'\r\n          variant='primary'\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const RadioWidget = ({ hideRadio, showRadioModal, size }) => {\r\n  return (\r\n    <Modal\r\n      show={showRadioModal}\r\n      onHide={hideRadio}\r\n      size={size || 'lg'}\r\n      aria-labelledby='contained-modal-title-vcenter'\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id='contained-modal-title-vcenter'>\r\n          Радіаційний моніторинг\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Widget />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={hideRadio}>Закрити</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useContext } from 'react';\r\nimport { Button, NavDropdown , Navbar} from 'react-bootstrap';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport { TABLE_NAMES } from '../../utils/constants';\r\n\r\nimport { Login } from '../auth/login';\r\nimport { EnvironmentsInfoContext } from '../context/environmentsInfoContext';\r\nimport { useState } from 'react';\r\nimport { RadioWidget } from '../radiowidget/radiowidget';\r\n\r\nimport \"./menu.css\"\r\n\r\nconst TABLE_NAMES_ON_IU = {\r\n  [TABLE_NAMES.elements]: 'Елементи',\r\n  [TABLE_NAMES.gdk]: 'ГДК',\r\n  [TABLE_NAMES.environment]: 'Середовища',\r\n  [TABLE_NAMES.type_of_object]: 'Типи об`єктів',\r\n  //[TABLE_NAMES.tax_values]: 'Податки',\r\n};\r\n\r\nexport const MenuView = ({ user, setUser, dictionary, setDictionary }) => {\r\n  const history = useHistory();\r\n\r\n  const location = useLocation();\r\n\r\n  const { environmentsInfo, setEnvironmentsInfo } = useContext(\r\n    EnvironmentsInfoContext\r\n  );\r\n\r\n  const [ isSpecial, setIsSpecial] = useState(false);\r\n\r\n  const [showRadioModal, setshowRadioModal] = useState(false);\r\n\r\n  const hideRadio = () => setshowRadioModal(false);\r\n  const showRadio = () => setshowRadioModal(true);\r\n\r\n  const logOut = () => {\r\n    setUser(null);\r\n    sessionStorage.removeItem('user');\r\n  };\r\n\r\n  const selectEnvironment = (id, name, setMapChosenType) => {\r\n    const selectedEnvironment = environmentsInfo.environments.find(\r\n      ({ id: environmentId }) => +environmentId === +id\r\n    );\r\n\r\n    setEnvironmentsInfo({\r\n      selected: selectedEnvironment,\r\n      environments: environmentsInfo.environments,\r\n    });\r\n\r\n    setDictionary(null)\r\n\r\n    setIsSpecial(false);\r\n\r\n    history.push('/earth');\r\n  };\r\n\r\n  const openAdvancedMap = ()=>{\r\n    \r\n    setEnvironmentsInfo({\r\n      selected: null,\r\n      environments: environmentsInfo.environments,\r\n    });\r\n\r\n    setDictionary(null);\r\n\r\n    setIsSpecial(true);\r\n\r\n    history.push('/advancedmap');\r\n  }\r\n\r\n  const selectDictionary = (name) => {\r\n    setDictionary(name);\r\n\r\n    setEnvironmentsInfo({\r\n      selected: null,\r\n      environments: environmentsInfo.environments,\r\n    });\r\n\r\n\r\n    setIsSpecial(false);\r\n    history.push('/dictionary');\r\n  };\r\n\r\n  const isActive = (id) => {\r\n    const { selected } = environmentsInfo;\r\n    if (selected) {\r\n      return id === selected.id;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const navigateToHome = () => {\r\n    setEnvironmentsInfo({\r\n      selected: null,\r\n      environments: environmentsInfo.environments,\r\n    });\r\n    setIsSpecial(false);\r\n    setDictionary(null);\r\n    \r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <Navbar bg=\"light\" className=\"z-index\"  expand=\"lg\">\r\n      <Navbar.Toggle  aria-controls=\"menu-nav\"/>\r\n        <Navbar.Collapse id=\"menu-nav\" className=\"\" >\r\n          <Nav className='d-flex align-items-center container'>\r\n            <Nav.Item>\r\n              <Nav.Link style={primaryColorObject} onClick={() => navigateToHome()}>\r\n                Домашня сторінка\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <NavDropdown title={<span className=\"text-primary\">Карта викидів</span>}>\r\n                  {environmentsInfo.environments.map(({ id, name }) => (\r\n                    <NavDropdown.Item \r\n                      onClick={() => selectEnvironment(id, name)}\r\n                      key={id}\r\n                      active={isActive(id)}\r\n                    >\r\n                      {name}\r\n                    </NavDropdown.Item>\r\n                  ))}\r\n                  <NavDropdown.Item \r\n                    onClick={() => openAdvancedMap()}\r\n                    active={isSpecial}\r\n                  >\r\n                    Спец мапа\r\n                  </NavDropdown.Item>\r\n              </NavDropdown>\r\n            </Nav.Item>\r\n            {user && user.id_of_expert === 0 && (\r\n                <Nav.Item>\r\n                  <NavDropdown  title={<span className=\"text-primary\">Довідники</span>}>\r\n                    {Object.values(TABLE_NAMES).map((name, index) => (\r\n                      <NavDropdown.Item\r\n                        onClick={() => selectDictionary(name)}\r\n                        key={index}\r\n                        active={dictionary === name}\r\n                      >\r\n                        {TABLE_NAMES_ON_IU[name]}\r\n                      </NavDropdown.Item>\r\n                    ))}\r\n                  </NavDropdown>\r\n                </Nav.Item>\r\n                )}\r\n                {(location.pathname === '/earth' || location.pathname === '/advancedmap' ) && (\r\n                  <Nav.Item>\r\n                    <Nav.Link style={primaryColorObject} onClick={showRadio}>Радіаційний моніторинг</Nav.Link>\r\n                    <RadioWidget\r\n                      showRadioModal={showRadioModal}\r\n                      hideRadio={hideRadio}\r\n                    />\r\n                  </Nav.Item>\r\n                )}\r\n            <Nav.Item className=\"menu_togler\">\r\n              {user ? (\r\n                <div className='d-flex align-items-center justify-content-center'>\r\n                  <h5 className='mr-2 mb-0'>\r\n                    Вітаємо, {user.FIO} ({user.expert_name})\r\n                  </h5>\r\n                  <Button variant='outline-secondary' size='md' onClick={logOut}>\r\n                    Вийти\r\n                  </Button>\r\n                </div>\r\n              ) : (\r\n                <Login setUser={setUser} />\r\n              )}\r\n            </Nav.Item>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nconst primaryColorObject = {\r\n  color:\"#0275d8\",\r\n}\r\n","import React from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  //Legend,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\nimport './compareChart.css';\r\n\r\nconst COLORS = [\r\n  '#0088FE',\r\n  '#00C49F',\r\n  '#FFBB28',\r\n  '#FF8042',\r\n  '#A8E4A0',\r\n  '#30D5C8',\r\n  '#3E5F8A',\r\n  '#00BFFF',\r\n  '#BDDA57',\r\n];\r\n\r\nexport const CompareChart = ({ title, data }) => {\r\n  let datesForView = [];\r\n  for (const itr of [\r\n    ...new Set(\r\n      data.map((el) => {\r\n        return el.DateEm;\r\n      })\r\n    ),\r\n  ]) {\r\n    datesForView.push({\r\n      name: itr,\r\n    });\r\n  }\r\n\r\n  for (const itr of datesForView) {\r\n    for (const item of data.filter((el) => el.DateEm == itr.name)) {\r\n      itr[item.Name_Object] = item.ValueAvg;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='compare-chart'>\r\n      <h3>{title}</h3>\r\n      <ResponsiveContainer width=\"100%\" height={250}>\r\n        <LineChart\r\n          width={500}\r\n          height={250}\r\n          data={datesForView}\r\n          margin={{ top: 5, right: 30, left: 0, bottom: 5 }}\r\n        >\r\n          <CartesianGrid strokeDasharray='3 3' />\r\n          <XAxis dataKey='name' />\r\n          <YAxis />\r\n          <Tooltip />\r\n          {[\r\n            ...new Set(\r\n              data.map((el) => {\r\n                return el.Name_Object;\r\n              })\r\n            ),\r\n          ].map((el, index) => {\r\n            return (\r\n              <Line\r\n                key={el}\r\n                type='monotone'\r\n                dataKey={el}\r\n                stroke={COLORS[index % COLORS.length]}\r\n              />\r\n            );\r\n          })}\r\n          {/* <Legend\r\n            align='left'\r\n            verticalAlign='bottom'\r\n            width={750}\r\n            wrapperStyle={{}}\r\n            margin={{ top: 0, left: 0, right: 0, bottom: -5 }}\r\n          /> */}\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n","import { resolve } from \"path\";\r\nimport pointInPolygon from \"point-in-polygon\";\r\n\r\nexport const transformEmissions = (emissions) => {\r\n  const elementIds = [...new Set(emissions.map(({ idElement }) => idElement))];\r\n\r\n  // {\r\n  //     [element]: { [Year]: { [Month]: { avg: ValueAvg, max: ValueMax } } }\r\n  // }\r\n  let transformedData = {};\r\n\r\n  emissions.forEach(({ idElement, ValueAvg, ValueMax, Year, Month }) => {\r\n    elementIds.forEach((elementId) => {\r\n      if (elementId === idElement) {\r\n        if (transformedData[elementId]) {\r\n          if (transformedData[idElement][Year]) {\r\n            if (transformedData[idElement][Year][Month]) {\r\n              const { avg, max } = transformedData[idElement][Year][Month];\r\n\r\n              transformedData[idElement][Year][Month] = {\r\n                avg: ValueAvg + avg,\r\n                max: ValueMax + max,\r\n              };\r\n            } else {\r\n              transformedData[idElement][Year][Month] = {\r\n                avg: ValueAvg,\r\n                max: ValueMax,\r\n              };\r\n            }\r\n          } else {\r\n            transformedData[idElement][Year] = {\r\n              [Month]: { avg: ValueAvg, max: ValueMax },\r\n            };\r\n          }\r\n        } else {\r\n          transformedData[idElement] = {\r\n            [Year]: { [Month]: { avg: ValueAvg, max: ValueMax } },\r\n          };\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  return transformedData;\r\n};\r\n\r\nexport const formatMonthDataForBarChart = (\r\n  transformedEmissions,\r\n  elementId,\r\n  year\r\n) =>\r\n  transformedEmissions &&\r\n  elementId &&\r\n  year &&\r\n  Object.keys(transformedEmissions[elementId][year]).map((month) => ({\r\n    month,\r\n    average: transformedEmissions[elementId][year][month].avg,\r\n    max: transformedEmissions[elementId][year][month].max,\r\n  }));\r\n\r\nexport const getElementName = (emissions, emissionId) => [\r\n  ...new Set(\r\n    emissions\r\n      .filter(({ idElement }) => Number(emissionId) === idElement)\r\n      .map(({ short_name }) => short_name)\r\n  ),\r\n];\r\n\r\nexport const removeObjectDuplicates = (items, prop) =>\r\n  items.filter(\r\n    (obj, index, arr) =>\r\n      arr.map((mapObj) => mapObj[prop]).indexOf(obj[prop]) === index\r\n  );\r\n\r\nexport const findAverageForEmissionCalculations = (emissionCalculations) => {\r\n  const elementNames = [];\r\n\r\n  emissionCalculations.forEach((emission) => {\r\n    if (!elementNames.includes(emission.element)) {\r\n      elementNames.push(emission.element);\r\n    }\r\n  });\r\n\r\n  return elementNames.map((name) => {\r\n    let temp = { name, quantity: 0, total: 0 };\r\n\r\n    emissionCalculations.forEach((emission) => {\r\n      if (temp.name === emission.element) {\r\n        temp.total += emission.averageCalculations.average;\r\n        temp.quantity++;\r\n      }\r\n    });\r\n\r\n    return {\r\n      name: temp.name,\r\n      value: temp.total / temp.quantity,\r\n    };\r\n  });\r\n};\r\n\r\nexport const findMaxForEmissionCalculations = (emissionCalculations) => {\r\n  const elementNames = [];\r\n\r\n  emissionCalculations.forEach((emission) => {\r\n    if (!elementNames.includes(emission.element)) {\r\n      elementNames.push(emission.element);\r\n    }\r\n  });\r\n\r\n  return elementNames.map((name) => {\r\n    let temp = { name, value: 0 };\r\n\r\n    emissionCalculations.forEach((emission) => {\r\n      if (temp.name === emission.element) {\r\n        if (emission.maximumCalculations.max > temp.value) {\r\n          temp.value = emission.maximumCalculations.max;\r\n        }\r\n      }\r\n    });\r\n\r\n    return temp;\r\n  });\r\n};\r\n\r\nexport const formatEmissionsLineChart = (emissionCalculations) => {\r\n  const elementNames = [];\r\n\r\n  emissionCalculations.forEach((emission) => {\r\n    if (!elementNames.includes(emission.element)) {\r\n      elementNames.push(emission.element);\r\n    }\r\n  });\r\n\r\n  return elementNames.reduce((obj, name) => {\r\n    const temp = [];\r\n    emissionCalculations.forEach((emission) => {\r\n      if (name === emission.element) {\r\n        temp.push({\r\n          name: `${emission.date.day}-${emission.date.month}-${emission.date.year}`,\r\n          'Середнє значення': emission.averageCalculations.average,\r\n          'Максимальне значення': emission.maximumCalculations.max,\r\n        });\r\n      }\r\n    });\r\n    obj[name] = temp;\r\n\r\n    return obj;\r\n  }, {});\r\n};\r\n\r\nexport const extractRGBA = (rgbaString) => {\r\n  try {\r\n    if (!/rgba/gi.test(rgbaString)) {\r\n      throw new Error('Неправильний формат для кольору');\r\n    }\r\n\r\n    const colors = rgbaString\r\n      .match(/\\d*\\.?\\d+/gi)\r\n      .map((colorValue) => +colorValue);\r\n\r\n    if (colors.length !== 4) {\r\n      throw new Error('Кольори заповнені неправильно');\r\n    }\r\n\r\n    const [r, g, b, a] = colors;\r\n\r\n    return {\r\n      r,\r\n      g,\r\n      b,\r\n      a,\r\n    };\r\n  } catch (error) {\r\n    console.error(error);\r\n    alert(error.message);\r\n  }\r\n};\r\n\r\nexport const randGraphColor = () => {\r\n  var r = Math.floor(Math.random() * 256),\r\n    g = Math.floor(Math.random() * 256),\r\n    b = Math.floor(Math.random() * 256);\r\n  return '#' + r.toString(16) + g.toString(16) + b.toString(16);\r\n};\r\n\r\nexport const getIdColumnNameForDictionaryObject = (item) => {\r\n  const possibleNamesForIdColumn = ['code', 'id', 'Id', 'id_of_element'];\r\n\r\n  return possibleNamesForIdColumn.find((possibleName) =>\r\n    Object.keys(item).some((key) => key === possibleName)\r\n  );\r\n};\r\n\r\nexport const transformCalculationDate= (date)=>{\r\n  return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`\r\n}\r\n\r\nexport  const formParamsForGetCheckbox = (arr,label)=>{\r\n  let query = '';\r\n  arr.forEach((el,i)=>{\r\n      query+= (i==arr.length-1)?`${label}[]=${el.value}`:`${label}[]=${el.value}&`\r\n  })\r\n  return query;\r\n}\r\n\r\nexport  const formParamsForGetArr = (arr,label)=>{\r\n  let query = '';\r\n  arr.forEach((el,i)=>{\r\n      query+= (i==arr.length-1)?`${label}[]=${el}`:`${label}[]=${el}&`\r\n  })\r\n  return query;\r\n}\r\n\r\nexport const removeDuplicates = (arr) => {\r\n  const result = [];\r\n  const duplicatesIndices = [];\r\n\r\n  // Перебираем каждый элемент в исходном массиве\r\n  arr.forEach((current, index) => {\r\n    if (duplicatesIndices.includes(index)) return;\r\n\r\n    result.push(current);\r\n\r\n    // Сравниваем каждый элемент в массиве после текущего\r\n    for (\r\n      let comparisonIndex = index + 1;\r\n      comparisonIndex < arr.length;\r\n      comparisonIndex++\r\n    ) {\r\n      const comparison = arr[comparisonIndex];\r\n      const currentKeys = Object.keys(current);\r\n      const comparisonKeys = Object.keys(comparison);\r\n\r\n      // Проверяем длину массивов\r\n      if (currentKeys.length !== comparisonKeys.length) continue;\r\n\r\n      // Проверяем значение ключей\r\n      const currentKeysString = currentKeys.sort().join('').toLowerCase();\r\n      const comparisonKeysString = comparisonKeys.sort().join('').toLowerCase();\r\n      if (currentKeysString !== comparisonKeysString) continue;\r\n\r\n      // Проверяем индексы ключей\r\n      let valuesEqual = true;\r\n      for (let i = 0; i < currentKeys.length; i++) {\r\n        const key = currentKeys[i];\r\n        if (current[key] !== comparison[key]) {\r\n          valuesEqual = false;\r\n          break;\r\n        }\r\n      }\r\n      if (valuesEqual) duplicatesIndices.push(comparisonIndex);\r\n    } // Конец цикла\r\n  });\r\n  return result;\r\n}","import React, { useEffect } from 'react';\r\nimport {\r\n  Table,\r\n  DropdownButton,\r\n  Dropdown,\r\n} from 'react-bootstrap';\r\n\r\nimport { CompareChart } from '../charts/compareChart.jsx';\r\n\r\nimport { DateRangePicker, DateRange } from 'react-date-range';\r\nimport { addDays } from 'date-fns';\r\nimport { uk } from 'date-fns/locale';\r\n\r\nimport { get } from '../../utils/httpService';\r\nimport { COMPARE_EMISSIONS } from '../../utils/constants';\r\nimport { useState } from 'react';\r\nimport { useContext } from 'react';\r\nimport { EnvironmentsInfoContext } from '../context/environmentsInfoContext';\r\nimport { removeObjectDuplicates } from '../../utils/helpers';\r\nimport { VerticallyCenteredModal } from \"../modals/modal\";\r\n\r\nimport { formParamsForGetArr } from \"../../utils/helpers\";\r\nimport './modalCompare.css';\r\n\r\nexport const CompareModal = ({ points, polygons,chosenEnvironments, ...props }) => {\r\n  const { environmentsInfo } = useContext(EnvironmentsInfoContext);\r\n\r\n  const [Compares, setCompares] = useState([]);\r\n\r\n  const [dateWidth, setDateWidth] = React.useState(window.innerWidth);\r\n\r\n  const handleWidth = ()=>{\r\n    setDateWidth(window.innerWidth);\r\n  } \r\n\r\n  if (window.onresize === \"function\") {\r\n    window.removeEventListener(handleWidth);\r\n  }\r\n  else{\r\n    window.addEventListener('resize',handleWidth);\r\n  }\r\n\r\n  const [EmissionModes, setEmissionModes] = useState([\r\n    {\r\n      name: null,\r\n      measure: null,\r\n    },\r\n  ]);\r\n\r\n  const [ChosenEmissionMode, setChosenEmissionMode] = useState({\r\n    base: true,\r\n    set: '',\r\n    measue: null,\r\n  });\r\n\r\n  const [TableWillUpdate, setTableWillUpdate] = useState(false);\r\n\r\n  const [state, setState] = React.useState([\r\n    {\r\n      startDate: new Date(),\r\n      endDate: addDays(new Date(), 7),\r\n      key: 'selection',\r\n    },\r\n  ]);\r\n\r\n  const handleHideClick = () => {\r\n    props.onHide();\r\n    setChosenEmissionMode({ base: true, set: '', measue: null });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.show) {\r\n      const [date] = state;\r\n      let IdArr = '';\r\n\r\n      const idEnvironment = environmentsInfo.selected?environmentsInfo.selected.id:null;\r\n      const chosenEnv = chosenEnvironments?formParamsForGetArr(chosenEnvironments,'idEnvironment'):null;\r\n\r\n      for (const itr of points) {\r\n        IdArr += `&PointsId[]=${itr}`;\r\n      }\r\n      for (const itr of polygons) {\r\n        IdArr += `&PolygonsId[]=${itr}`;\r\n      }\r\n\r\n      get(\r\n        `${COMPARE_EMISSIONS}?${chosenEnv?chosenEnv:`idEnvironment=${idEnvironment}`}${IdArr}&startDate=${date.startDate.toISOString()}&endDate=${date.endDate.toISOString()}`\r\n      ).then(({ data }) => {\r\n        setCompares(data);\r\n        setEmissionModes(\r\n          removeObjectDuplicates(\r\n            data.map((el) => {\r\n              return {\r\n                name: el.ElementName,\r\n                measure: el.Measure,\r\n              };\r\n            }),\r\n            'name'\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      setCompares([]);\r\n    }\r\n  }, [props.show, state]);\r\n\r\n  useEffect(() => {\r\n    if (ChosenEmissionMode.base) {\r\n      Compares.forEach((el) => (el.visible = true));\r\n    } else {\r\n      Compares.forEach((el) => {\r\n        if (el.ElementName == ChosenEmissionMode.set) {\r\n          el.visible = true;\r\n        } else {\r\n          el.visible = false;\r\n        }\r\n      });\r\n    }\r\n\r\n    setTableWillUpdate(true);\r\n  }, [ChosenEmissionMode]);\r\n\r\n  useEffect(() => {\r\n    setTableWillUpdate(false);\r\n  }, [TableWillUpdate]);\r\n\r\n  const TableData = ({ TableWillUpdate }) => {\r\n    return (\r\n      <Table className='CompareTable' responsive size='lg'>\r\n        <thead>\r\n          <tr>\r\n            <th title=' '></th>\r\n            {Compares.map((d, i) => {\r\n              if (d.visible) {\r\n                return (\r\n                  <th key={'thNameObj=' + i} title={d.Name_Object}>\r\n                    {d.Name_Object}\r\n                  </th>\r\n                );\r\n              }\r\n            })}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th title='Максимальне значення'>Максимальне значення</th>\r\n            {Compares.map((d, i) => {\r\n              if (d.visible) {\r\n                return (\r\n                  <td key={'thValueMax=' + i} title={d.ValueMax}>\r\n                    {d.ValueMax}\r\n                  </td>\r\n                );\r\n              }\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <th title='Середенє значення'>Середенє значення</th>\r\n            {Compares.map((d, i) => {\r\n              if (d.visible) {\r\n                return (\r\n                  <td key={'thValueAvg=' + i} title={d.ValueAvg}>\r\n                    {d.ValueAvg}\r\n                  </td>\r\n                );\r\n              }\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <th title='Дата додавання'>Дата додавання</th>\r\n            {Compares.map((d, i) => {\r\n              if (d.visible) {\r\n                return (\r\n                  <td key={'thDate=' + i} title={d.DateEm}>\r\n                    {d.DateEm}\r\n                  </td>\r\n                );\r\n              }\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <th title='Одиниця виміру'>Одиниця виміру</th>\r\n            {Compares.map((d, i) => {\r\n              if (d.visible) {\r\n                return (\r\n                  <td key={'thMeasue=' + i} title={d.Measure}>\r\n                    {d.Measure}\r\n                  </td>\r\n                );\r\n              }\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <th title='Назва елементу'>Назва елементу</th>\r\n            {Compares.map((d, i) => {\r\n              if (d.visible) {\r\n                return (\r\n                  <td key={'thElementName=' + i} title={d.ElementName}>\r\n                    {d.ElementName}\r\n                  </td>\r\n                );\r\n              }\r\n            })}\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <VerticallyCenteredModal\r\n      size='xl'\r\n      show={props.show}\r\n      onHide={handleHideClick}\r\n      header=\"Порівняння обраних об'єктів.\"\r\n    >\r\n      <h4>Оберіть дати для відображення викидів за певний період</h4>\r\n      {dateWidth>1200? (\r\n        <DateRangePicker\r\n            locale={uk}\r\n            onChange={(item) => setState([item.selection])}\r\n            showSelectionPreview={true}\r\n            moveRangeOnFirstSelection={false}\r\n            months={2}\r\n            ranges={state}\r\n            direction='horizontal'\r\n        />\r\n      ):(\r\n        <div style={{display:\"flex\"}}>\r\n        <DateRange\r\n          locale={uk}\r\n          editableDateInputs={true}\r\n          onChange={item => setState([item.selection])}\r\n          showSelectionPreview={true}\r\n          moveRangeOnFirstSelection={false}\r\n          ranges={state}\r\n          className=\"adaptiveDateRange\"\r\n        />\r\n      </div>\r\n      )}\r\n\r\n        {Compares.length > 0 && (\r\n          <>\r\n            <DropdownButton\r\n              className='DropDownElementButton'\r\n              title={\r\n                ChosenEmissionMode.set == ''\r\n                  ? 'Елемент забруднення'\r\n                  : ChosenEmissionMode.set\r\n              }\r\n              id='bg-vertical-dropdown-1'\r\n            >\r\n              <Dropdown.Item\r\n                onClick={() =>\r\n                  setChosenEmissionMode({\r\n                    base: true,\r\n                    set: 'Усі можливі',\r\n                    measue: null,\r\n                  })\r\n                }\r\n              >\r\n                {' '}\r\n                Усі можливі{' '}\r\n              </Dropdown.Item>\r\n              {EmissionModes.map((el) => {\r\n                return (\r\n                  <Dropdown.Item\r\n                    onClick={() =>\r\n                      setChosenEmissionMode({\r\n                        base: false,\r\n                        set: el.name,\r\n                        measue: el.measure,\r\n                      })\r\n                    }\r\n                  >\r\n                    {' '}\r\n                    {el.name}{' '}\r\n                  </Dropdown.Item>\r\n                );\r\n              })}\r\n            </DropdownButton>\r\n            {ChosenEmissionMode.measue && (\r\n              <h4>Одиниця виміру: {ChosenEmissionMode.measue}</h4>\r\n            )}\r\n            <TableData TableWillUpdate={TableWillUpdate} />\r\n            {!ChosenEmissionMode.base && (\r\n              <CompareChart\r\n                title={'Графік викидів'}\r\n                data={Compares.filter((el) => el.visible == true)}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n    </VerticallyCenteredModal>\r\n    // <Modal\r\n    //   {...props}\r\n    //   size='lg'\r\n    //   aria-labelledby='contained-modal-title-vcenter'\r\n    //   centered\r\n    // >\r\n    //   <Modal.Header closeButton>\r\n    //     <Modal.Title id='contained-modal-title-vcenter'>\r\n    //       Порівняння обраних об'єктів.\r\n    //     </Modal.Title>\r\n    //   </Modal.Header>\r\n    //   <Modal.Body>\r\n    //     <h4>Оберіть дати для відображення викидів за певний період</h4>\r\n    //     <DateRangePicker\r\n    //       locale={uk}\r\n    //       onChange={(item) => setState([item.selection])}\r\n    //       showSelectionPreview={true}\r\n    //       moveRangeOnFirstSelection={false}\r\n    //       months={2}\r\n    //       ranges={state}\r\n    //       direction='horizontal'\r\n    //     />\r\n    //     {Compares.length > 0 && (\r\n    //       <>\r\n    //         <DropdownButton\r\n    //           className='DropDownElementButton'\r\n    //           title={\r\n    //             ChosenEmissionMode.set == ''\r\n    //               ? 'Елемент забруднення'\r\n    //               : ChosenEmissionMode.set\r\n    //           }\r\n    //           id='bg-vertical-dropdown-1'\r\n    //         >\r\n    //           <Dropdown.Item\r\n    //             onClick={() =>\r\n    //               setChosenEmissionMode({\r\n    //                 base: true,\r\n    //                 set: 'Усі можливі',\r\n    //                 measue: null,\r\n    //               })\r\n    //             }\r\n    //           >\r\n    //             {' '}\r\n    //             Усі можливі{' '}\r\n    //           </Dropdown.Item>\r\n    //           {EmissionModes.map((el) => {\r\n    //             return (\r\n    //               <Dropdown.Item\r\n    //                 onClick={() =>\r\n    //                   setChosenEmissionMode({\r\n    //                     base: false,\r\n    //                     set: el.name,\r\n    //                     measue: el.measure,\r\n    //                   })\r\n    //                 }\r\n    //               >\r\n    //                 {' '}\r\n    //                 {el.name}{' '}\r\n    //               </Dropdown.Item>\r\n    //             );\r\n    //           })}\r\n    //         </DropdownButton>\r\n    //         {ChosenEmissionMode.measue && (\r\n    //           <h4>Одиниця виміру: {ChosenEmissionMode.measue}</h4>\r\n    //         )}\r\n    //         <TableData TableWillUpdate={TableWillUpdate} />\r\n    //         {!ChosenEmissionMode.base && (\r\n    //           <CompareChart\r\n    //             title={'Графік викидів'}\r\n    //             data={Compares.filter((el) => el.visible == true)}\r\n    //           />\r\n    //         )}\r\n    //       </>\r\n    //     )}\r\n    //   </Modal.Body>\r\n    //   <Modal.Footer>\r\n    //     <Button onClick={handleHideClick}>Закрити</Button>\r\n    //   </Modal.Footer>\r\n    // </Modal>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { DateRangePicker, DateRange } from 'react-date-range';\r\nimport { addDays } from 'date-fns';\r\nimport { uk } from 'date-fns/locale';\r\n\r\nimport { EMISSIONS_CALCULATIONS_URL } from '../../utils/constants';\r\nimport { get } from '../../utils/httpService';\r\nimport { useContext } from 'react';\r\nimport { EnvironmentsInfoContext } from '../context/environmentsInfoContext';\r\n\r\nimport { formParamsForGetArr } from \"../../utils/helpers\";\r\n\r\nimport './dateRangePicker.css'\r\n\r\nexport const DateRangePickerView = ({ id, param, setEmissionCalculations,EnvironmentAttachment }) => {\r\n  const { environmentsInfo } = useContext(EnvironmentsInfoContext);\r\n\r\n  const [dateWidth, setDateWidth] = React.useState(window.innerWidth);\r\n\r\n  const handleWidth = ()=>{\r\n    setDateWidth(window.innerWidth);\r\n  } \r\n\r\n  if (window.onresize === \"function\") {\r\n    window.removeEventListener(handleWidth);\r\n  }\r\n  else{\r\n    window.addEventListener('resize',handleWidth);\r\n  }\r\n\r\n  const [state, setState] = React.useState([\r\n    {\r\n      startDate: new Date(),\r\n      endDate: addDays(new Date(), 7),\r\n      key: 'selection',\r\n    },\r\n  ]);\r\n\r\n  React.useEffect(() => {\r\n    const [date] = state;\r\n\r\n    const idEnvironment = environmentsInfo.selected?environmentsInfo.selected.id:null;\r\n    const envParam = formParamsForGetArr(EnvironmentAttachment,'envAttach');\r\n\r\n    get(\r\n      `${EMISSIONS_CALCULATIONS_URL}?idEnvironment=${idEnvironment}&${param}=${id}&startDate=${date.startDate.toISOString()}&endDate=${date.endDate.toISOString()}${(EnvironmentAttachment && EnvironmentAttachment.length>0)?'&'+envParam:''}`\r\n    ).then(({ data }) => {\r\n      setEmissionCalculations(data);\r\n    });\r\n  }, [id, state]);\r\n\r\n  return (\r\n    <>\r\n      {(dateWidth>1200)? (\r\n        <DateRangePicker\r\n          locale={uk}\r\n          onChange={(item) => setState([item.selection])}\r\n          showSelectionPreview={true}\r\n          moveRangeOnFirstSelection={false}\r\n          months={2}\r\n          ranges={state}\r\n          direction='horizontal'\r\n        />):\r\n      (\r\n        <div style={{display:\"flex\"}}>\r\n          <DateRange\r\n            editableDateInputs={true}\r\n            onChange={item => setState([item.selection])}\r\n            moveRangeOnFirstSelection={false}\r\n            ranges={state}\r\n            className=\"adaptiveDateRange\"\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const ActualEmmisionDate = ({\r\n  dateState,\r\n  SetDateState,\r\n  initilDate,\r\n  enabled\r\n}) =>{\r\n  \r\n  React.useEffect(()=>{\r\n    if(enabled){\r\n      if(dateState[0].endDate > new Date() && dateState[0].startDate > new Date()){\r\n        SetDateState(initilDate);\r\n      }\r\n      else if(dateState[0].endDate > new Date()){\r\n        dateState[0].endDate = new Date();\r\n        SetDateState(dateState);\r\n      }\r\n    }\r\n  },[dateState])\r\n\r\n  return(\r\n    <div style={{display:\"flex\"}}>\r\n      <DateRange\r\n        editableDateInputs={true}\r\n        onChange={item => SetDateState([item.selection])}\r\n        moveRangeOnFirstSelection={false}\r\n        ranges={dateState}\r\n        className=\"adaptiveDateRange\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\r\n\r\nconst COLORS = [\r\n  '#0088FE',\r\n  '#00C49F',\r\n  '#FFBB28',\r\n  '#FF8042',\r\n  '#A8E4A0',\r\n  '#30D5C8',\r\n  '#3E5F8A',\r\n  '#00BFFF',\r\n  '#BDDA57',\r\n];\r\n\r\nconst valuePrecision = 4;\r\n\r\nexport const Chart = ({ title, data }) => {\r\n  const dataForView = data.map((item) => ({\r\n    ...item,\r\n    value: +item.value.toFixed(valuePrecision),\r\n  }));\r\n\r\n  return (\r\n    <div style={{padding:'2px'}}>\r\n      <h5 className=\"text-center\">{title}</h5>\r\n      <PieChart width={350} height={350}>\r\n        <Pie\r\n          data={dataForView}\r\n          cx={\"50%\"}\r\n          cy={200}\r\n          label\r\n          labelLine={false}\r\n          outerRadius={80}\r\n          fill='#8884d8'\r\n          dataKey='value'\r\n          isAnimationActive={false}\r\n        >\r\n          {data.map((entry, index) => (\r\n            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n          ))}\r\n        </Pie>\r\n        <Legend\r\n          verticalAlign='top'\r\n          height={20}\r\n          iconType={'circle'}\r\n          margin={{ top: 0, left: 0, right: 0, bottom: 0 }}\r\n        />\r\n      </PieChart>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\n\r\n\r\nexport const EmissionLineChart = ({ emissions }) => {\r\n  const [elementName, setElementName] = React.useState('');\r\n\r\n  if (!emissions) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {Object.keys(emissions).length > 0 && (\r\n        <Dropdown className='mr-2 mb-2'>\r\n          <Dropdown.Toggle size='md'>\r\n            {elementName || 'Оберіть елемент'}\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu>\r\n            {emissions &&\r\n              Object.keys(emissions).map((emissionName) => (\r\n                <Dropdown.Item\r\n                  key={emissionName}\r\n                  active={emissionName === elementName}\r\n                  onClick={() => {\r\n                    setElementName(emissionName);\r\n                  }}\r\n                >\r\n                  {emissionName}\r\n                </Dropdown.Item>\r\n              ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      )}\r\n      {Object.keys(emissions).length > 0 && elementName && (\r\n        <ResponsiveContainer width=\"100%\" height={200}>\r\n          <LineChart\r\n            width={400}\r\n            height={200}\r\n            data={emissions[elementName]}\r\n            margin={{\r\n              top: 10,\r\n              right: 30,\r\n              left: 0,\r\n              bottom: 0,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray='3 3' />\r\n            <XAxis dataKey='name' />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Line\r\n              connectNulls\r\n              type='monotone'\r\n              dataKey='Середнє значення'\r\n              stroke='#8884d8'\r\n            />\r\n            <Line\r\n              connectNulls\r\n              type='monotone'\r\n              dataKey='Максимальне значення'\r\n              stroke='#82ca9d'\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Table } from 'react-bootstrap'\r\n \r\nimport { get } from '../../utils/httpService';\r\nimport { FORMULA_CALCULATIONS_URL } from '../../utils/constants';\r\nimport { transformCalculationDate } from '../../utils/helpers'\r\n\r\nimport '../charts/emissionsChartModal.css'\r\n\r\nexport const FormulaCalculationsInfo = ({id})=>{\r\n    const [loaded, setLoaded] = React.useState(false);\r\n\r\n    const [data, setData] = React.useState([]);\r\n\r\n    React.useEffect(()=>{\r\n        if (!loaded) {\r\n            get(`${FORMULA_CALCULATIONS_URL}/${id}`).then(({data})=>{\r\n                setData(data);\r\n                setLoaded(true);\r\n            }).catch((err)=>{\r\n                console.log(\"Error loading data\")\r\n            })\r\n        }\r\n    })\r\n\r\n    return(\r\n        <>\r\n            {data.length>0?(\r\n                <div className=\"emission-table-wraper\">\r\n                    <Table className='emissions-inner-table'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th title='Серія'>Серія</th>\r\n                                <th title='Дата'>Дата</th>\r\n                                <th title='Назва формули'>Назва формули</th>\r\n                                <th title='Результат'>Результат</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data.map((el,id)=>{\r\n                                return(\r\n                                    <tr key={id}>\r\n                                        <td title={el.name}>{el.name}</td>\r\n                                        <td title={transformCalculationDate(new Date(el.date))}>{transformCalculationDate(new Date(el.date))}</td>\r\n                                        <td title={el.formula}>{el.formula}</td>\r\n                                        <td title={el.result}>{el.result}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </Table>  \r\n                </div>\r\n            ):(\r\n                <h4 style={{textAlign:'center', marginTop:10, marginBottom: 10}}>\r\n                    Для цього об'єкту не розраунків не знайдено!\r\n                </h4>\r\n            )\r\n            }\r\n        </>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport { Table, Tabs, Tab} from 'react-bootstrap';\r\n\r\nimport { get } from '../../utils/httpService';\r\nimport { EMISSIONS_CALCULATIONS_URL } from '../../utils/constants';\r\n\r\nimport {\r\n  findAverageForEmissionCalculations,\r\n  findMaxForEmissionCalculations,\r\n  formatEmissionsLineChart,\r\n} from '../../utils/helpers';\r\n\r\nimport { VerticallyCenteredModal } from '../modals/modal';\r\nimport { Chart } from '../charts/chart';\r\nimport { DateRangePickerView } from '../rangePicker/dateRangePicker';\r\nimport { EmissionLineChart } from '../charts/emissionsLineChart';\r\nimport { FormulaCalculationsInfo } from '../helperComponents/calculationsInfo'\r\n\r\nimport { formParamsForGetArr } from \"../../utils/helpers\";\r\n\r\nimport '../charts/emissionsChartModal.css';\r\nimport { EnvironmentsInfoContext } from '../context/environmentsInfoContext';\r\n\r\nconst valuesPrecision = 5;\r\nconst emptyState = 'Немає даних';\r\n\r\nexport const EmissionsChartModal = ({\r\n  id,\r\n  isPoint,\r\n  onHide,\r\n  show,\r\n  emissions,\r\n  EnvironmentAttachment,\r\n  isAdvanced\r\n}) => {\r\n  const { environmentsInfo } = useContext(EnvironmentsInfoContext);\r\n  const param = isPoint ? 'idPoi' : 'idPolygon';\r\n  const [emissionCalculations, setEmissionCalculations] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    getEmissionCalculations(id);\r\n  }, [id]);\r\n\r\n  const getEmissionCalculations = (id) => {\r\n    const idEnvironment = environmentsInfo.selected?environmentsInfo.selected.id:null;\r\n    const envParam = formParamsForGetArr(EnvironmentAttachment,'envAttach');\r\n\r\n    get(\r\n      `${EMISSIONS_CALCULATIONS_URL}?idEnvironment=${idEnvironment}&${param}=${id}${(EnvironmentAttachment && EnvironmentAttachment.length>0)?'&'+envParam:''}`\r\n    ).then(({ data }) => {setEmissionCalculations(data);});\r\n  };\r\n\r\n  const chartAverageData =\r\n    emissionCalculations && emissionCalculations.length > 0\r\n      ? findAverageForEmissionCalculations(emissionCalculations)\r\n      : [];\r\n\r\n  const chartMaxData =\r\n    emissionCalculations && emissionCalculations.length > 0\r\n      ? findMaxForEmissionCalculations(emissionCalculations)\r\n      : [];\r\n\r\n  return (\r\n    <VerticallyCenteredModal\r\n      size='xl'\r\n      show={show}\r\n      onHide={onHide}\r\n      header='Відобразити викиди'\r\n    >\r\n      <Tabs>\r\n        <Tab eventKey=\"emissions\" title=\"Забруднення\">\r\n          <h4 className='mb-3'>\r\n            Оберіть дати для відображення викидів за певний період\r\n          </h4>\r\n          \r\n          <DateRangePickerView\r\n            id={id}\r\n            param={param}\r\n            setEmissionCalculations={setEmissionCalculations}\r\n            EnvironmentAttachment={EnvironmentAttachment}\r\n          />\r\n          {emissionCalculations.length > 0 ? (\r\n            <div className=\"emission-table-wraper\">\r\n              <Table className='emissions-inner-table'>\r\n                <thead>\r\n                  <tr>\r\n                    {isAdvanced && isPoint && (\r\n                      <th title='Середовище'>Середовище</th>\r\n                    )}\r\n                    <th title='Елемент'>Елемент</th>\r\n                    <th title='Дата'>Дата</th>\r\n                    <th title='Одиниця виміру'>Одиниця виміру</th>\r\n                    <th title='Середнє значення average викидів'>\r\n                      Середнє значення average викидів\r\n                    </th>\r\n                    <th title='ГДК average'>ГДК average</th>\r\n                    <th title='Перевищення ГДК average'>Перевищення ГДК average</th>\r\n                    <th title='Max викидів'>Max викидів</th>\r\n                    <th title='ГДК max'>ГДК max</th>\r\n                    <th title='Перевищення ГДК max'>Перевищення ГДК max</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {emissionCalculations.map((emission, id) => {\r\n                    const exceedingByAverage = emission.averageCalculations.gdkAverage\r\n                      ? (\r\n                          emission.averageCalculations.gdkAverage -\r\n                          emission.averageCalculations.average\r\n                        ).toFixed(valuesPrecision) >=0 ? \"В межах норми\":\r\n                        -(\r\n                          emission.averageCalculations.gdkAverage - \r\n                          emission.averageCalculations.average\r\n                        ).toFixed(valuesPrecision)\r\n                      : emptyState;\r\n\r\n                    const exceedingByMaximum = emission.maximumCalculations.gdkMax\r\n                      ? (\r\n                          emission.maximumCalculations.gdkMax -\r\n                          emission.maximumCalculations.max\r\n                        ).toFixed(valuesPrecision) >=0 ? \"В межах норми\"\r\n                        : \r\n                        -(\r\n                          emission.averageCalculations.gdkMax -\r\n                          emission.averageCalculations.max\r\n                        ).toFixed(valuesPrecision)\r\n                      : emptyState;\r\n\r\n                    return (\r\n                      <tr key={id}>\r\n                        {isAdvanced && isPoint && (\r\n                          <td title={emission.envName}>{emission.envName}</td>\r\n                        )}\r\n                        <td title={emission.element}>{emission.element}</td>\r\n                        <td\r\n                          title={emission.date}\r\n                        >{`${emission.date.day}/${emission.date.month}/${emission.date.year}`}</td>\r\n                        <td title={emission.measure}>{emission.measure}</td>\r\n                        <td title={emission.averageCalculations.average}>\r\n                          {emission.averageCalculations.average.toFixed(\r\n                            valuesPrecision\r\n                          )}\r\n                        </td>\r\n                        <td\r\n                          title={\r\n                            emission.averageCalculations.gdkAverage || emptyState\r\n                          }\r\n                        >\r\n                          {emission.averageCalculations.gdkAverage || emptyState}\r\n                        </td>\r\n                        <td title={exceedingByAverage?exceedingByAverage:emptyState}>{exceedingByAverage}</td>\r\n                        <td title={emission.maximumCalculations.max}>\r\n                          {emission.maximumCalculations.max.toFixed(valuesPrecision)}\r\n                        </td>\r\n                        <td title={emission.maximumCalculations.gdkMax || emptyState}>\r\n                          {emission.maximumCalculations.gdkMax || emptyState}\r\n                        </td>\r\n                        <td title={exceedingByMaximum?exceedingByMaximum: emptyState}>{exceedingByMaximum}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          ) : (\r\n            <h6 className='mt-3 mb-3'>\r\n              Немає інформації про викиди за обраний період\r\n            </h6>\r\n          )}\r\n          <div className='d-flex justify-content-around flex-wrap'>\r\n            {chartAverageData.length > 0 && (\r\n              <Chart title='Графік середніх викидів' data={chartAverageData} />\r\n            )}\r\n            {chartMaxData.length > 0 && (\r\n              <Chart title='Графік максимальних викидів' data={chartMaxData} />\r\n            )}\r\n          </div>\r\n          {emissionCalculations.length > 0 && (\r\n            <>\r\n              <h4 className='mb-3'>\r\n                Оберіть елемент та для відображення викидів за допомогою графіка\r\n              </h4>\r\n              <EmissionLineChart\r\n                emissions={formatEmissionsLineChart(emissionCalculations)}\r\n              />\r\n            </>\r\n          )}\r\n        </Tab>\r\n        {sessionStorage.getItem('user') && (\r\n          <Tab eventKey=\"math\" title=\"Розрахунки\">\r\n            <FormulaCalculationsInfo\r\n              id={id}\r\n            />\r\n          </Tab>\r\n        )}\r\n      </Tabs>\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React, { useEffect , useState} from 'react';\r\nimport { Popup, Marker, LayersControl,LayerGroup } from 'react-leaflet';\r\nimport { divIcon } from 'leaflet/dist/leaflet-src.esm';\r\nimport { Button, Table, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faBalanceScale } from '@fortawesome/free-solid-svg-icons';\r\nimport { EmissionsChartModal } from '../../charts/emissionsChartModal';\r\n\r\nimport '../popup.css';\r\n\r\nconst CheckExceptions = (Name)=>{\r\n  let Exception = \"SAVEDNIPRO_\";\r\n  if(Name.includes(Exception)){\r\n    return \"Пункт аналізу повітря №\" + Name.slice(Exception.length);\r\n  }\r\n  else{\r\n    return Name\r\n  }\r\n}\r\n\r\nconst ReturnLastData = ({ emissions }) => {\r\n  let arr = emissions.slice();\r\n  if (arr.length >= 4) {\r\n    arr = arr.slice(0, 4).reverse();\r\n  }\r\n\r\n  return arr.map(\r\n    ({ short_name, ValueAvg, ValueMax, Year, Month, day, Measure }, key) => (\r\n      <tr key={key}>\r\n        <td title={short_name}>{short_name}</td>\r\n        <td title={ValueAvg}>{ValueAvg}</td>\r\n        <td title={ValueMax}>{ValueMax}</td>\r\n        <td title={Year}>{Year}</td>\r\n        <td title={Month}>{Month}</td>\r\n        <td title={day}>{day}</td>\r\n        <td title={Measure}>{Measure}</td>\r\n      </tr>\r\n    )\r\n  );\r\n};\r\n\r\nconst FindMaxCoif = (emmissionsStats)=>{\r\n\r\n    if (emmissionsStats==null ) {\r\n      return null;\r\n    }\r\n    else if(emmissionsStats.length<1){\r\n      return null;\r\n    }\r\n\r\n    let coif = emmissionsStats.reduce((el,curr)=>el.coif>curr.coif? el: curr);\r\n\r\n    return coif;\r\n}\r\n\r\nconst Point = ({\r\n  id,\r\n  coordinates,\r\n  Name_object,\r\n  description,\r\n  image,\r\n  emissions,\r\n  owner_type,\r\n  handleClick,\r\n  setComaprePointId,\r\n  isPointsNonEditable,\r\n  EnvironmentAttachment,\r\n  emmissionsStats,\r\n  isAdvanced\r\n}) => {\r\n  const [isComapre, setCompare] = useState(false);\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  const [emmissionsStatsInfo, setemmissionsStats] = useState(emmissionsStats);\r\n\r\n  const [chosenemmissionsStats, setchosenemmissionsStats] = useState(null);\r\n\r\n  const ChoosePoint = (id) => {\r\n    setComaprePointId({ id, isComapre });\r\n  };\r\n\r\n  useEffect(()=>{\r\n    setchosenemmissionsStats(FindMaxCoif(emmissionsStatsInfo));\r\n  },[emmissionsStats])\r\n\r\n  return (\r\n    <Marker\r\n      position={coordinates}\r\n      icon={\r\n        divIcon({\r\n          html:`\r\n          <div class=\"leaflet-div-icon-wraper\">\r\n            <img class=\"wraper_icon\" src=\"${image}\" />\r\n            <svg class=\"svg_filler\" viewBox=\"0 0 40 55\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path style=\"fill: ${chosenemmissionsStats?chosenemmissionsStats.color:'grey'}; stroke: rgb(0, 0, 0); paint-order: stroke;\" d=\"M 19.742 52.481 C 19.35 52.248 18.131 52.182 16.788 50.942 C 15.401 49.661 14.267 48.988 13.077 47.734 C 11.293 45.855 10.319 44.263 9.121 42.344 C 5.898 37.183 2.623 32.147 1.758 25.723 C 1.22 21.729 0.502 17.489 1.721 13.391 C 3.248 8.256 6.509 4.389 12.588 2.157 C 13.066 1.982 14.057 1.564 14.609 1.472 C 15.143 1.383 15.752 1.299 16.256 1.151 C 21.974 -0.523 27.779 0.952 34.097 6.63 C 37.688 9.857 39.355 15 39.127 20.994 C 38.933 26.087 39.102 31.087 35.405 36.007 C 37.668 32.5 25.365 54.955 19.716 52.365 C 18.622 51.863 30.639 29.002 29.861 27.599 C 29.864 27.599 30.627 26.058 31.425 23.619 C 32.146 21.415 33.086 17.55 30.789 13.627 C 29.632 11.652 27.689 9.557 25.593 8.408 C 23.982 7.525 22.01 7.32 20.447 7.505 C 18.226 7.768 16.089 8.043 14.533 8.742 C 13.397 9.252 11.812 10.129 10.421 11.136 C 9.579 11.746 9.003 13.211 8.631 14.522 C 8.32 15.616 8.256 16.698 8.122 17.938 C 7.787 21.042 8.564 24.565 10.941 27.718 C 12.408 29.664 15.125 30.955 17.804 31.57 C 21.789 32.485 25.982 31.036 29.742 27.499 C 32.037 25.34 35.748 33.857 35.748 33.857\"/>\r\n            </svg>\r\n          </div>\r\n          `,\r\n        })\r\n      }\r\n    >\r\n      <Popup maxWidth={(window.innerWidth>=991)?\"auto\":window.innerWidth/1.2}>\r\n        <FontAwesomeIcon\r\n          icon={faBalanceScale}\r\n          onClick={() => {\r\n            setCompare(!isComapre);\r\n            ChoosePoint(id);\r\n          }}\r\n          className={\r\n            isComapre ? 'compare-pencil-icon-active' : 'compare-pencil-icon'\r\n          }\r\n        />\r\n        {sessionStorage.getItem('user') && !isPointsNonEditable && (\r\n          <FontAwesomeIcon\r\n            icon={faPencilAlt}\r\n            onClick={() => handleClick(id)}\r\n            className='edit-pencil-icon'\r\n          />\r\n        )}\r\n        <div className='mt-4 mb-2'>\r\n          {Name_object && (\r\n            <div>\r\n              <strong>Назва:</strong> {CheckExceptions(Name_object)}\r\n            </div>\r\n          )}\r\n          {description && (\r\n            <div>\r\n              <strong>Опис:</strong> {description}\r\n            </div>\r\n          )}\r\n          {owner_type && (\r\n            <div>\r\n              <strong>Форма власності:</strong> {owner_type.name}\r\n            </div>\r\n          )}\r\n        </div>\r\n        {emissions.length > 0 && (\r\n          <>\r\n            <div className=\"emissions-container\">\r\n              <Table striped bordered size='sm' className='emissions-table'>\r\n                <thead>\r\n                  <tr>\r\n                    <th title='Хімічний елемент'>Хімічний елемент</th>\r\n                    <th title='Середнє значення'>Середнє значення</th>\r\n                    <th title='Максимальне значення'>Максимальне значення</th>\r\n                    <th title='Рік'>Рік</th>\r\n                    <th title='Місяць'>Місяць</th>\r\n                    <th title='День'>День</th>\r\n                    <th title='Одиниця виміру'>Одиниця виміру</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <ReturnLastData emissions={emissions} />\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n            <>\r\n              <Button \r\n                size='sm' \r\n                onClick={() => setModalShow(true)}>\r\n                Відобразити детальну інформацію\r\n              </Button>\r\n              {(chosenemmissionsStats)? (\r\n                <DropdownButton style={{marginTop: 5}} size='sm' title=\"Оберіть забрудення\">\r\n                  {emmissionsStats.map((el,i)=>{\r\n                    return (\r\n                      <Dropdown.Item \r\n                        key={el.short_name+i}\r\n                        onClick={()=>{\r\n                          setchosenemmissionsStats(el);\r\n                        }}\r\n                      >\r\n                        {el.short_name}\r\n                      </Dropdown.Item>\r\n                    )\r\n                  })}\r\n                </DropdownButton>\r\n              ):(<></>)}\r\n              <EmissionsChartModal\r\n                id={id}\r\n                isPoint={true}\r\n                emissions={emissions}\r\n                show={modalShow}\r\n                EnvironmentAttachment={EnvironmentAttachment}\r\n                onHide={() => setModalShow(false)}\r\n                isAdvanced={isAdvanced}\r\n              />\r\n            </>\r\n          </>\r\n        )}\r\n      </Popup>\r\n    </Marker>\r\n  );\r\n};\r\n\r\nexport const Points = ({\r\n  points,\r\n  setShowPointModal,\r\n  setPointId,\r\n  setIsEditPointMode,\r\n  setComaprePointId,\r\n  isPointsNonEditable,\r\n  uniqueObjectTypes,\r\n  isAdvanced\r\n}) => {\r\n\r\n  const handleClick = (id) => {\r\n    setPointId(id);\r\n    setIsEditPointMode(true);\r\n    setShowPointModal(true);\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      {uniqueObjectTypes.length>0 && (<LayersControl position=\"topleft\">\r\n        {uniqueObjectTypes.map((el,i)=>{\r\n          return(<LayersControl.Overlay key={el.Object_Type_Id} checked name={el.Object_Type_Name}>\r\n            <LayerGroup>\r\n              {points.filter(poi=> poi.Object_Type_Id===el.Object_Type_Id).map(\r\n              ({\r\n                Id: id,\r\n                coordinates,\r\n                Name_object,\r\n                Description: description,\r\n                Image: image,\r\n                emissions,\r\n                owner_type,\r\n                Environments,\r\n                emmissionsStats\r\n              }) => (\r\n                <>\r\n                  <Point\r\n                    id={id}\r\n                    key={id}\r\n                    coordinates={coordinates}\r\n                    Name_object={Name_object}\r\n                    description={description}\r\n                    image={image}\r\n                    emissions={emissions}\r\n                    owner_type={owner_type}\r\n                    handleClick={handleClick}\r\n                    setComaprePointId={setComaprePointId}\r\n                    isPointsNonEditable={isPointsNonEditable}\r\n                    EnvironmentAttachment={Environments}\r\n                    emmissionsStats={emmissionsStats}\r\n                    isAdvanced={isAdvanced}\r\n                  />\r\n                </>\r\n              ))}\r\n            </LayerGroup>\r\n          </LayersControl.Overlay>)\r\n        })}\r\n      </LayersControl>)}\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Popup, Polygon, Marker, Tooltip } from 'react-leaflet';\r\nimport { Button, Table, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faBalanceScale } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { EmissionsChartModal } from '../../charts/emissionsChartModal';\r\n\r\nimport { EnvironmentsInfoContext } from '../../context/environmentsInfoContext';\r\n\r\nimport '../popup.css';\r\n\r\nconst initialState = {\r\n  showEmissionsChartModal: false,\r\n  emissionCalculations: [],\r\n  CorArr: [],\r\n};\r\n\r\n\r\nconst ReturnLastData = ({ emissions }) => {\r\n  let arr = emissions.slice();\r\n  if (arr.length >= 4) {\r\n    arr = arr.slice(0, 4).reverse();\r\n  }\r\n\r\n  return arr.map(\r\n    ({ short_name, ValueAvg, ValueMax, Year, Month, day, Measure }, key) => (\r\n      <tr key={key}>\r\n        <td title={short_name}>{short_name}</td>\r\n        <td title={ValueAvg}>{ValueAvg}</td>\r\n        <td title={ValueMax}>{ValueMax}</td>\r\n        <td title={Year}>{Year}</td>\r\n        <td title={Month}>{Month}</td>\r\n        <td title={day}>{day}</td>\r\n        <td title={Measure}>{Measure}</td>\r\n      </tr>\r\n    )\r\n  );\r\n};\r\n\r\nconst Polygonobj = ({\r\n  poligonId,\r\n  polygonPoints,\r\n  lineThickness,\r\n  brushColorR,\r\n  brushColorG,\r\n  brushColorB,\r\n  emissions,\r\n  name,\r\n  PointsInfo,\r\n  mapMode,\r\n  user_name,\r\n  handleClick,\r\n  setcomparePolygonId,\r\n  isPolyggonsNonEditable,\r\n  EnvironmentAttachment\r\n}) => {\r\n  const [isComapre, setCompare] = React.useState(false);\r\n\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  const [emmissionsStats, setemmissionsStats] = useState([]);\r\n\r\n  const [chosenemmissionsStats, setchosenemmissionsStats] = useState(null);\r\n\r\n  // useEffect(()=>{\r\n  //   if(PointsInfo && PointsInfo.length>0 && emmissionsStats.length <5){\r\n  //     setemmissionsStats(CheckPointsPolygon(PointsInfo,polygonPoints.slice()));\r\n  //   }\r\n  // },[PointsInfo])\r\n\r\n  // useEffect(()=>{\r\n  //   if(!chosenemmissionsStats && emmissionsStats.length>0){\r\n  //     setchosenemmissionsStats(FindMaxCoif(emmissionsStats));\r\n  //   }\r\n  // },[emmissionsStats])\r\n\r\n  useEffect(()=>{\r\n    if (mapMode!='region') {\r\n      setemmissionsStats([]);\r\n      setchosenemmissionsStats(null);\r\n    }\r\n  },[mapMode])\r\n\r\n  const ChoosePolygon = (id) => {\r\n    setcomparePolygonId({ id, isComapre });\r\n  };\r\n\r\n  // const CheckColor = ()=>{\r\n    \r\n  //   if(chosenemmissionsStats && chosenemmissionsStats.color && mapMode=='region' ){\r\n  //     return chosenemmissionsStats.color;\r\n  //   }else if(\r\n  //     !chosenemmissionsStats && \r\n  //     emmissionsStats && \r\n  //     emmissionsStats.length===0 &&\r\n  //     mapMode=='region'\r\n  //   ){\r\n  //     return 'grey';\r\n  //   }\r\n  //   else{\r\n  //     return `rgba(${brushColorR}, ${brushColorG}, ${brushColorB}, 1)`\r\n  //   }\r\n  // }\r\n\r\n  if (polygonPoints && polygonPoints.length>0) {\r\n    return (\r\n      <Polygon\r\n        positions={polygonPoints}\r\n        weight={lineThickness}\r\n        color={`rgba(${brushColorR}, ${brushColorG}, ${brushColorB}, 1)`/*\"grey\"CheckColor()*/}\r\n      >\r\n        <Popup maxWidth={(window.innerWidth>=991)?\"auto\":window.innerWidth/1.2}>\r\n          <FontAwesomeIcon\r\n            icon={faBalanceScale}\r\n            onClick={() => {\r\n              setCompare(!isComapre);\r\n              ChoosePolygon(poligonId);\r\n            }}\r\n            className={\r\n              isComapre ? 'compare-pencil-icon-active' : 'compare-pencil-icon'\r\n            }\r\n          />\r\n          {sessionStorage.getItem('user')&& !isPolyggonsNonEditable && (\r\n            <FontAwesomeIcon\r\n              icon={faPencilAlt}\r\n              onClick={() => handleClick(poligonId)}\r\n              className='edit-pencil-icon'\r\n            />\r\n          )}\r\n          <div className='mt-4 mb-2'>\r\n            {name && (\r\n              <div>\r\n                <strong>Назва:</strong> {name}\r\n              </div>\r\n            )}\r\n            {user_name && (\r\n              <div>\r\n                <strong>Експерт який поставив:</strong> {user_name}\r\n              </div>\r\n            )}\r\n          </div>\r\n          {emissions && emissions.length > 0 && (\r\n            <>\r\n              <div className=\"emissions-container\">\r\n                <Table striped bordered hover size='sm' className='emissions-table'>\r\n                  <thead>\r\n                    <tr>\r\n                      <th title='Хімічний елемент'>Хімічний елемент</th>\r\n                      <th title='Середнє значення'>Середнє значення</th>\r\n                      <th title='Максимальне значення'>Максимальне значення</th>\r\n                      <th title='Рік'>Рік</th>\r\n                      <th title='Місяць'>Місяць</th>\r\n                      <th title='День'>День</th>\r\n                      <th title='Одиниця виміру'>Одиниця виміру</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <ReturnLastData emissions={emissions} />\r\n                  </tbody>\r\n                </Table>\r\n              </div>\r\n              <Button \r\n                size='sm' \r\n                onClick={() => setModalShow(true)}>\r\n                Відобразити графіки викидів\r\n              </Button>\r\n              <EmissionsChartModal\r\n                id={poligonId}\r\n                emissions={emissions}\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n                EnvironmentAttachment={EnvironmentAttachment}\r\n              />\r\n            </>\r\n          )}\r\n          {(chosenemmissionsStats)? (\r\n            <DropdownButton style={{marginTop: 5}} size='sm' title=\"Оберіть забрудення\">\r\n              {emmissionsStats.map((el,i)=>{\r\n                return (\r\n                  <Dropdown.Item \r\n                    key={el.short_name+i}\r\n                    onClick={()=>{\r\n                      setchosenemmissionsStats(el);\r\n                    }}\r\n                  >\r\n                    {el.short_name}\r\n                  </Dropdown.Item>\r\n                )\r\n              })}\r\n            </DropdownButton>\r\n          ):(<></>)}\r\n        </Popup>\r\n      </Polygon>\r\n    );\r\n  }\r\n  else{\r\n    return (<></>);\r\n  }\r\n};\r\n\r\nconst DragPoint = ({\r\n  position,\r\n  DeleteMarker,\r\n  index,\r\n  newPolygonCoordinates,\r\n  setNewPolygonCoordinates,\r\n}) => {\r\n  const markerRef = React.useRef(null);\r\n\r\n  const DragHandler = () => {\r\n    initialState.CorArr = [...newPolygonCoordinates];\r\n    initialState.CorArr[index] = markerRef.current.leafletElement._latlng;\r\n    setNewPolygonCoordinates(initialState.CorArr);\r\n  };\r\n\r\n  return (\r\n    <Marker\r\n      ondrag={DragHandler}\r\n      key={'AddingN' + index}\r\n      draggable={true}\r\n      position={position}\r\n      ref={markerRef}\r\n    >\r\n      <Popup>\r\n        <div>\r\n          <Button\r\n            size='sm'\r\n            onClick={() => {\r\n              DeleteMarker(index);\r\n            }}\r\n          >\r\n            Видалити точку\r\n          </Button>\r\n        </div>\r\n      </Popup>\r\n      <Tooltip> {index + 1} </Tooltip>\r\n    </Marker>\r\n  );\r\n};\r\n\r\nexport const AddingPolygon = ({\r\n  newPolygonCoordinates,\r\n  setNewPolygonCoordinates,\r\n}) => {\r\n  const DeleteMarker = (index) => {\r\n    initialState.CorArr = [...newPolygonCoordinates];\r\n\r\n    initialState.CorArr.splice(\r\n      initialState.CorArr.findIndex((el, i) => i == index),\r\n      1\r\n    );\r\n    setNewPolygonCoordinates(initialState.CorArr);\r\n  };\r\n\r\n  return (\r\n    <Polygon positions={newPolygonCoordinates}>\r\n      {newPolygonCoordinates.map((el, i) => {\r\n        return (\r\n          <DragPoint\r\n            key={i}\r\n            position={el}\r\n            DeleteMarker={DeleteMarker}\r\n            index={i}\r\n            newPolygonCoordinates={newPolygonCoordinates}\r\n            setNewPolygonCoordinates={setNewPolygonCoordinates}\r\n          />\r\n        );\r\n      })}\r\n    </Polygon>\r\n  );\r\n};\r\n\r\nexport const Polygons = ({\r\n  polygons,\r\n  setPolygonId,\r\n  setIsEditPolygonMode,\r\n  setShowPolygonModal,\r\n  PointsInfo,\r\n  mapMode,\r\n  setcomparePolygonId,\r\n  isPolyggonsNonEditable,\r\n}) => {\r\n  const handleClick = (polygonId) => {\r\n    setPolygonId(polygonId);\r\n    setIsEditPolygonMode(true);\r\n    setShowPolygonModal(true);\r\n  };\r\n  \r\n  const { environmentsInfo, setEnvironmentsInfo } = React.useContext(\r\n    EnvironmentsInfoContext\r\n  );\r\n  \r\n  return (\r\n    <>\r\n      {polygons.map(\r\n        (\r\n          {\r\n            poligonId,\r\n            polygonPoints,\r\n            brushColorR,\r\n            brushColorG,\r\n            brushColorB,\r\n            user_name,\r\n            name,\r\n            emissions,\r\n            lineThickness,\r\n            idEnvironment,\r\n            type,\r\n            Environments\r\n          },\r\n          index\r\n        ) => {\r\n          if((idEnvironment === (environmentsInfo.selected ? environmentsInfo.selected.id : -1) || type == \"region\") || Environments){\r\n            return (<Polygonobj\r\n              key={'poligonId' + index}\r\n              poligonId={poligonId}\r\n              polygonPoints={polygonPoints}\r\n              lineThickness={lineThickness}\r\n              brushColorR={brushColorR}\r\n              brushColorG={brushColorG}\r\n              brushColorB={brushColorB}\r\n              emissions={emissions}\r\n              name={name}\r\n              PointsInfo={PointsInfo}\r\n              user_name={user_name}\r\n              handleClick={handleClick}\r\n              mapMode={mapMode}\r\n              setcomparePolygonId={setcomparePolygonId}\r\n              isPolyggonsNonEditable={isPolyggonsNonEditable}\r\n              EnvironmentAttachment={Environments}\r\n            />)\r\n          }\r\n        }\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { DENGEROUS_LVL_ATMOSPHERE, DENGEROUS_LVL_WATER, DENGEROUS_LVL_DEFAULT} from \"./constants\";\r\n\r\nconst DangerClassAtmosphere = {\r\n    1:1.6,\r\n    2:1.3,\r\n    3:1.0,\r\n    4:0.85\r\n}\r\n\r\nconst DefualtResult =   {\r\n    lvl:0,\r\n    min:null,\r\n    max:null,\r\n    color:'grey'\r\n}\r\n\r\nconst getResultLvl = (value,list) =>{\r\n    let obj = list.find(el=> (value>=el.min && value<=el.max))\r\n    if(obj === undefined){\r\n        return [];\r\n    }\r\n\r\n    return obj;\r\n}\r\n\r\nconst countAtmosphere = (arr) =>{\r\n    let resValue=0, avg , grouped;\r\n\r\n    grouped = arr.reduce((acc,elem)=>{\r\n        if(!acc[elem.name]){\r\n            acc[elem.name]=[]\r\n        }\r\n\r\n        acc[elem.name].push(elem);\r\n        return acc;\r\n    },{})\r\n\r\n\r\n    for (const name in grouped) {\r\n        avg=0\r\n        grouped[name].forEach(el => {\r\n            avg+=el.ValueAvg;\r\n        });\r\n        grouped[name] ={\r\n            res: getResultLvl(\r\n                    Math.pow((avg/grouped[name].length)/grouped[name][0].mpc_avrg_d,DangerClassAtmosphere[grouped[name][0].danger_class]),\r\n                    DENGEROUS_LVL_ATMOSPHERE)\r\n        }\r\n        \r\n    }\r\n\r\n    let resArr = [];\r\n\r\n    for (const key in grouped) {\r\n        let obj = resArr.find(el=>el.name==key);\r\n        if(!obj){\r\n            resArr.push(\r\n                {\r\n                    name:key,\r\n                    res:grouped[key]\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return resArr;\r\n\r\n}\r\n\r\nconst countWater = (arr)=>{\r\n    let resValue=0, tmp, grouped;\r\n\r\n    grouped = arr.reduce((acc,elem)=>{\r\n        if(!acc[elem.name]){\r\n            acc[elem.name]=[]\r\n        }\r\n\r\n        acc[elem.name].push(elem);\r\n        return acc;\r\n    },{})\r\n\r\n    for (const key in grouped) {\r\n        tmp=0;\r\n        resValue=0;\r\n        grouped[key].forEach(el=>{\r\n            tmp+=el.ValueAvg/el.mpc_avrg_d;\r\n            if(!isNaN(tmp) && tmp!==Infinity){\r\n                resValue += tmp;\r\n            }\r\n        })\r\n        grouped[key]={\r\n            res: getResultLvl(resValue/grouped[key].length,DENGEROUS_LVL_WATER)\r\n        }\r\n    }\r\n\r\n    let resArr = [];\r\n\r\n    for (const key in grouped) {\r\n        let obj = resArr.find(el=>el.name==key);\r\n        if(!obj){\r\n            resArr.push(\r\n                {\r\n                    name:key,\r\n                    res:grouped[key]\r\n                }\r\n            )\r\n        }\r\n    }\r\n    \r\n    return  resArr;\r\n\r\n}\r\n\r\nconst countElse = (arr)=>{\r\n\r\n    let resValue=0, tmp, grouped;\r\n\r\n    grouped = arr.reduce((acc,elem)=>{\r\n        if(!acc[elem.name]){\r\n            acc[elem.name]=[]\r\n        }\r\n\r\n        acc[elem.name].push(elem);\r\n        return acc;\r\n    },{})\r\n\r\n    for (const key in grouped) {\r\n        tmp=0;\r\n        resValue=0;\r\n        grouped[key].forEach(el=>{\r\n            tmp+=el.ValueAvg/el.mpc_avrg_d;\r\n            if(!isNaN(tmp) && tmp!==Infinity){\r\n                resValue += tmp;\r\n            }\r\n        })\r\n        grouped[key]={\r\n            res: getResultLvl(resValue/grouped[key].length,DENGEROUS_LVL_DEFAULT)\r\n        }\r\n    }\r\n\r\n    let resArr = [];\r\n\r\n    for (const key in grouped) {\r\n        let obj = resArr.find(el=>el.name==key);\r\n        if(!obj){\r\n            resArr.push(\r\n                {\r\n                    name:key,\r\n                    res:grouped[key]\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return  resArr;\r\n}\r\n\r\nconst CountersList = [\r\n    {\r\n        envirnonment:1,\r\n        countFunc: countAtmosphere\r\n    },\r\n    {\r\n        envirnonment:2,\r\n        countFunc: countWater\r\n    },\r\n    {\r\n        envirnonment:3,\r\n        countFunc: countWater\r\n    },\r\n    {\r\n        envirnonment:4,\r\n        countFunc: countElse\r\n    },\r\n    {\r\n        envirnonment:5,\r\n        countFunc: countElse\r\n    },\r\n    {\r\n        envirnonment:6,\r\n        countFunc: countWater\r\n    },\r\n    {\r\n        envirnonment:8,\r\n        countFunc: countElse\r\n    }\r\n]\r\n\r\nexport const CountData = (idEnvironment,arr) =>{\r\n    const res = CountersList.find(el=>el.envirnonment==idEnvironment);\r\n    if(res && arr?.length>0){\r\n        return res.countFunc(arr);\r\n    }\r\n    else{\r\n        return [];\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Table,\r\n  Tabs,\r\n  Tab,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Form,\r\n} from 'react-bootstrap';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  AreaChart,\r\n  Area,\r\n} from 'recharts';\r\nimport { get, post } from '../../utils/httpService';\r\nimport {\r\n  GET_PARAMS_URL,\r\n  GET_MED_STAT_BY_PARAMS,\r\n  GET_MED_STAT_VALUES,\r\n} from '../../utils/constants';\r\n\r\nimport { VerticallyCenteredModal } from '../modals/modal';\r\n\r\nimport SuperTreeView from 'react-super-treeview';\r\n\r\nimport '../charts/emissionsChartModal';\r\nimport './cbStyles.css';\r\n\r\nexport const RegionMedStatModal = ({ regionId, name, onHide, show }) => {\r\n  const modalHeader = `Медична статистика (${name})`;\r\n  const [checkboxes, setCheckboxes] = useState([]);\r\n  const [medStatData, setMedStatData] = useState([]);\r\n  const [result, setResult] = useState([]);\r\n\r\n  useEffect(() => {\r\n    get(GET_PARAMS_URL).then(({ data }) => {\r\n      setCheckboxes(data);\r\n    });\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    post(GET_MED_STAT_BY_PARAMS, {\r\n      regionId: regionId,\r\n      checkboxes: JSON.stringify(checkboxes),\r\n    }).then(({ data }) => {\r\n      setMedStatData(data);\r\n    });\r\n  };\r\n\r\n  const fetchValues = (id) => {\r\n    if (!id) {\r\n      return;\r\n    }\r\n    get(`${GET_MED_STAT_VALUES}?id=${id}`).then(({ data }) => {\r\n      setResult(\r\n        data.concat({\r\n          name_of_formula: 'Значення',\r\n          value: medStatData[id][0]?.value,\r\n          measurement_of_formula: 'кількість осіб',\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <VerticallyCenteredModal\r\n      size='xl'\r\n      show={show}\r\n      onHide={onHide}\r\n      header={modalHeader}\r\n    >\r\n      <Tabs>\r\n        <Tab eventKey='statistics' title='Cтатистика'>\r\n          <Container>\r\n            <Row>\r\n              <Col md={5}>\r\n                <div className='table-content-wrapper'>\r\n                  <Table striped bordered hover>\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Назва задачі</th>\r\n                        <th>Показник</th>\r\n                        <th>Рік розрахунку</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {Object.entries(medStatData).map((item) => {\r\n                        return (\r\n                          <tr id={item[0]} onClick={() => fetchValues(item[0])}>\r\n                            <td title={item[1][0].name}>{item[1][0].name}</td>\r\n                            <td title={item[1][0].name_of_formula}>\r\n                              {item[1][0].name_of_formula}\r\n                            </td>\r\n                            <td title={item[1][0].year}>{item[1][0].year}</td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                    </tbody>\r\n                  </Table>\r\n                </div>\r\n              </Col>\r\n              <Col>\r\n                <Table striped bordered hover>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Назва параметру</th>\r\n                      <th>Значення</th>\r\n                      <th>Одиниці виміру</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {result.map((item) => {\r\n                      return (\r\n                        <tr id={item.nomer}>\r\n                          <td title={item.name_of_formula}>\r\n                            {item.name_of_formula}\r\n                          </td>\r\n                          <td title={item.value}>{item.value}</td>\r\n                          <td title={item.measurement_of_formula}>\r\n                            {item.measurement_of_formula}\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </Col>\r\n              <Col>\r\n                <SuperTreeView\r\n                  data={checkboxes}\r\n                  onUpdateCb={(updatedData) => {\r\n                    setCheckboxes(updatedData);\r\n                  }}\r\n                  isExpandable={(node, depth) => {\r\n                    return depth === 2 ? false : true;\r\n                  }}\r\n                  isDeletable={() => false}\r\n                  onCheckToggleCb={(nodes) => {\r\n                    const checkState = nodes[0].isChecked;\r\n\r\n                    applyCheckStateTo(nodes);\r\n\r\n                    function applyCheckStateTo(nodes) {\r\n                      nodes.forEach((node) => {\r\n                        node.isChecked = checkState;\r\n                        if (node.children) {\r\n                          applyCheckStateTo(node.children);\r\n                        }\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button className='mt-5' onClick={fetchData}>\r\n                  Оновити дані\r\n                </Button>\r\n              </Col>\r\n              <Col md={3}>\r\n                <div className='mb-2'>\r\n                  <b>Фільтрація за роками:</b>\r\n                </div>\r\n                <Form style={{ float: 'left' }}>\r\n                  <Form.Check label='2019' />\r\n\r\n                  <Form.Check label='Поточний рік' />\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Tab>\r\n      </Tabs>\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport { Popup, Polygon } from 'react-leaflet';\r\n\r\nimport { REGIONS_URL } from '../../../utils/constants';\r\nimport { get } from '../../../utils/httpService';\r\nimport { CountData } from '../../../utils/regionsCounter';\r\n\r\nimport { Dropdown, DropdownButton, Button, Table} from 'react-bootstrap';\r\nimport { RegionMedStatModal } from '../../medStat/regionMedStatModal';\r\nimport { EmissionsChartModal } from '../../charts/emissionsChartModal';\r\n\r\nimport { EnvironmentsInfoContext } from '../../context/environmentsInfoContext';\r\n\r\nimport '../popup.css';\r\n\r\nconst ReturnLastData = ({ emissions }) => {\r\n  let arr = emissions.slice();\r\n  if (arr.length >= 4) {\r\n    arr = arr.slice(0, 4).reverse();\r\n  }\r\n\r\n  return arr.map(\r\n    ({ short_name, ValueAvg, ValueMax, Year, Month, day, Measure }, key) => (\r\n      <tr key={key}>\r\n        <td title={short_name}>{short_name}</td>\r\n        <td title={ValueAvg}>{ValueAvg}</td>\r\n        <td title={ValueMax}>{ValueMax}</td>\r\n        <td title={Year}>{Year}</td>\r\n        <td title={Month}>{Month}</td>\r\n        <td title={day}>{day}</td>\r\n        <td title={Measure}>{Measure}</td>\r\n      </tr>\r\n    )\r\n  );\r\n};\r\n\r\nconst Region = ({\r\n  regionId,\r\n  regionPoints,\r\n  lineThickness,\r\n  name,\r\n  emissions,\r\n  idEnvironment,\r\n  AttachedEmmissions,\r\n  user_name,\r\n  EnvironmentAttachment\r\n}) => {\r\n  const [Emmissions, setEmmissions] = useState(AttachedEmmissions);\r\n  const [DetailedModalShow, setDetailedModalShow] = useState(false);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [CountedData, setCountedData] = useState([]);\r\n\r\n  const [chosenData, setChosenData] = useState(null);\r\n  const user = JSON.parse(sessionStorage.getItem('user'));\r\n\r\n  useEffect(() => {\r\n    setEmmissions(AttachedEmmissions);\r\n  }, [AttachedEmmissions]);\r\n\r\n  useEffect(() => {\r\n    if (CountedData?.length > 0) {\r\n      setChosenData(\r\n        CountedData.reduce((el, curr) =>\r\n          el.res.res.lvl > curr.res.res.lvl ? el : curr\r\n        )\r\n      );\r\n    }\r\n  }, [CountedData]);\r\n\r\n  useEffect(() => {\r\n    setCountedData(CountData(idEnvironment, Emmissions));\r\n  }, [Emmissions]);\r\n\r\n  return (\r\n    <Polygon\r\n      positions={regionPoints}\r\n      weight={lineThickness}\r\n      color={chosenData?.res ? chosenData.res.res.color : 'grey'}\r\n      fillOpacity={0.3}\r\n    >\r\n      <Popup\r\n        maxWidth={window.innerWidth >= 991 ? 'auto' : window.innerWidth / 1.2}\r\n      >\r\n        <div className='mt-4 mb-2'>\r\n          {name && (\r\n            <div>\r\n              <strong>Назва:</strong> {name}\r\n            </div>\r\n          )}\r\n          {user_name && (\r\n            <div>\r\n              <strong>Експерт який поставив:</strong> {user_name}\r\n            </div>\r\n          )}\r\n        </div>\r\n        {emissions && emissions.length > 0 && (\r\n            <>\r\n              <div className=\"emissions-container\">\r\n                <Table striped bordered hover size='sm' className='emissions-table'>\r\n                  <thead>\r\n                    <tr>\r\n                      <th title='Хімічний елемент'>Хімічний елемент</th>\r\n                      <th title='Середнє значення'>Середнє значення</th>\r\n                      <th title='Максимальне значення'>Максимальне значення</th>\r\n                      <th title='Рік'>Рік</th>\r\n                      <th title='Місяць'>Місяць</th>\r\n                      <th title='День'>День</th>\r\n                      <th title='Одиниця виміру'>Одиниця виміру</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <ReturnLastData emissions={emissions} />\r\n                  </tbody>\r\n                </Table>\r\n              </div>\r\n              <Button \r\n                size='sm' \r\n                onClick={() => setDetailedModalShow(true)}>\r\n                Відобразити графіки викидів\r\n              </Button>\r\n              <EmissionsChartModal\r\n                id={regionId}\r\n                emissions={emissions}\r\n                show={DetailedModalShow}\r\n                onHide={() => setDetailedModalShow(false)}\r\n                EnvironmentAttachment={EnvironmentAttachment}\r\n              />\r\n            </>\r\n          )}\r\n        {CountedData?.length > 0 && (\r\n          <DropdownButton\r\n            style={{ marginTop: 5 }}\r\n            size='sm'\r\n            title='Оберіть забрудення'\r\n          >\r\n            {CountedData.map((el, i) => {\r\n              return (\r\n                <Dropdown.Item\r\n                  key={el.name + i}\r\n                  onClick={() => {\r\n                    setChosenData(el);\r\n                  }}\r\n                >\r\n                  {el.name}\r\n                </Dropdown.Item>\r\n              );\r\n            })}\r\n          </DropdownButton>\r\n        )}\r\n        <div className='mt-3'>\r\n          {user && user.id_of_expert === 3 && (\r\n            <div>\r\n              <Button size='sm' onClick={() => setModalShow(true)}>\r\n                Медична статистика\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <RegionMedStatModal\r\n          regionId={regionId}\r\n          name={name}\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n        />\r\n      </Popup>\r\n    </Polygon>\r\n  );\r\n};\r\n\r\nconst initilDate = [\r\n  {\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n    key: 'selection',\r\n  },\r\n];\r\n\r\nexport const Regions = ({ regions, setFilteredRegions, ActualRegionDate, AdvancedEnvironments }) => {\r\n  const { environmentsInfo } = useContext(EnvironmentsInfoContext);\r\n\r\n  const idEnvironment = environmentsInfo.selected\r\n    ? environmentsInfo.selected.id\r\n    : null;\r\n\r\n  const [FetchedData, setData] = useState(regions);\r\n\r\n  const fetchRegions = () => {\r\n    get(\r\n      AdvancedEnvironments?.length == undefined ? \r\n      `${REGIONS_URL}?idEnvironment=${idEnvironment}&startDate=${ActualRegionDate[0].startDate.toISOString()}&endDate=${ActualRegionDate[0].endDate.toISOString()}`:\r\n      `${REGIONS_URL}?idEnvironment=${AdvancedEnvironments.join('&idEnvironment=')}&startDate=${ActualRegionDate[0].startDate.toISOString()}&endDate=${ActualRegionDate[0].endDate.toISOString()}`\r\n    )\r\n      .then(({ data }) => {\r\n        setData(data);\r\n        setFilteredRegions(data);\r\n      })\r\n      .catch(() => {\r\n        alert('Помилка завантаження даних,спробуйте знов');\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRegions();\r\n  }, [ActualRegionDate]);\r\n\r\n  return (\r\n    <>\r\n      {FetchedData.map(\r\n        (\r\n          {\r\n            regionId,\r\n            regionPoints,\r\n            user_name,\r\n            name,\r\n            lineThickness,\r\n            AttachedEmmissions,\r\n            emmissions,\r\n          },\r\n          index\r\n        ) => {\r\n          return (\r\n            <Region\r\n              key={'poligonId' + index}\r\n              regionId={regionId}\r\n              idEnvironment={idEnvironment}\r\n              regionPoints={regionPoints}\r\n              lineThickness={lineThickness}\r\n              name={name}\r\n              AttachedEmmissions={AttachedEmmissions}\r\n              emissions={emmissions}\r\n              user_name={user_name}\r\n              EnvironmentAttachment={[]}\r\n            />\r\n          );\r\n        }\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","export const uploadedFileTypes = {\r\n  txt: 'txt',\r\n  xlsx: 'xlsx',\r\n};\r\n\r\nconst excelTypes = {\r\n  acceptString:\r\n    '.csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel',\r\n  extension: uploadedFileTypes.xlsx,\r\n};\r\n\r\nconst txtTypes = {\r\n  acceptString: 'text/plain',\r\n  extension: uploadedFileTypes.txt,\r\n};\r\n\r\nconst txtComparer = (fileExtension, type) =>\r\n  fileExtension.toLowerCase() === uploadedFileTypes.txt.toLowerCase() &&\r\n  txtTypes.acceptString.includes(type);\r\n\r\nconst excelComparer = (fileExtension, type) =>\r\n  fileExtension.toLowerCase() === uploadedFileTypes.xlsx.toLowerCase() &&\r\n  excelTypes.acceptString.includes(type);\r\n\r\nexport const getUploadedFileType = (file) => {\r\n  const { type, name } = file;\r\n\r\n  const fileExtension = name.split('.').slice(-1)[0];\r\n\r\n  if (txtComparer(fileExtension, type)) {\r\n    return uploadedFileTypes.txt;\r\n  }\r\n\r\n  if (excelComparer(fileExtension, type)) {\r\n    return uploadedFileTypes.xlsx;\r\n  }\r\n\r\n  throw new Error('Неправильний тип файлу');\r\n};\r\n","const createDate = (dateString) => {\r\n  const [day, month, year] = dateString.split('.');\r\n\r\n  return new Date(year, month - 1, day);\r\n};\r\n\r\nconst mapPlainText = (text) => {\r\n  return text\r\n    .split('\\n')\r\n    .filter((row) => !!row && row.length)\r\n    .map((row) => {\r\n      const [columnName, ...values] = row.match(/\\S+/gi);\r\n      if (columnName === 'DATE') {\r\n        return [columnName, createDate(values[0])];\r\n      }\r\n      return [columnName, values.join(' ')];\r\n    });\r\n};\r\n\r\nexport const preparedDataPromise = async (plainText) => {\r\n  return mapPlainText(plainText);\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Dropdown, Form, Alert, Spinner } from 'react-bootstrap';\r\n\r\nimport { ELEMENTS_URL, GDK_FIND_URL } from '../../utils/constants';\r\nimport { post, get } from '../../utils/httpService';\r\n\r\nimport './submitForm.css';\r\nimport { useContext } from 'react';\r\nimport { EnvironmentsInfoContext } from '../context/environmentsInfoContext';\r\n\r\nconst now = new Date();\r\nconst year = now.getFullYear();\r\nconst month = ('0' + (now.getMonth() + 1)).slice(-2);\r\nconst day = ('0' + now.getDate()).slice(-2);\r\n\r\nconst initialState = {\r\n  form: {\r\n    date: `${year}-${month}-${day}`,\r\n    valueAvg: 0,\r\n    valueMax: 0,\r\n    gdk: 100000,\r\n    element: {\r\n      code: 0,\r\n      short_name: 'Оберіть елемент',\r\n    },\r\n    measure: '',\r\n  },\r\n};\r\n\r\nexport const SubmitForm = ({ onSave, preloadedEmission, isLoading }) => {\r\n  const { environmentsInfo } = useContext(EnvironmentsInfoContext);\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  const buttonText = isActive ? 'Сховати' : 'Показати більше';\r\n\r\n  const [date, setDate] = useState(initialState.form.date);\r\n  const [valueAvg, setAvgValue] = useState(initialState.form.valueAvg);\r\n  const [gdkAvg, setGdkAvg] = useState(initialState.form.gdk);\r\n  const [valueMax, setMaxValue] = useState(initialState.form.valueMax);\r\n  const [gdkMax, setGdkMax] = useState(initialState.form.gdk);\r\n  const [elements, setElements] = useState([]);\r\n  const [selectedElement, setElement] = useState(initialState.form.element);\r\n  const [measure, setMeasure] = useState(initialState.form.measure);\r\n\r\n  const clearForm = () => {\r\n    setDate(initialState.form.date);\r\n    setAvgValue(initialState.form.valueAvg);\r\n    setGdkAvg(initialState.form.gdk);\r\n    setMaxValue(initialState.form.valueMax);\r\n    setGdkMax(initialState.form.gdk);\r\n    setElement(initialState.form.element);\r\n    setMeasure(initialState.form.measure);\r\n  };\r\n\r\n  const onClick = () => {\r\n    setIsActive(!isActive);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    let emission;\r\n\r\n    if (isActive && date) {\r\n      const [year, month, day] = date.split('-');\r\n\r\n      emission = isActive && {\r\n        valueAvg,\r\n        valueMax,\r\n        year,\r\n        month,\r\n        day,\r\n        idElement: selectedElement.code,\r\n        idEnvironment: environmentsInfo.selected.id,\r\n        measure,\r\n      };\r\n    }\r\n\r\n    onSave(emission);\r\n    clearForm();\r\n    setIsActive(false);\r\n  };\r\n\r\n  const selectElement = (element) => {\r\n    setElement(element);\r\n    setMeasure(element.measure);\r\n\r\n    post(GDK_FIND_URL, {\r\n      code: element.code,\r\n      environment: environmentsInfo.selected.id,\r\n    }).then(({ data }) => {\r\n      if (data.average && data.max) {\r\n        setGdkAvg(data.average);\r\n        setGdkMax(data.max);\r\n      } else {\r\n        setGdkAvg(initialState.form.valueAvg);\r\n        setGdkMax(initialState.form.valueMax);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleDate = (date) => {\r\n    if (new Date(date) > now) {\r\n      setDate(`${year}-${month}-${day}`);\r\n    } else {\r\n      setDate(date);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    get(ELEMENTS_URL).then(({ data }) => setElements(data));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (preloadedEmission) {\r\n      try {\r\n        const {\r\n          date,\r\n          elementName,\r\n          maximumValue,\r\n          averageValue,\r\n        } = preloadedEmission;\r\n\r\n        const formattedDate = `${date.getFullYear()}-${(\r\n          '0' +\r\n          (date.getMonth() + 1)\r\n        ).slice(-2)}-${('0' + date.getDate()).slice(-2)}`;\r\n\r\n        handleDate(formattedDate);\r\n\r\n        const element = elements.find(\r\n          ({ short_name }) => short_name === elementName\r\n        );\r\n\r\n        selectElement(element);\r\n        setAvgValue(+averageValue);\r\n        setMaxValue(+maximumValue);\r\n\r\n        setIsActive(true);\r\n      } catch (error) {\r\n        alert(error.toString());\r\n        console.error(error);\r\n      }\r\n    }\r\n  }, [preloadedEmission]);\r\n\r\n  return (\r\n    <>\r\n      <div className='d-flex justify-content-center'>\r\n        <Button onClick={onClick}>{buttonText}</Button>\r\n      </div>\r\n      {isActive && (\r\n        <>\r\n          <Form.Group>\r\n            <Form.Label>Оберіть дату</Form.Label>\r\n            <Form.Control\r\n              type='date'\r\n              value={date}\r\n              onChange={(e) => handleDate(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Label>Введіть середнє значення</Form.Label>\r\n            <Form.Control\r\n              type='number'\r\n              min='0'\r\n              value={valueAvg}\r\n              onChange={(e) => setAvgValue(+e.target.value)}\r\n            />\r\n          </Form.Group>\r\n          {gdkAvg > 0 && gdkAvg < valueAvg && (\r\n            <Alert variant='danger'>\r\n              Середнє значення перевищує ГДК ({gdkAvg})\r\n            </Alert>\r\n          )}\r\n\r\n          <Form.Group>\r\n            <Form.Label>Введіть максимальне значення</Form.Label>\r\n            <Form.Control\r\n              type='number'\r\n              min='0'\r\n              value={valueMax}\r\n              onChange={(e) => setMaxValue(+e.target.value)}\r\n            />\r\n          </Form.Group>\r\n          {gdkMax > 0 && gdkMax < valueMax && (\r\n            <Alert variant='danger'>\r\n              Максимальне значення перевищує ГДК({gdkMax})\r\n            </Alert>\r\n          )}\r\n\r\n          <Form.Group>\r\n            <Dropdown>\r\n              <Dropdown.Toggle size='sm' variant='success'>\r\n                {selectedElement.short_name}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu className='form-dropdown'>\r\n                {elements.length &&\r\n                  elements.map((element) => (\r\n                    <Dropdown.Item\r\n                      key={element.code}\r\n                      onClick={() => selectElement(element)}\r\n                    >\r\n                      {element.short_name}\r\n                    </Dropdown.Item>\r\n                  ))}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Form.Group>\r\n\r\n          {measure && (\r\n            <Form.Group>\r\n              <Form.Label>Розмірність</Form.Label>\r\n              <Form.Control type='input' disabled value={measure} />\r\n            </Form.Group>\r\n          )}\r\n        </>\r\n      )}\r\n      {isLoading ? (\r\n        <Button\r\n          variant='outline-primary'\r\n          onClick={handleSubmit}\r\n          style={{\r\n            cursor: 'not-allowed',\r\n            pointerEvents: 'all',\r\n          }}\r\n          disabled\r\n        >\r\n          <Spinner\r\n            as='span'\r\n            animation='grow'\r\n            size='sm'\r\n            role='status'\r\n            aria-hidden='true'\r\n          />\r\n          Обробка...\r\n        </Button>\r\n      ) : (\r\n        <Button variant='outline-primary' onClick={handleSubmit}>\r\n          Зберегти\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Dropdown, Form } from 'react-bootstrap';\r\nimport readXlsxFile from 'read-excel-file';\r\n\r\nimport { TYPE_OF_OBJECT_URL, OWNER_TYPES_URL } from '../../utils/constants';\r\nimport { post, get, put } from '../../utils/httpService';\r\nimport { POINT_URL } from '../../utils/constants';\r\nimport { getUploadedFileType, uploadedFileTypes } from '../../utils/getFileType';\r\nimport { preparedDataPromise } from '../../utils/txtFilesService';\r\n\r\nimport { VerticallyCenteredModal } from '../modals/modal';\r\nimport { SubmitForm } from '../submitForm/submitForm';\r\n\r\nimport '../submitForm/submitForm.css';\r\n\r\nconst initialState = {\r\n  form: {\r\n    name: '',\r\n    description: '',\r\n    type: {\r\n      id: 0,\r\n      name: '',\r\n    },\r\n    ownerType: {\r\n      id: 0,\r\n      type: '',\r\n    },\r\n  },\r\n  preloadedEmission: null,\r\n};\r\n\r\nconst emptyState = {\r\n  typeOfObject: `Оберіть тип об'єкту`,\r\n  ownerType: `Оберіть форму власності`,\r\n};\r\n\r\nexport const AddPointModal = ({\r\n  onHide,\r\n  show,\r\n  coordinates,\r\n  setShouldFetchData,\r\n  isEditPointMode,\r\n  setIsEditPointMode,\r\n  pointId,\r\n  setPointId,\r\n  user,\r\n}) => {\r\n  const [name, setName] = useState(initialState.form.name);\r\n  const [description, setDescription] = useState(initialState.form.description);\r\n  const [type, setType] = useState(initialState.form.type);\r\n  const [ownerType, setOwnerType] = useState(initialState.form.ownerType);\r\n  const [types, setTypes] = useState([]);\r\n  const [ownerTypes, setOwnerTypes] = useState([]);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [preloadedEmission, setPreloadedEmission] = useState(\r\n    initialState.preloadedEmission\r\n  );\r\n\r\n  const clearForm = () => {\r\n    setName(initialState.form.name);\r\n    setDescription(initialState.form.description);\r\n    setType(initialState.form.type);\r\n    setOwnerType(initialState.form.ownerType);\r\n    setPreloadedEmission(initialState.preloadedEmission);\r\n    setIsEditPointMode(false);\r\n    setPointId(null);\r\n  };\r\n\r\n  const addPoint = (emission) => {\r\n    setIsLoading(true);\r\n    post(POINT_URL, {\r\n      Name_object: name,\r\n      description,\r\n      type: type.id,\r\n      coordinates,\r\n      emission,\r\n      id_of_user: user.id_of_user,\r\n      owner_type_id: ownerType.id,\r\n    })\r\n      .then(() => {\r\n        clearForm();\r\n        onHide();\r\n        setShouldFetchData(true);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        alert('Помилка при додаванні даних.');\r\n        console.log(error);\r\n        setShouldFetchData(false);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const editPoint = (emission) => {\r\n    setIsLoading(true);\r\n    put(`${POINT_URL}/${pointId}`, {\r\n      Name_object: name,\r\n      description,\r\n      type: type.id,\r\n      owner_type_id: ownerType.id,\r\n      emission,\r\n    })\r\n      .then(() => {\r\n        clearForm();\r\n        onHide();\r\n        setShouldFetchData(true);\r\n        setIsEditPointMode(false);\r\n        setPointId(null);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        alert('Помилка при редагуванні даних.');\r\n        console.log(error);\r\n        setShouldFetchData(false);\r\n        setIsEditPointMode(false);\r\n        setPointId(null);\r\n        setIsEditPointMode(false);\r\n        setPointId(null);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const hide = () => {\r\n    clearForm();\r\n    onHide();\r\n  };\r\n\r\n  useEffect(() => {\r\n    get(TYPE_OF_OBJECT_URL).then(({ data }) => {\r\n      const mappedTypes = data.map(({ Id, Name, Image_Name }) => ({\r\n        id: Id,\r\n        name: Name,\r\n        imageName: Image_Name,\r\n      }));\r\n\r\n      setTypes(mappedTypes);\r\n    });\r\n    get(OWNER_TYPES_URL).then(({ data }) => {\r\n      setOwnerTypes(data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEditPointMode && pointId) {\r\n      get(`${POINT_URL}/${pointId}`).then(({ data }) => {\r\n        const type = types.find(({ id }) => id === data.type);\r\n        const ownerType = ownerTypes.find(\r\n          ({ id }) => id === data.owner_type.id\r\n        );\r\n        if (type) {\r\n          setType(type);\r\n        }\r\n        if (ownerType) {\r\n          setOwnerType(ownerType);\r\n        }\r\n        setName(data.Name_object);\r\n        setDescription(data.description);\r\n      });\r\n    }\r\n  }, [pointId, isEditPointMode]);\r\n\r\n  const fileUpload = async (e) => {\r\n    e.preventDefault();\r\n    if (e.target.files && e.target.files.length) {\r\n      try {\r\n        const type = getUploadedFileType(e.target.files[0]);\r\n        if (type === uploadedFileTypes.txt) {\r\n          const reader = new FileReader();\r\n          reader.onload = async (e) => {\r\n            const mappedResult = await preparedDataPromise(e.target.result);\r\n            setModalFields(mappedResult);\r\n          };\r\n          reader.readAsText(e.target.files[0], 'UTF-8');\r\n        } else if (type === uploadedFileTypes.xlsx) {\r\n          const data = await readXlsxFile(e.target.files[0]);\r\n          setModalFields(data);\r\n        }\r\n      } catch (error) {\r\n        alert('Помилка при обробці вхідних даних');\r\n      }\r\n    }\r\n  };\r\n\r\n  const setModalFields = (rows) => {\r\n    let preloadedEmission = null;\r\n\r\n    const actionsMap = new Map([\r\n      [\r\n        'OBJECT_TYPE',\r\n        (columnValue) => {\r\n          const type = types.find(({ name }) => name === columnValue);\r\n          setType(type);\r\n        },\r\n      ],\r\n      [\r\n        'OWNER_TYPE',\r\n        (columnValue) => {\r\n          const type = ownerTypes.find(({ type }) => type === columnValue);\r\n          setOwnerType(type);\r\n        },\r\n      ],\r\n      ['NAME', (columnValue) => setName(columnValue)],\r\n      ['DESCRIPTION', (columnValue) => setDescription(columnValue)],\r\n      [\r\n        'DATE',\r\n        (columnValue) =>\r\n          (preloadedEmission = { ...preloadedEmission, date: columnValue }),\r\n      ],\r\n      [\r\n        'ELEMENT',\r\n        (columnValue) =>\r\n          (preloadedEmission = {\r\n            ...preloadedEmission,\r\n            elementName: columnValue,\r\n          }),\r\n      ],\r\n      [\r\n        'AVERAGE_VALUE',\r\n        (columnValue) =>\r\n          (preloadedEmission = {\r\n            ...preloadedEmission,\r\n            averageValue: columnValue,\r\n          }),\r\n      ],\r\n      [\r\n        'MAXIMUM_VALUE',\r\n        (columnValue) =>\r\n          (preloadedEmission = {\r\n            ...preloadedEmission,\r\n            maximumValue: columnValue,\r\n          }),\r\n      ],\r\n    ]);\r\n\r\n    try {\r\n      rows.forEach(([columnName, columnValue]) =>\r\n        actionsMap.get(columnName)(columnValue)\r\n      );\r\n\r\n      setPreloadedEmission(preloadedEmission);\r\n    } catch (error) {\r\n      alert('Помилка. Неправильні дані');\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VerticallyCenteredModal\r\n      size='lg'\r\n      show={show}\r\n      onHide={() => hide()}\r\n      header={isEditPointMode ? 'Редагувати маркер' : 'Додати маркер'}\r\n    >\r\n      <Form>\r\n        <Form.Group>\r\n          <div>Загрузити дані із Excel або текстового файла</div>\r\n          <input\r\n            type='file'\r\n            accept='.csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, text/plain'\r\n            onChange={(e) => fileUpload(e)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Dropdown>\r\n            <Dropdown.Toggle size='sm' variant='success'>\r\n              {type.name || emptyState.typeOfObject}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu className='form-dropdown'>\r\n              {types.length &&\r\n                types.map((typeOfObject) => (\r\n                  <Dropdown.Item\r\n                    key={typeOfObject.id}\r\n                    active={typeOfObject === type}\r\n                    onClick={() => setType(typeOfObject)}\r\n                  >\r\n                    {typeOfObject.name}\r\n                  </Dropdown.Item>\r\n                ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Dropdown>\r\n            <Dropdown.Toggle size='sm' variant='success'>\r\n              {ownerType.type || emptyState.ownerType}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              {ownerTypes.length &&\r\n                ownerTypes.map((type) => (\r\n                  <Dropdown.Item\r\n                    key={type.id}\r\n                    active={type === ownerType}\r\n                    onClick={() => setOwnerType(type)}\r\n                  >\r\n                    {type.type}\r\n                  </Dropdown.Item>\r\n                ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Введіть імя</Form.Label>\r\n          <Form.Control\r\n            type='input'\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Введіть опис</Form.Label>\r\n          <Form.Control\r\n            as='textarea'\r\n            rows='3'\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        {isEditPointMode ? (\r\n          <SubmitForm\r\n            onSave={editPoint}\r\n            preloadedEmission={preloadedEmission}\r\n            isLoading={isLoading}\r\n          />\r\n        ) : (\r\n          <SubmitForm\r\n            onSave={addPoint}\r\n            preloadedEmission={preloadedEmission}\r\n            isLoading={isLoading}\r\n          />\r\n        )}\r\n      </Form>\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { SketchPicker } from 'react-color';\r\nimport { Form } from 'react-bootstrap';\r\nimport readXlsxFile from 'read-excel-file';\r\n\r\nimport { post, get, put } from '../../utils/httpService';\r\nimport { POLYGON_URL } from '../../utils/constants';\r\n\r\nimport { VerticallyCenteredModal } from '../modals/modal';\r\nimport { SubmitForm } from '../submitForm/submitForm';\r\nimport { useEffect } from 'react';\r\nimport { extractRGBA } from '../../utils/helpers';\r\nimport { getUploadedFileType, uploadedFileTypes } from '../../utils/getFileType';\r\nimport { preparedDataPromise } from '../../utils/txtFilesService';\r\n\r\nconst initialState = {\r\n  form: {\r\n    brushColor: {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n      a: 1,\r\n    },\r\n    lineThickness: 1,\r\n    name: '',\r\n    type: 'polygon',\r\n    description: '',\r\n  },\r\n  preloadedEmission: null,\r\n};\r\n\r\nexport const AddPolygonModal = ({\r\n  onHide,\r\n  show,\r\n  coordinates,\r\n  setShouldFetchData,\r\n  setNewPolygonCoordinates,\r\n  user,\r\n  isEditPolygonMode,\r\n  setIsEditPolygonMode,\r\n  polygonId,\r\n  setPolygonId,\r\n}) => {\r\n  const [lineThickness, setLineThickness] = useState(\r\n    initialState.form.lineThickness\r\n  );\r\n  const [color, setColor] = useState(initialState.form.brushColor);\r\n  const [name, setName] = useState(initialState.form.name);\r\n  const [description, setDescription] = useState(initialState.form.description);\r\n  const [preloadedEmission, setPreloadedEmission] = useState(\r\n    initialState.preloadedEmission\r\n  );\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const clearForm = () => {\r\n    setLineThickness(initialState.form.lineThickness);\r\n    setColor(initialState.form.brushColor);\r\n    setName(initialState.form.name);\r\n    setDescription(initialState.form.description);\r\n    setPreloadedEmission(initialState.preloadedEmission);\r\n    setIsEditPolygonMode(false);\r\n    setPolygonId(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (polygonId && isEditPolygonMode) {\r\n      get(`${POLYGON_URL}/${polygonId}`).then(({ data }) => {\r\n        setLineThickness(data.line_thickness);\r\n        setColor({\r\n          r: data.brush_color_r,\r\n          g: data.bruch_color_g,\r\n          b: data.brush_color_b,\r\n          a: data.brush_alfa,\r\n        });\r\n        setName(data.name);\r\n        setDescription(data.description);\r\n      });\r\n    }\r\n  }, [polygonId, isEditPolygonMode]);\r\n\r\n  const addPolygon = (emission) => {\r\n    setIsLoading(true);\r\n    post(POLYGON_URL, {\r\n      brush_color_r: color.r,\r\n      bruch_color_g: color.g,\r\n      brush_color_b: color.b,\r\n      brush_alfa: color.a,\r\n      line_collor_r: color.r,\r\n      line_color_g: color.g,\r\n      line_color_b: color.b,\r\n      line_alfa: color.a,\r\n      line_thickness: Number(lineThickness),\r\n      name,\r\n      id_of_user: Number(user.id_of_user),\r\n      type: initialState.form.type,\r\n      description,\r\n      points: coordinates.map((point, index) => ({\r\n        latitude: point.lat,\r\n        longitude: point.lng,\r\n        order123: index + 1,\r\n      })),\r\n      emission,\r\n    })\r\n      .then(() => {\r\n        clearForm();\r\n        onHide();\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(true);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        alert('Помилка при додаванні даних.');\r\n        console.log(error);\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(false);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const editPolygon = (emission) => {\r\n    setIsLoading(true);\r\n    put(`${POLYGON_URL}/${polygonId}`, {\r\n      brush_color_r: color.r,\r\n      bruch_color_g: color.g,\r\n      brush_color_b: color.b,\r\n      brush_alfa: color.a,\r\n      line_collor_r: color.r,\r\n      line_color_g: color.g,\r\n      line_color_b: color.b,\r\n      line_alfa: color.a,\r\n      line_thickness: Number(lineThickness),\r\n      name,\r\n      description,\r\n      emission,\r\n    })\r\n      .then(() => {\r\n        clearForm();\r\n        onHide();\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(true);\r\n        setIsEditPolygonMode(false);\r\n        setPolygonId(null);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        alert('Помилка при редагуванні даних.');\r\n        console.log(error);\r\n        setIsEditPolygonMode(false);\r\n        setPolygonId(null);\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(false);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const hide = () => {\r\n    clearForm();\r\n    onHide();\r\n  };\r\n\r\n  const setModalFields = (rows) => {\r\n    let preloadedEmission = null;\r\n\r\n    const actionsMap = new Map([\r\n      ['LINE_THICKNESS', (columnValue) => setLineThickness(columnValue)],\r\n      ['COLOR', (columnValue) => setColor(extractRGBA(columnValue))],\r\n      ['NAME', (columnValue) => setName(columnValue)],\r\n      ['DESCRIPTION', (columnValue) => setDescription(columnValue)],\r\n      [\r\n        'DATE',\r\n        (columnValue) =>\r\n          (preloadedEmission = { ...preloadedEmission, date: columnValue }),\r\n      ],\r\n      [\r\n        'ELEMENT',\r\n        (columnValue) =>\r\n          (preloadedEmission = {\r\n            ...preloadedEmission,\r\n            elementName: columnValue,\r\n          }),\r\n      ],\r\n      [\r\n        'AVERAGE_VALUE',\r\n        (columnValue) =>\r\n          (preloadedEmission = {\r\n            ...preloadedEmission,\r\n            averageValue: columnValue,\r\n          }),\r\n      ],\r\n      [\r\n        'MAXIMUM_VALUE',\r\n        (columnValue) =>\r\n          (preloadedEmission = {\r\n            ...preloadedEmission,\r\n            maximumValue: columnValue,\r\n          }),\r\n      ],\r\n    ]);\r\n\r\n    try {\r\n      rows.forEach(([columnName, columnValue]) =>\r\n        actionsMap.get(columnName)(columnValue)\r\n      );\r\n\r\n      setPreloadedEmission(preloadedEmission);\r\n    } catch (error) {\r\n      alert('Помилка. Неправильні дані');\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const fileUpload = async (e) => {\r\n    e.preventDefault();\r\n    if (e.target.files && e.target.files.length) {\r\n      try {\r\n        const type = getUploadedFileType(e.target.files[0]);\r\n        if (type === uploadedFileTypes.txt) {\r\n          const reader = new FileReader();\r\n          reader.onload = async (e) => {\r\n            const mappedResult = await preparedDataPromise(e.target.result);\r\n            setModalFields(mappedResult);\r\n          };\r\n          reader.readAsText(e.target.files[0], 'UTF-8');\r\n        } else if (type === uploadedFileTypes.xlsx) {\r\n          const data = await readXlsxFile(e.target.files[0]);\r\n          setModalFields(data);\r\n        }\r\n      } catch (error) {\r\n        alert('Помилка при обробці вхідних даних');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VerticallyCenteredModal\r\n      size='lg'\r\n      show={show}\r\n      onHide={() => hide()}\r\n      header={isEditPolygonMode ? 'Редагувати полігон' : 'Додати полігон'}\r\n    >\r\n      <Form>\r\n        <Form.Group>\r\n          <div>Загрузити дані із Excel або текстового файла</div>\r\n          <input\r\n            type='file'\r\n            accept='.csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel, text/plain'\r\n            onChange={(e) => fileUpload(e)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>Оберіть колір полігона та товщину лінії</Form.Label>\r\n          <Form.Control\r\n            type='number'\r\n            value={lineThickness}\r\n            min={1}\r\n            onChange={(e) => setLineThickness(e.target.value)}\r\n          />\r\n          <br />\r\n          <SketchPicker\r\n            color={color}\r\n            onChangeComplete={({ rgb }) => setColor(rgb)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Введіть ім'я полігону</Form.Label>\r\n          <Form.Control\r\n            type='input'\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Додайте опис полігону</Form.Label>\r\n          <Form.Control\r\n            as='textarea'\r\n            rows='3'\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        {isEditPolygonMode ? (\r\n          <SubmitForm\r\n            onSave={editPolygon}\r\n            preloadedEmission={preloadedEmission}\r\n            isLoading={isLoading}\r\n          />\r\n        ) : (\r\n          <SubmitForm\r\n            onSave={addPolygon}\r\n            preloadedEmission={preloadedEmission}\r\n            isLoading={isLoading}\r\n          />\r\n        )}\r\n      </Form>\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { SketchPicker } from 'react-color';\r\nimport { TUBE_URl } from '../../utils/constants';\r\n\r\nimport { post, get, put } from '../../utils/httpService';\r\n\r\nimport { VerticallyCenteredModal } from '../modals/modal';\r\n\r\nconst initialState = {\r\n  form: {\r\n    brushColor: {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n      a: 1,\r\n    },\r\n    lineThickness: 1,\r\n    name: '',\r\n    type: 'tube',\r\n    description: '',\r\n  },\r\n};\r\n\r\nexport const AddTubeModal = ({\r\n  show,\r\n  onHide,\r\n  coordinates,\r\n  user,\r\n  setShouldFetchData,\r\n  tubeId,\r\n  settubeId,\r\n  isEditTubeMode,\r\n  setisEditTubeMode,\r\n  setnewTubeCordinates,\r\n}) => {\r\n  const [lineThickness, setLineThickness] = useState(\r\n    initialState.form.lineThickness\r\n  );\r\n\r\n  const [color, setColor] = useState(initialState.form.brushColor);\r\n  const [name, setName] = useState(initialState.form.name);\r\n  const [description, setDescription] = useState(initialState.form.description);\r\n\r\n  const hide = () => {\r\n    onHide();\r\n    clearForm();\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setLineThickness(initialState.form.lineThickness);\r\n    setColor(initialState.form.brushColor);\r\n    setName(initialState.form.name);\r\n    setDescription(initialState.form.description);\r\n    setisEditTubeMode(false);\r\n    settubeId(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (tubeId && isEditTubeMode) {\r\n      get(`${TUBE_URl}/${tubeId}`).then(({ data }) => {\r\n        setLineThickness(data.line_thickness);\r\n        setColor({\r\n          r: data.line_collor_r,\r\n          g: data.line_color_g,\r\n          b: data.line_color_b,\r\n          a: data.line_alfa,\r\n        });\r\n        setName(data.name);\r\n        setDescription(data.description);\r\n      });\r\n    }\r\n  }, [tubeId, isEditTubeMode]);\r\n\r\n  const addTube = (emission) => {\r\n    if (lineThickness && name && user && user.id_of_user) {\r\n      post(TUBE_URl, {\r\n        line_collor_r: color.r,\r\n        line_color_g: color.g,\r\n        line_color_b: color.b,\r\n        line_alfa: color.a,\r\n        line_thickness: Number(lineThickness),\r\n        name,\r\n        id_of_user: Number(user.id_of_user),\r\n        type: initialState.form.type,\r\n        description,\r\n        points: coordinates.map((point, index) => ({\r\n          latitude: point.lat,\r\n          longitude: point.lng,\r\n          order123: index + 1,\r\n        })),\r\n      })\r\n        .then(() => {\r\n          hide();\r\n          setShouldFetchData(true);\r\n        })\r\n        .catch((error) => {\r\n          alert('Помилка при додаванні даних.');\r\n          console.log(error);\r\n          setShouldFetchData(false);\r\n        });\r\n    } else {\r\n      alert(\r\n        'Запомніть такі поля:\\n-назва\\n-ширина лінії\\nТа увійдіть в систему'\r\n      );\r\n    }\r\n  };\r\n\r\n  const editTube = (emission) => {\r\n    put(`${TUBE_URl}/${tubeId}`, {\r\n      brush_color_r: color.r,\r\n      bruch_color_g: color.g,\r\n      brush_color_b: color.b,\r\n      brush_alfa: color.a,\r\n      line_collor_r: color.r,\r\n      line_color_g: color.g,\r\n      line_color_b: color.b,\r\n      line_alfa: color.a,\r\n      line_thickness: Number(lineThickness),\r\n      name,\r\n      description,\r\n    })\r\n      .then(() => {\r\n        clearForm();\r\n        onHide();\r\n        setnewTubeCordinates([]);\r\n        setShouldFetchData(true);\r\n        setisEditTubeMode(false);\r\n        settubeId(null);\r\n      })\r\n      .catch((error) => {\r\n        alert('Помилка при редагуванні даних.');\r\n        console.log(error);\r\n        setisEditTubeMode(false);\r\n        settubeId(null);\r\n        setnewTubeCordinates([]);\r\n        setShouldFetchData(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <VerticallyCenteredModal\r\n      size='lg'\r\n      show={show}\r\n      onHide={() => hide()}\r\n      header={!isEditTubeMode ? 'Додати трубу' : 'Редагувати трубу'}\r\n    >\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>Оберіть колір труби та товщину лінії</Form.Label>\r\n          <Form.Control\r\n            type='number'\r\n            value={lineThickness}\r\n            min={1}\r\n            onChange={(e) => setLineThickness(e.target.value)}\r\n          />\r\n          <br />\r\n          <SketchPicker\r\n            color={color}\r\n            onChangeComplete={({ rgb }) => setColor(rgb)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Введіть ім'я труби</Form.Label>\r\n          <Form.Control\r\n            type='input'\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Додайте опис труби</Form.Label>\r\n          <Form.Control\r\n            as='textarea'\r\n            rows='3'\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        {isEditTubeMode ? (\r\n          <Button size={'sm'} onClick={() => editTube()}>\r\n            Редагувати трубу\r\n          </Button>\r\n        ) : (\r\n          <Button size={'sm'} onClick={() => addTube()}>\r\n            Додати трубу\r\n          </Button>\r\n        )}\r\n      </Form>\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { get } from '../../utils/httpService.js';\r\nimport { TASK_URL } from '../../utils/constants.js';\r\n\r\nimport './filtrationByTask.css';\r\n\r\n/*\r\n  initTasks = [\r\n    {\r\n      name:\"\",\r\n      object_arr:[],\r\n    }\r\n  ];\r\n*/\r\n\r\nconst initTitle = \"Список задач\";\r\n\r\nexport const FiltarionByTasks = ({\r\n  filteredPoints,\r\n  setFilteredPoints,\r\n  setFilteredItems,\r\n}) => {\r\n\r\n  const [Title, setTitle] = useState(initTitle)\r\n\r\n  const [Chosen, setChosen] = useState(null);\r\n\r\n  const [Tasks, setAllTasks] = useState([]);\r\n  \r\n  const setTasks = () => {\r\n    get(TASK_URL).then(({data}) => {\r\n      let tempTasks = [];\r\n      data.forEach((el)=>{\r\n        if(!tempTasks.some((elem)=>elem.name === el.name)){\r\n          tempTasks.push({\r\n            name:el.name,\r\n            object_arr: [],\r\n          })\r\n        }\r\n      })\r\n      data.forEach((el)=>{\r\n        let obj = tempTasks.find((elem)=>elem.name === el.name);\r\n        if (obj) {\r\n          obj.object_arr.push(el.id_of_object);\r\n        }\r\n      })\r\n      setAllTasks(tempTasks);\r\n    });\r\n  };\r\n\r\n  const [shouldUpdate, setUpdate] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (Tasks.length===0) {\r\n      setTasks()\r\n    }\r\n  }, []);\r\n\r\n  const DropHandlerClick = (element) => {\r\n    let tempPoints = filteredPoints.filter(el=>{\r\n      if(element.object_arr.some(id=>id === el.Id)){\r\n        return el;\r\n      };\r\n    })\r\n    if (tempPoints.length>0) {\r\n      setFilteredPoints(tempPoints);\r\n      setChosen(element.name);\r\n      setTitle(element.name.length>12? element.name.substring(0, 10)+\"...\":element.name)\r\n      setUpdate(!shouldUpdate);\r\n    }\r\n    else{\r\n      alert(\"По даній задачі нема маркерів\")\r\n    }\r\n\r\n  };\r\n\r\n  const ClearChosenList = () => {\r\n    setFilteredItems({\r\n      isMyObjectsSelectionChecked: false,\r\n      items: [],\r\n    });\r\n    setTitle(initTitle);\r\n    setChosen(null);\r\n    setUpdate(!shouldUpdate);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <b>Оберіть задачу</b>\r\n      <DropdownButton\r\n        onClick={() => {\r\n          setTasks();\r\n          setUpdate(!shouldUpdate);\r\n        }}\r\n        className='drop-tasks'\r\n        title={Title}\r\n      >\r\n        {Tasks.length > 0 && filteredPoints.length > 0 && (\r\n          <>\r\n            {Chosen && (\r\n              <Dropdown.Item\r\n                onClick={() => {\r\n                  ClearChosenList();\r\n                }}\r\n              >\r\n                Відміна\r\n              </Dropdown.Item>\r\n            )}\r\n\r\n            {Tasks.map((el, index) => {\r\n              if(!Chosen){\r\n                return (\r\n                  <Dropdown.Item\r\n                    key={index}\r\n                    active={el.chosen}\r\n                    onClick={() => {\r\n                      DropHandlerClick(el);\r\n                    }}\r\n                  >\r\n                    {el.name}\r\n                  </Dropdown.Item>\r\n                );\r\n              }\r\n              else{\r\n                return (<></>)\r\n              }\r\n            })}\r\n          </>\r\n        )}\r\n        {Tasks.length === 0 || filteredPoints.length === 0 ? (\r\n          <Dropdown.Item>Немає задач</Dropdown.Item>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </DropdownButton>\r\n    </div>\r\n  );\r\n};\r\n","import React,{useEffect} from 'react'\r\n\r\nexport function useOnClickOutside(ref, handler) {\r\n    useEffect(\r\n      () => {\r\n        const listener = event => {\r\n          // Do nothing if clicking ref's element or descendent elements\r\n          if (!ref.current || ref.current.contains(event.target)) {\r\n            return;\r\n          }\r\n  \r\n          handler(event);\r\n        };\r\n  \r\n        document.addEventListener('mousedown', listener);\r\n        document.addEventListener('touchstart', listener);\r\n  \r\n        return () => {\r\n          document.removeEventListener('mousedown', listener);\r\n          document.removeEventListener('touchstart', listener);\r\n        };\r\n      },\r\n      // Add ref and handler to effect dependencies\r\n      // It's worth noting that because passed in handler is a new ...\r\n      // ... function on every render that will cause this effect ...\r\n      // ... callback/cleanup to run every render. It's not a big deal ...\r\n      // ... but to optimize you can wrap handler in useCallback before ...\r\n      // ... passing it into this hook.\r\n      [ref, handler]\r\n    );\r\n  }","import React from \"react\";\r\n\r\nimport './pseudo.css'\r\n\r\nexport const Pseudo = ({setOpened})=>{\r\n    return(\r\n      <div onClick={()=>{setOpened(prev=>!prev)}} className=\"pseudo\"/>\r\n    )\r\n  }","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { get } from '../../utils/httpService';\r\nimport { EXPERTS_URL } from '../../utils/constants';\r\nimport { FiltarionByTasks } from '../filtrations/filtrationByTask';\r\nimport { useOnClickOutside } from '../helperComponents/outsideClick'\r\n\r\nimport './filtration.css';\r\n\r\nimport { Pseudo } from \"../helperComponents/pseudo/pseudo\";\r\n\r\nexport const Filtration = ({\r\n  user,\r\n  filteredPoints,\r\n  setFilteredPoints,\r\n  setFilteredItems,\r\n  environmentsInfo,\r\n  sideLeftFilterOpened,\r\n  setLeftFilterOpened\r\n}) => {\r\n  let filtrationForm;\r\n  const [existingExperts, setExistingExperts] = useState([]);\r\n\r\n  const [environmentState, setenvironmentState] = useState('');\r\n\r\n  const ref = useRef();\r\n  useOnClickOutside(ref,()=>{setLeftFilterOpened(false)});\r\n\r\n\r\n  useEffect(() => {\r\n    get(EXPERTS_URL).then(({ data }) => {\r\n      setExistingExperts(data);\r\n    });\r\n    if (environmentsInfo.selected) {\r\n      setenvironmentState(environmentsInfo.selected.name);\r\n    }\r\n  }, []);\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { expertCheckbox: expertCheckboxes, myCheckbox } = filtrationForm;\r\n    const selectedExperts = Array.from(expertCheckboxes)\r\n      .filter(({ checked }) => checked)\r\n      .map(({ value }) =>\r\n        existingExperts.find(({ id_of_expert }) => +id_of_expert === +value)\r\n      );\r\n\r\n    if (myCheckbox && myCheckbox.checked) {\r\n      setFilteredItems({\r\n        isMyObjectsSelectionChecked: true,\r\n        items: [...selectedExperts, user],\r\n      });\r\n    } else {\r\n      setFilteredItems({\r\n        isMyObjectsSelectionChecked: false,\r\n        items: selectedExperts,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div ref={ref} className={`filtration-form ${sideLeftFilterOpened?'':'transLeft'}`}>\r\n      <div>\r\n        <div>\r\n          <b>Обрана карта:</b>\r\n          <p>{environmentState}</p>\r\n          <hr></hr>\r\n        </div>\r\n        <Form\r\n          onSubmit={submitHandler}\r\n          className='d-flex justify-content-center flex-column'\r\n          ref={(form) => (filtrationForm = form)}\r\n        >\r\n          <Form.Group>\r\n            <Form.Label>\r\n              <b>Оберіть експерта</b>\r\n            </Form.Label>\r\n            {existingExperts.length &&\r\n              existingExperts.map((expert) => (\r\n                <Form.Check\r\n                  label={expert.expert_name}\r\n                  type='checkbox'\r\n                  value={expert.id_of_expert}\r\n                  key={expert.id_of_expert}\r\n                  name='expertCheckbox'\r\n                />\r\n              ))}\r\n            {user && (\r\n              <Form.Check\r\n                label=\"Мої об'єкти\"\r\n                type='checkbox'\r\n                value={user.id_of_user}\r\n                key={user.id_of_user}\r\n                name='myCheckbox'\r\n              />\r\n            )}\r\n          </Form.Group>\r\n\r\n          <Button variant='primary' type='submit' className='text-center'>\r\n            Застосувати\r\n          </Button>\r\n        </Form>\r\n        {user && (\r\n          <FiltarionByTasks\r\n            filteredPoints={filteredPoints}\r\n            setFilteredPoints={setFilteredPoints}\r\n            setFilteredItems={setFilteredItems}\r\n          />\r\n        )}\r\n      </div>\r\n      <Pseudo\r\n        setOpened={setLeftFilterOpened}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Form, DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nconst initTitle = 'Загальні полігони';\r\n\r\nexport const PolygonFiltration = ({ setmapMode, ...props }) => {\r\n  const [title, setTitle] = useState(initTitle);\r\n\r\n  const selectHanler = (title, type) => {\r\n    setTitle(title);\r\n    setmapMode(type);\r\n  };\r\n\r\n  return (\r\n    <Form>\r\n      <Form.Label>Виберіть тип полігонів</Form.Label>\r\n      <DropdownButton title={title}>\r\n        <Dropdown.Item\r\n          eventKey='base'\r\n          onClick={() => {\r\n            selectHanler(initTitle, null);\r\n          }}\r\n        >\r\n          Загальні полігони\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          eventKey='region'\r\n          onClick={() => {\r\n            selectHanler('Області', 'region');\r\n          }}\r\n        >\r\n          Області\r\n        </Dropdown.Item>\r\n        <Dropdown.Item\r\n          eventKey='tubes'\r\n          onClick={() => {\r\n            selectHanler('Трубопровід', 'tubes');\r\n          }}\r\n        >\r\n          Трубопровід\r\n        </Dropdown.Item>\r\n      </DropdownButton>\r\n    </Form>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useRef} from 'react';\r\nimport { Button, Form, Row, Col, Dropdown, FormControl } from 'react-bootstrap';\r\nimport { get } from '../../utils/httpService';\r\nimport { PolygonFiltration } from '../map/polygonFiltration';\r\nimport { useOnClickOutside } from \"../helperComponents/outsideClick\";\r\n\r\nimport './onMapFinder.css';\r\n\r\nimport { Pseudo } from \"../helperComponents/pseudo/pseudo\";\r\nimport axios from 'axios';\r\n\r\nconst initialConst = {\r\n  Cities: null,\r\n};\r\n\r\nget('/getcities').then((data) => {\r\n  initialConst.Cities = data.data;\r\n});\r\n\r\nconst CitiesToogle = React.forwardRef(({ children, onClick }, ref) => (\r\n  <a\r\n    href=''\r\n    ref={ref}\r\n    onClick={(e) => {\r\n      e.preventDefault();\r\n      onClick(e);\r\n    }}\r\n  >\r\n    {children}\r\n    &#x25bc;\r\n  </a>\r\n));\r\n\r\nconst CitiesMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={style}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <FormControl\r\n          autoFocus\r\n          className='my-2 w-75 m-auto'\r\n          placeholder='Type to filter...'\r\n          onChange={(e) => setValue(e.target.value)}\r\n          value={value}\r\n        />\r\n        <ul className='list-unstyled'>\r\n          {React.Children.toArray(children).filter(\r\n            (child) =>\r\n              !value ||\r\n              child.props.children.toLowerCase().startsWith(value) ||\r\n              child.props.children.startsWith(value)\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nconst CityFinder = ({ ViewReposition }) => {\r\n  const [cities, setCities] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setCities(initialConst.Cities);\r\n  }, [initialConst.Cities]);\r\n  return (\r\n    <Form>\r\n      <Form.Label> Введіть назву міста </Form.Label>\r\n      <Dropdown>\r\n        <Dropdown.Toggle as={CitiesToogle} id='dropdown-custom-components'>\r\n          Оберіть місто\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu className='smallCities' as={CitiesMenu}>\r\n          {cities &&\r\n            cities.map((el, i) => {\r\n              return (\r\n                <Dropdown.Item\r\n                  key={i}\r\n                  onClick={() => {\r\n                    ViewReposition(el.lat, el.lon);\r\n                  }}\r\n                >\r\n                  {el.Name}\r\n                </Dropdown.Item>\r\n              );\r\n            })}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst CordFinder = ({ ViewReposition }) => {\r\n  const [lat, setLat] = useState();\r\n  const [lon, setLon] = useState();\r\n\r\n  const [isinv, setisinv] = useState(false);\r\n\r\n  const cordHandler = (e) => {\r\n    if (!isNaN(lat) && !isNaN(lon)) {\r\n      setisinv(false);\r\n      ViewReposition(lat, lon);\r\n    } else {\r\n      setisinv(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form>\r\n      <Form.Label> Введіть кординати </Form.Label>\r\n      <Row \r\n        style={{width:\"100%\",marginLeft:\"0\", marginRight:\"0\"}}\r\n      >\r\n        <Col>\r\n          <Form.Control\r\n            placeholder='Широта'\r\n            className='input-invalid'\r\n            size='sm'\r\n            required\r\n            isInvalid={isinv}\r\n            onChange={(e) => {\r\n              setLat(e.target.value);\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <Form.Control\r\n            placeholder='Довгота'\r\n            className='input-invalid'\r\n            size='sm'\r\n            required\r\n            isInvalid={isinv}\r\n            onChange={(e) => {\r\n              setLon(e.target.value);\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Button size='sm' className='subBTN' onClick={cordHandler}>\r\n          {' '}\r\n          Знайти{' '}\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst AdressFinder = ({ViewReposition})=>{\r\n  \r\n  const [Adress, setAdress] = React.useState('');\r\n\r\n  const [isInv, setIsInv] = React.useState(false);\r\n\r\n  const [TempWarning, setTempWarning] = React.useState(false);\r\n\r\n  const AdreesFinderHandler = ()=>{\r\n\r\n    if (Adress) {\r\n      setIsInv(false);\r\n      axios.get(`https://nominatim.openstreetmap.org/search/?format=json&street=${Adress}&addressdetails=1&limit=1`)\r\n          .then(({data})=>{\r\n            if(data[0]){\r\n              ViewReposition(data[0].lat,data[0].lon,16);\r\n            }\r\n            else{\r\n              setTempWarning(true);\r\n            }\r\n          })\r\n    }\r\n    else{\r\n      setIsInv(true);\r\n    }\r\n  } \r\n\r\n  React.useEffect(()=>{\r\n    if(TempWarning){\r\n      setTimeout(() => {\r\n        setTempWarning(false);\r\n      }, 3000);\r\n    }\r\n  },[TempWarning])\r\n\r\n  return(\r\n    <Form>\r\n      <Form.Label> Введіть адрессу </Form.Label>\r\n      <Form.Control\r\n        placeholder=\"Адресса детально\"\r\n        required\r\n        size=\"sm\"\r\n        isInvalid={isInv}\r\n        onChange={(e) => {\r\n          setAdress(e.target.value);\r\n        }}\r\n      />\r\n      <Form.Label\r\n        className={TempWarning?\"tempWarning\":\"tempWarningOff\"}\r\n      >  \r\n        Адресса не знайдена\r\n      </Form.Label>\r\n      <Button size='sm' className='subBTN' onClick={AdreesFinderHandler}>\r\n        {' '}\r\n        Знайти{' '}\r\n      </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport const FinderOnMap = ({\r\n  ViewReposition, \r\n  setmapMode,\r\n  sideRightFilterOpened,\r\n  setRightFilterOpened\r\n}) => {\r\n  const ref = useRef();\r\n  useOnClickOutside(ref,()=>{setRightFilterOpened(false)});\r\n\r\n  return (\r\n    <div ref={ref} className={`MapFinderForm ${sideRightFilterOpened?'':'transRight'}`}>\r\n      <Pseudo\r\n        setOpened={setRightFilterOpened}\r\n      />\r\n      <div>\r\n        <PolygonFiltration setmapMode={setmapMode} />\r\n        <hr></hr>\r\n        <CityFinder ViewReposition={ViewReposition} />\r\n        <hr></hr>\r\n        <CordFinder ViewReposition={ViewReposition} />\r\n        <hr></hr>\r\n        <AdressFinder ViewReposition={ViewReposition}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { Polyline, Popup, Marker, Tooltip } from 'react-leaflet';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { EmissionsChartModal } from '../../charts/emissionsChartModal';\r\n\r\nimport '../popup.css';\r\n\r\nconst initialState = {\r\n  showEmissionsChartModal: false,\r\n  emissionCalculations: [],\r\n  CorArr: [],\r\n};\r\n\r\nconst ReturnLastData = ({ emissions }) => {\r\n  let arr = emissions.slice();\r\n  if (arr.length >= 4) {\r\n    arr = arr.slice(arr.length - 4, arr.length);\r\n  }\r\n\r\n  return arr.map(\r\n    ({ short_name, ValueAvg, ValueMax, Year, Month, day, Measure }, key) => (\r\n      <tr key={key}>\r\n        <td title={short_name}>{short_name}</td>\r\n        <td title={ValueAvg}>{ValueAvg}</td>\r\n        <td title={ValueMax}>{ValueMax}</td>\r\n        <td title={Year}>{Year}</td>\r\n        <td title={Month}>{Month}</td>\r\n        <td title={day}>{day}</td>\r\n        <td title={Measure}>{Measure}</td>\r\n      </tr>\r\n    )\r\n  );\r\n};\r\n\r\nconst Tube = ({ tube, handleClick }) => {\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  return (\r\n    <Polyline\r\n      positions={[tube.polygonPoints]}\r\n      color={`rgba(${tube.lineCollorR}, ${tube.lineColorG}, ${tube.lineColorB}, 1)`}\r\n      weight={tube.lineThickness}\r\n    >\r\n      <Popup maxWidth='auto'>\r\n        {sessionStorage.getItem('user') && (\r\n          <FontAwesomeIcon\r\n            icon={faPencilAlt}\r\n            onClick={() => handleClick(tube.poligonId)}\r\n            className='edit-pencil-icon'\r\n          />\r\n        )}\r\n        {tube.name && (\r\n          <div>\r\n            <strong>Назва:</strong>\r\n            {tube.name}\r\n          </div>\r\n        )}\r\n        {tube.user_name && (\r\n          <div>\r\n            <strong>Експерт який поставив:</strong>\r\n            {tube.user_name}\r\n          </div>\r\n        )}\r\n        {tube.emissions && tube.emissions.length > 0 && (\r\n          <>\r\n            <Table striped bordered hover size='sm' className='emissions-table'>\r\n              <thead>\r\n                <tr>\r\n                  <th title='Хімічний елемент'>Хімічний елемент</th>\r\n                  <th title='Середнє значення'>Середнє значення</th>\r\n                  <th title='Максимальне значення'>Максимальне значення</th>\r\n                  <th title='Рік'>Рік</th>\r\n                  <th title='Місяць'>Місяць</th>\r\n                  <th title='День'>День</th>\r\n                  <th title='Одиниця виміру'>Одиниця виміру</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <ReturnLastData emissions={tube.emissions} />\r\n              </tbody>\r\n            </Table>\r\n            <Button size='sm' onClick={() => setModalShow(true)}>\r\n              Відобразити графіки викидів\r\n            </Button>\r\n            <EmissionsChartModal\r\n              id={tube.poligonId}\r\n              emissions={tube.emissions}\r\n              show={modalShow}\r\n              onHide={() => setModalShow(false)}\r\n            />\r\n          </>\r\n        )}\r\n      </Popup>\r\n    </Polyline>\r\n  );\r\n};\r\n\r\nexport const Tubes = ({\r\n  tubeArr,\r\n  settubeId,\r\n  setisEditTubeMode,\r\n  setshowTubeModal,\r\n}) => {\r\n  const handleClick = (tubeid) => {\r\n    settubeId(tubeid);\r\n    setisEditTubeMode(true);\r\n    setshowTubeModal(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {tubeArr.map((el) => {\r\n        if (el.polygonPoints) {\r\n          return (\r\n            <Tube key={el.poligonId} tube={el} handleClick={handleClick} />\r\n          );\r\n        }\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nconst DragPoint = ({\r\n  position,\r\n  DeleteMarker,\r\n  index,\r\n  newTubeCordinates,\r\n  setnewTubeCordinates,\r\n}) => {\r\n  const markerRef = React.useRef(null);\r\n\r\n  const DragHandler = () => {\r\n    initialState.CorArr = [...newTubeCordinates];\r\n    initialState.CorArr[index] = markerRef.current.leafletElement._latlng;\r\n    setnewTubeCordinates(initialState.CorArr);\r\n  };\r\n\r\n  return (\r\n    <Marker\r\n      ondrag={DragHandler}\r\n      key={'AddingN' + index}\r\n      draggable={true}\r\n      position={position}\r\n      ref={markerRef}\r\n    >\r\n      <Popup>\r\n        <div>\r\n          <Button\r\n            size='sm'\r\n            onClick={() => {\r\n              DeleteMarker(index);\r\n            }}\r\n          >\r\n            Видалити точку\r\n          </Button>\r\n        </div>\r\n      </Popup>\r\n      <Tooltip> {index + 1} </Tooltip>\r\n    </Marker>\r\n  );\r\n};\r\n\r\nexport const AddingTube = ({ newTubeCordinates, setnewTubeCordinates }) => {\r\n  const DeleteMarker = (index) => {\r\n    initialState.CorArr = [...newTubeCordinates];\r\n\r\n    initialState.CorArr.splice(\r\n      initialState.CorArr.findIndex((el, i) => i === index),\r\n      1\r\n    );\r\n    setnewTubeCordinates(initialState.CorArr);\r\n  };\r\n\r\n  return (\r\n    <Polyline positions={newTubeCordinates}>\r\n      {newTubeCordinates.map((el, i) => {\r\n        return (\r\n          <DragPoint\r\n            key={i}\r\n            position={el}\r\n            DeleteMarker={DeleteMarker}\r\n            index={i}\r\n            newTubeCordinates={newTubeCordinates}\r\n            setnewTubeCordinates={setnewTubeCordinates}\r\n          />\r\n        );\r\n      })}\r\n    </Polyline>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./mapLegend.css\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport const Legend = ({pointData,regionData,pointDesc,regionDesc}) =>{\r\n  const [legendTypes, setLegendTypes] = React.useState(\r\n    [\r\n      {\r\n        text: \"Точки\",\r\n        grades:pointData,\r\n        Description:pointDesc\r\n      },\r\n      {\r\n        text: \"Області\",\r\n        grades:regionData,\r\n        Description:regionDesc\r\n      },\r\n    ]\r\n  )\r\n\r\n  const [chosenType, setChosen] = React.useState(0);\r\n\r\n  return (\r\n    <div \r\n      className=\"info legend\"\r\n    >\r\n      <Button\r\n        style={{marginBottom:4}}\r\n        onClick={()=>{\r\n          setChosen(chosenType===0?1:0)\r\n        }}\r\n      >{legendTypes[chosenType].text}</Button>\r\n      {legendTypes[chosenType]?.Description && (\r\n        <div className=\"borderedDescription\">\r\n          {legendTypes[chosenType].Description}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <i style={{background:\"grey\"}}/> Дані відсутні \r\n      </div>\r\n\r\n      {legendTypes[chosenType].grades.map((el,i)=>{\r\n        return(\r\n          <div>\r\n            <i key={i} style={{background:`${el.color}`}}/>          \r\n            <span>\r\n              {\r\n                (el.min === -Infinity? '0' : el.min) +\r\n                (el.max === Infinity ? \"+\" : \"-\" + el.max)\r\n              }\r\n            </span>\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import React, { createRef, useEffect, useState } from 'react';\r\nimport { Button, Navbar } from 'react-bootstrap';\r\nimport { Map as LeafletMap, TileLayer} from 'react-leaflet';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAlignJustify, faAngleDoubleDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { getDataForLegendRegion,getDataForLegendPoint } from \"../../utils/constants\";\r\n\r\nimport { get } from '../../utils/httpService';\r\nimport {\r\n  POLYGONS_URL,\r\n  POINTS_URL,\r\n  MAP_CENTER_COORDS,\r\n  OPEN_STREET_MAP_URL,\r\n  RECOUNT_POINTS_COIF_URL,\r\n  getLegendDescription\r\n} from '../../utils/constants';\r\nimport { removeObjectDuplicates, removeDuplicates } from '../../utils/helpers';\r\n\r\nimport { Polygons, AddingPolygon } from '../mapObjects/polygons/polygons';\r\nimport { Regions } from \"../mapObjects/regions/regions\";\r\nimport { Points } from '../mapObjects/points/points';\r\nimport { AddPointModal } from '../addComponents/addPointModal';\r\nimport { AddPolygonModal } from '../addComponents/addPolygonModal';\r\nimport { AddTubeModal } from '../addComponents/addTubeModal';\r\nimport { Filtration } from '../filtrations/filtration';\r\nimport { CompareModal } from '../modals/modalCompare';\r\nimport { FinderOnMap } from '../onMapFinder/onMapFinder';\r\nimport { Tubes, AddingTube } from '../mapObjects/tubes/tubes';\r\nimport { VerticallyCenteredModal } from '../modals/modal';\r\nimport { ActualEmmisionDate } from \"../rangePicker/dateRangePicker\";\r\n\r\nimport  { Legend } from \"../helperComponents/mapLegend/mapLegend\";\r\n\r\nimport './map.css';\r\nimport { EnvironmentsInfoContext } from '../context/environmentsInfoContext';\r\nimport { useContext } from 'react';\r\nimport { useRef } from 'react';\r\n\r\nconst initilDate=[\r\n  {\r\n    startDate: new Date(new Date().getFullYear(),new Date().getMonth(),new Date().getDate()),\r\n    endDate:  new Date(new Date().getFullYear(),new Date().getMonth(),new Date().getDate()),\r\n    key: 'selection',\r\n  },\r\n]\r\n\r\nconst initialState = {\r\n  points: [],\r\n  polygons: [\r\n    {\r\n      name: '',\r\n      expertName: '',\r\n      polygonPoints: [],\r\n    },\r\n  ],\r\n  regionPolygons: [\r\n    {\r\n      name: '',\r\n      expertName: '',\r\n      polygonPoints: [],\r\n    },\r\n  ],\r\n  tubes: [\r\n    {\r\n      name: '',\r\n      expertName: '',\r\n      tubePoints: [],\r\n    },\r\n  ],\r\n  filteredPolygons: [],\r\n  filteredRegions:[],\r\n  filteredItems: {\r\n    isMyObjectsSelectionChecked: false,\r\n    items: [],\r\n  },\r\n  uniqueObjectTypes:[],\r\n  filteredPoints: [],\r\n  isAddPointModeEnabled: false,\r\n  isAddPolygonModeEnabled: false,\r\n  isAddTubeMode: false,\r\n  showPointModal: false,\r\n  showPolygonModal: false,\r\n  showTubeModal: false,\r\n  newPointCoordinates: [],\r\n  newPolygonCoordinates: [],\r\n  newTubeCordinates: [],\r\n  shouldFetchData: true,\r\n  isEditPointMode: false,\r\n  pointId: null,\r\n  isEditPolygonMode: false,\r\n  isEditTubeMode: false,\r\n  polygonId: null,\r\n  tubeId: null,\r\n  mapMode: null,\r\n  compareMode: false,\r\n  comparePointsId: [],\r\n  comparePolygonsId: [],\r\n  comaprePointId: {\r\n    id: null,\r\n    isCompare: false,\r\n  },\r\n  comparePolygonId: {\r\n    id: null,\r\n    isCompare: false,\r\n  },\r\n  compareModalForm: false,\r\n  sideLeftFilterOpened: false,\r\n  sideRightFilterOpened: false,\r\n};\r\n\r\nconst buttonText = (geographicalObj, isModeEnabled) =>\r\n  isModeEnabled\r\n    ? `Виключити режим додавання`\r\n    : `Додати ${geographicalObj} на карту`;\r\n\r\nconst comparebuttonText = (geographicalObj, isModeEnabled) =>\r\n  isModeEnabled ? `Виключити обрання маркерів` : `Обрати ${geographicalObj} `;\r\n\r\nexport const MapView = ({ user }) => {\r\n  const [ SettingsShow, SetSettingsShow ] = useState(false);\r\n  \r\n  const [filteredItems, setFilteredItems] = useState(\r\n    initialState.filteredItems\r\n  );\r\n  const [shouldFetchData, setShouldFetchData] = useState(\r\n    initialState.shouldFetchData\r\n  );\r\n\r\n  // points\r\n  const [filteredPoints, setFilteredPoints] = useState(\r\n    initialState.filteredPoints\r\n  );\r\n  const [isAddPointModeEnabled, setAddPointMode] = useState(\r\n    initialState.isAddPointModeEnabled\r\n  );\r\n  const [showPointModal, setShowPointModal] = useState(\r\n    initialState.showPointModal\r\n  );\r\n  const [newPointCoordinates, setNewPointCoordinates] = useState(\r\n    initialState.newPointCoordinates\r\n  );\r\n  const [comparePointsId, setcomparePointsId] = useState(\r\n    initialState.comparePointsId\r\n  );\r\n\r\n  const [comaprePointId, setComaprePointId] = useState(\r\n    initialState.comaprePointId\r\n  );\r\n\r\n  const [ActualPointsDate, SetActualPointsDate ] = useState(initilDate);\r\n\r\n  const [LastDateMode, setLastDateMode ] = useState(false);\r\n\r\n  // polygons\r\n  const [filteredPolygons, setFilteredPolygons] = useState(\r\n    initialState.filteredPolygons\r\n  );\r\n  const [isAddPolygonModeEnabled, setAddPolygonMode] = useState(\r\n    initialState.isAddPolygonModeEnabled\r\n  );\r\n  const [showPolygonModal, setShowPolygonModal] = useState(\r\n    initialState.showPolygonModal\r\n  );\r\n  const [newPolygonCoordinates, setNewPolygonCoordinates] = useState(\r\n    initialState.newPolygonCoordinates\r\n  );\r\n  const [comparePolygonsId, setcomparePolygonsId] = useState(\r\n    initialState.comparePolygonsId\r\n  );\r\n  const [comparePolygonId, setcomparePolygonId] = useState(\r\n    initialState.comparePolygonId\r\n  );\r\n  const [filteredRegions, setFilteredRegions] = useState(\r\n    initialState.filteredRegions\r\n  )\r\n  const [ActualRegionDate, SetActualRegionDate ] = useState(initilDate);\r\n\r\n  const [mapMode, setmapMode] = useState(initialState.mapMode);\r\n\r\n  // tubes\r\n\r\n  const [filteredTubes, setFilteredTubes] = useState(initialState.tubes);\r\n\r\n  const [isAddTubeMode, setisAddTubeMode] = useState(\r\n    initialState.isAddTubeMode\r\n  );\r\n\r\n  const [newTubeCordinates, setnewTubeCordinates] = useState([]);\r\n\r\n  const [showTubeModal, setshowTubeModal] = useState(\r\n    initialState.showTubeModal\r\n  );\r\n\r\n  // type of ownership\r\n\r\n  const [uniqueObjectTypes, setuniqueObjectTypes] = useState(initialState.uniqueObjectTypes);\r\n\r\n  // edit point\r\n  const [isEditPointMode, setIsEditPointMode] = useState(\r\n    initialState.isEditPointMode\r\n  );\r\n  const [pointId, setPointId] = useState(initialState.pointId);\r\n\r\n  //edit polygon\r\n  const [isEditPolygonMode, setIsEditPolygonMode] = useState(\r\n    initialState.isEditPolygonMode\r\n  );\r\n  const [polygonId, setPolygonId] = useState(initialState.polygonId);\r\n\r\n  //edit tube\r\n  const [isEditTubeMode, setisEditTubeMode] = useState(\r\n    initialState.isEditTubeMode\r\n  );\r\n  const [tubeId, settubeId] = useState(initialState.tubeId);\r\n\r\n  //environmentsInfo\r\n  const { environmentsInfo, setEnvironmentsInfo } = useContext(\r\n    EnvironmentsInfoContext\r\n  );\r\n\r\n  //side filtrations\r\n\r\n  const [ sideLeftFilterOpened, setLeftFilterOpened ] = useState(\r\n    initialState.sideLeftFilterOpened\r\n  )\r\n\r\n  const [ sideRightFilterOpened, setRightFilterOpened ] = useState(\r\n    initialState.sideLeftFilterOpened\r\n  )\r\n\r\n  const fetchPoints = () => {\r\n    get(`${POINTS_URL}?idEnvironment=${environmentsInfo.selected.id}`).then(({ data }) => {\r\n        setFilteredPoints(data);\r\n        setuniqueObjectTypes([]);\r\n        setuniqueObjectTypes(\r\n          removeDuplicates(data.map(el=>{\r\n            return {\r\n              Object_Type_Id: el.Object_Type_Id,\r\n              Object_Type_Name: el.Object_Type_Name\r\n            }\r\n          }))\r\n        )\r\n        initialState.points = data;\r\n      });\r\n  }\r\n\r\n  const fetchPolygons = ()=>{\r\n    const idEnvironment = environmentsInfo.selected.id;\r\n\r\n    get(`${POLYGONS_URL}?idEnvironment=${idEnvironment}`).then(({ data }) => {\r\n      let polygons = [], tubes = []\r\n      data.forEach((el, index) => {\r\n        if (el.type === 'tube') {\r\n          tubes.push(el);\r\n        }\r\n      });\r\n\r\n      polygons = data.filter(\r\n        (el) => el.type !== 'region' && el.type !== 'tube'\r\n      );\r\n      setFilteredPolygons(polygons);\r\n      setFilteredTubes(tubes);\r\n    });\r\n  }\r\n\r\n  const fetchData = () => {\r\n    fetchPolygons();\r\n    fetchPoints();\r\n  };\r\n\r\n  const filterByExpert = ({ id_of_expert: idOfExpert }) =>\r\n    filteredItems.items.some(({ id_of_expert }) => idOfExpert === id_of_expert);\r\n\r\n  const filterByUser = ({ id_of_user: idOfUser }) =>\r\n    filteredItems.items.some(({ id_of_user }) => idOfUser === id_of_user);\r\n\r\n\r\n  //environmnt changes effect\r\n  useEffect(() => {\r\n    if (environmentsInfo.environments.length && !environmentsInfo.selected) {\r\n      setEnvironmentsInfo({\r\n        selected: environmentsInfo.environments[0],\r\n        environments: environmentsInfo.environments,\r\n      });\r\n    }\r\n  }, [environmentsInfo.environments]);\r\n\r\n  //data fatch effect\r\n  useEffect(() => {\r\n    if (shouldFetchData && environmentsInfo.selected && LastDateMode) {\r\n      fetchData();\r\n      setShouldFetchData(false);\r\n    }\r\n    else if (shouldFetchData && environmentsInfo.selected && !LastDateMode){\r\n      fetchPolygons();\r\n      setShouldFetchData(false);\r\n    }\r\n  }, [shouldFetchData, environmentsInfo.selected]);\r\n\r\n  useEffect(()=>{\r\n    if(!LastDateMode && environmentsInfo.selected){\r\n      get(`${POINTS_URL}?idEnvironment=${environmentsInfo.selected.id}&startDate=${ActualPointsDate[0].startDate.toISOString()}&endDate=${ActualPointsDate[0].endDate.toISOString()}`).then(({ data }) => {\r\n        setFilteredPoints(data);\r\n        setuniqueObjectTypes([]);\r\n        setuniqueObjectTypes(\r\n          removeDuplicates(data.map(el=>{\r\n            return {\r\n              Object_Type_Id: el.Object_Type_Id,\r\n              Object_Type_Name: el.Object_Type_Name\r\n            }\r\n          }))\r\n        )\r\n        initialState.points = data;\r\n      });\r\n    }\r\n    else if(LastDateMode && environmentsInfo.selected){\r\n      fetchPoints()\r\n    }\r\n  },[ActualPointsDate,LastDateMode,environmentsInfo.selected])\r\n\r\n  //filter effect\r\n  useEffect(() => {\r\n    if (filteredItems.items.length) {\r\n      let filteredPolygons = [];\r\n      let filteredPoints = [];\r\n\r\n      filteredPolygons = initialState.polygons.filter(filterByExpert);\r\n      filteredPoints = initialState.points.filter(filterByExpert);\r\n\r\n      if (filteredItems.isMyObjectsSelectionChecked) {\r\n        const myPolygons = initialState.polygons.filter(filterByUser);\r\n        const myPoints = initialState.points.filter(filterByUser);\r\n\r\n        filteredPolygons = [...filteredPolygons, ...myPolygons];\r\n        filteredPoints = [...filteredPoints, ...myPoints];\r\n      }\r\n\r\n      filteredPoints = removeObjectDuplicates(filteredPoints, 'Id');\r\n      filteredPolygons = removeObjectDuplicates(filteredPolygons, 'polygonId');\r\n\r\n      setFilteredPoints(filteredPoints);\r\n      setFilteredPolygons(filteredPolygons);\r\n    } else {\r\n      setFilteredPoints(initialState.points);\r\n      setFilteredPolygons(initialState.polygons);\r\n    }\r\n  }, [filteredItems]);\r\n\r\n  //side bars effect\r\n  useEffect(()=>{\r\n    if (sideLeftFilterOpened ) {\r\n      setRightFilterOpened(false);\r\n    }\r\n  }, [sideLeftFilterOpened])\r\n\r\n  useEffect(()=>{\r\n    if(sideRightFilterOpened){\r\n      setLeftFilterOpened(false);\r\n    }\r\n  },[sideRightFilterOpened])\r\n  \r\n  //compare points\r\n  useEffect(() => {\r\n    if (comaprePointId.id) {\r\n      let points = ([] = [...comparePointsId]);\r\n      if (\r\n        !comparePointsId.find((id) => id == comaprePointId.id) &&\r\n        !comaprePointId.isCompare\r\n      ) {\r\n        points.push(comaprePointId.id);\r\n      } else {\r\n        points.splice(points.indexOf(comaprePointId.id), 1);\r\n      }\r\n      setcomparePointsId(points);\r\n    }\r\n  }, [comaprePointId]);\r\n\r\n  //compare polygons\r\n  useEffect(() => {\r\n    if (comparePolygonId.id) {\r\n      let polygons = ([] = [...comparePolygonsId]);\r\n      if (\r\n        !comparePolygonsId.find((id) => id == comparePolygonId.id) &&\r\n        !comparePolygonId.isCompare\r\n      ) {\r\n        polygons.push(comparePolygonId.id);\r\n      } else {\r\n        polygons.splice(polygons.indexOf(comparePolygonId.id), 1);\r\n      }\r\n      setcomparePolygonsId(polygons);\r\n    }\r\n  }, [comparePolygonId]);\r\n\r\n  const addGeographicalObjectToMap = ({ latlng: { lat, lng } }) => {\r\n\r\n    if (isAddPointModeEnabled) {\r\n      setNewPointCoordinates([lat, lng]);\r\n      setShowPointModal(true);\r\n      return;\r\n    }\r\n\r\n    if (isAddPolygonModeEnabled) {\r\n      setNewPolygonCoordinates([...newPolygonCoordinates, { lat, lng }]);\r\n    }\r\n\r\n    if (isAddTubeMode) {\r\n      setnewTubeCordinates([...newTubeCordinates, { lat, lng }]);\r\n    }\r\n  };\r\n\r\n  //object creation effects\r\n  useEffect(() => {\r\n    if (!showPolygonModal) {\r\n      setNewPolygonCoordinates([]);\r\n    }\r\n  }, [isAddPolygonModeEnabled, showPolygonModal]);\r\n\r\n  useEffect(() => {\r\n    if (!showTubeModal) {\r\n      setnewTubeCordinates([]);\r\n    }\r\n  }, [isAddTubeMode, showTubeModal]);\r\n\r\n  const MapRef = useRef(null);\r\n\r\n  const ViewReposition = (lat, lon,scale = 11) => {\r\n    MapRef.current.leafletElement.setView({ lat, lon }, scale);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LeafletMap\r\n        center={MAP_CENTER_COORDS}\r\n        zoom={6}\r\n        maxZoom={15}\r\n        attributionControl={true}\r\n        zoomControl={true}\r\n        doubleClickZoom={true}\r\n        scrollWheelZoom={true}\r\n        dragging={true}\r\n        animate={true}\r\n        easeLinearity={0.35}\r\n        ref={MapRef}\r\n        preferCanvas={true}\r\n        onClick={addGeographicalObjectToMap}\r\n      >\r\n        <TileLayer url={OPEN_STREET_MAP_URL} />\r\n        \r\n        <UpButton\r\n            show={SetSettingsShow}\r\n        />\r\n        <VerticallyCenteredModal\r\n            size=\"xl\"\r\n            show={SettingsShow}\r\n            onHide={()=>{SetSettingsShow(false)}}\r\n            header=\"Оберіть проміжок актуальності даних для полігонів\"\r\n        >\r\n          <ActualEmmisionDate\r\n            dateState={ActualRegionDate}\r\n            SetDateState={SetActualRegionDate}\r\n            initilDate={initilDate}\r\n            enabled={true}\r\n          />\r\n      \r\n          <hr></hr>\r\n          <h4>Оберіть проміжок актуальності даних для точок</h4>\r\n          <hr></hr>\r\n          <div style={{display:\"flex\"}}>\r\n            <Button\r\n              style={{marginLeft:'auto',marginRight:'auto',marginBottom:5}}\r\n              onClick={()=>{\r\n                setLastDateMode(!LastDateMode);\r\n              }}\r\n            >\r\n              {LastDateMode?\"Режим останніх даних\":\"Режим для обрання періоду забрудення\"}\r\n            </Button>\r\n          </div>\r\n          {!LastDateMode && \r\n          <ActualEmmisionDate\r\n            enabled={!LastDateMode}\r\n            dateState={ActualPointsDate}\r\n            SetDateState={SetActualPointsDate}\r\n            initilDate={initilDate}\r\n          />}\r\n            \r\n        </VerticallyCenteredModal>\r\n\r\n        {mapMode==null &&\r\n          <Polygons\r\n            polygons={filteredPolygons}\r\n            mapMode={mapMode}\r\n            setPolygonId={setPolygonId}\r\n            setIsEditPolygonMode={setIsEditPolygonMode}\r\n            setShowPolygonModal={setShowPolygonModal}\r\n            setcomparePolygonId={setcomparePolygonId}\r\n          />\r\n        }\r\n\r\n        {mapMode===\"region\" && \r\n          <Regions\r\n            regions={filteredRegions}\r\n            setFilteredRegions={setFilteredRegions}\r\n            ActualRegionDate={ActualRegionDate}\r\n            SetActualRegionDate={SetActualRegionDate}\r\n          />\r\n        }\r\n\r\n        {mapMode===\"tubes\" && \r\n          <Tubes\r\n            tubeArr={filteredTubes}\r\n            settubeId={settubeId}\r\n            setisEditTubeMode={setisEditTubeMode}\r\n            setshowTubeModal={setshowTubeModal}\r\n          />\r\n        }\r\n\r\n        <Points\r\n          points={filteredPoints}\r\n          setPointId={setPointId}\r\n          setIsEditPointMode={setIsEditPointMode}\r\n          setShowPointModal={setShowPointModal}\r\n          setComaprePointId={setComaprePointId}\r\n          uniqueObjectTypes={uniqueObjectTypes}\r\n        />\r\n\r\n        {getDataForLegendPoint(environmentsInfo.selected?environmentsInfo.selected.id:null) && \r\n          <Legend\r\n            regionData = {getDataForLegendRegion(environmentsInfo.selected?environmentsInfo.selected.id:null)}\r\n            regionDesc = {getLegendDescription('region',environmentsInfo.selected?environmentsInfo.selected.id:null)}\r\n            pointData  = {getDataForLegendPoint(environmentsInfo.selected?environmentsInfo.selected.id:null)}\r\n            pointDesc  = {getLegendDescription('points',environmentsInfo.selected?environmentsInfo.selected.id:null)}\r\n          />\r\n        }\r\n\r\n        {newPolygonCoordinates.length > 0 && (\r\n          <AddingPolygon\r\n            newPolygonCoordinates={newPolygonCoordinates}\r\n            setNewPolygonCoordinates={setNewPolygonCoordinates}\r\n          />\r\n        )}\r\n\r\n        {newTubeCordinates.length > 0 && (\r\n          <AddingTube\r\n            newTubeCordinates={newTubeCordinates}\r\n            setnewTubeCordinates={setnewTubeCordinates}\r\n          />\r\n        )}\r\n\r\n      </LeafletMap>\r\n\r\n      <FooterMap>\r\n        <FooterComponents\r\n            user={user}\r\n            setShowPolygonModal={setShowPolygonModal}\r\n            setAddPointMode={setAddPointMode}\r\n            setNewPolygonCoordinates={setNewPolygonCoordinates}\r\n            setAddPolygonMode={setAddPolygonMode}\r\n            setisAddTubeMode={setisAddTubeMode}\r\n            setshowTubeModal={setshowTubeModal}\r\n            setnewTubeCordinates={setnewTubeCordinates}\r\n            newPolygonCoordinates={newPolygonCoordinates}\r\n            newTubeCordinates={newTubeCordinates}\r\n            isAddPointModeEnabled={isAddPointModeEnabled}\r\n            isAddTubeMode={isAddTubeMode}\r\n            isAddPolygonModeEnabled={isAddPolygonModeEnabled}\r\n            comparePointsId={comparePointsId}\r\n            comparePolygonsId={comparePolygonsId}\r\n          />\r\n      </FooterMap>\r\n\r\n      <Filtration\r\n        user={user}\r\n        setFilteredItems={setFilteredItems}\r\n        filteredPoints={filteredPoints}\r\n        setFilteredPoints={setFilteredPoints}\r\n        environmentsInfo={environmentsInfo}\r\n        sideLeftFilterOpened={sideLeftFilterOpened}\r\n        setLeftFilterOpened={setLeftFilterOpened}\r\n      />\r\n\r\n      <FinderOnMap \r\n        ViewReposition={ViewReposition} \r\n        setmapMode={setmapMode}  \r\n        sideRightFilterOpened={sideRightFilterOpened}\r\n        setRightFilterOpened={setRightFilterOpened}\r\n      />\r\n\r\n      <AddPointModal\r\n        show={showPointModal}\r\n        onHide={() => setShowPointModal(false)}\r\n        setShouldFetchData={setShouldFetchData}\r\n        coordinates={newPointCoordinates}\r\n        isEditPointMode={isEditPointMode}\r\n        setIsEditPointMode={setIsEditPointMode}\r\n        pointId={pointId}\r\n        setPointId={setPointId}\r\n        user={user}\r\n      />\r\n      <AddPolygonModal\r\n        show={showPolygonModal}\r\n        onHide={() => setShowPolygonModal(false)}\r\n        setShouldFetchData={setShouldFetchData}\r\n        setNewPolygonCoordinates={setNewPolygonCoordinates}\r\n        coordinates={newPolygonCoordinates}\r\n        user={user}\r\n        isEditPolygonMode={isEditPolygonMode}\r\n        setIsEditPolygonMode={setIsEditPolygonMode}\r\n        polygonId={polygonId}\r\n        setPolygonId={setPolygonId}\r\n      />\r\n      <AddTubeModal\r\n        show={showTubeModal}\r\n        onHide={setshowTubeModal}\r\n        coordinates={newTubeCordinates}\r\n        setnewTubeCordinates={setnewTubeCordinates}\r\n        user={user}\r\n        tubeId={tubeId}\r\n        isEditTubeMode={isEditTubeMode}\r\n        setisEditTubeMode={setisEditTubeMode}\r\n        settubeId={settubeId}\r\n        setShouldFetchData={setShouldFetchData}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst AdpFooterRef = createRef();\r\n\r\nconst AdaptiveFooterComponents = ({children,elmargin, show,setShow})=>{\r\n\r\n  return(\r\n    <div \r\n    ref={AdpFooterRef}\r\n    style={\r\n        {position:'absolute',\r\n        display:'flex',\r\n        flexDirection:\"column\",\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        zIndex: 1002,\r\n        left: 0,\r\n        width:\"100%\",\r\n        bottom: elmargin.height,\r\n        backgroundColor:'#b0e8ef',\r\n        visibility:(show?\"visible\":\"hidden\")\r\n        }}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst myRef = createRef();\r\n\r\nexport const FooterMap = (props)=>{\r\n  //footer Adap\r\n  const [ changeFooter, setChangeFooter ] = useState(window.innerWidth<=991);\r\n\r\n  window.addEventListener('resize', ()=>{\r\n    setChangeFooter(window.innerWidth<=991);\r\n  })\r\n\r\n  const [ height, setHeight ] = useState(myRef.current?(myRef.current).getBoundingClientRect() : 0);\r\n\r\n  const [ showFooterMenu , setFooterMenu] = useState(false);\r\n  \r\n  const handlerFooter = ()=>{\r\n    setHeight(myRef.current?(myRef.current).getBoundingClientRect() : 0);\r\n    setFooterMenu(prev=>!prev);\r\n  }\r\n\r\n  return(\r\n    <div ref={myRef}>\r\n      {!changeFooter && (\r\n        <Navbar expand='lg' className='map-options d-flex'>\r\n          {props.children}\r\n        </Navbar>\r\n      )}\r\n      {changeFooter && (\r\n        <Navbar expand='lg' className='map-options d-flex justify-content-center'>\r\n            <FontAwesomeIcon\r\n              icon={showFooterMenu ? faAngleDoubleDown : faAlignJustify}\r\n              style={{width: 40,height: 30, color: \"grey\"}}\r\n              onClick={()=>{handlerFooter()}}\r\n            />\r\n            <AdaptiveFooterComponents \r\n              elmargin={height}\r\n              show={showFooterMenu}\r\n              setShow={setFooterMenu}\r\n            >\r\n              {props.children}\r\n            </AdaptiveFooterComponents>\r\n        </Navbar>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst FooterComponents = ({user,comparePolygonsId,comparePointsId,isAddPointModeEnabled,isAddPolygonModeEnabled,isAddTubeMode,setShowPolygonModal,setAddPointMode,setNewPolygonCoordinates,setAddPolygonMode,setisAddTubeMode,setshowTubeModal,setnewTubeCordinates,newTubeCordinates,newPolygonCoordinates })=>{\r\n  const isAdaptive = () =>{\r\n    return (window.innerWidth<=991)\r\n  }\r\n\r\n  //compare\r\n  const [isCompareMode, setCompareMode] = useState(initialState.compareMode);\r\n\r\n  const [compareModalForm, setcompareModalForm] = useState(\r\n    initialState.compareModalForm\r\n  );\r\n\r\n  const finishCompare = () => {\r\n    setCompareMode(false);\r\n  };\r\n\r\n  const finishPolygon = () => {\r\n    setAddPolygonMode(false);\r\n\r\n    if (newPolygonCoordinates.length >= 3) {\r\n      setShowPolygonModal(true);\r\n    } else {\r\n      setNewPolygonCoordinates([]);\r\n    }\r\n  };\r\n\r\n  const finishTube = () => {\r\n    setisAddTubeMode(false);\r\n\r\n    if (newTubeCordinates.length >= 2) {\r\n      setshowTubeModal(true);\r\n    } else {\r\n      setnewTubeCordinates([]);\r\n    }\r\n  };\r\n\r\n  return(\r\n    <>\r\n      {/*  Add point button  */}\r\n      {user && (\r\n        <Button\r\n          size='sm'\r\n          variant={\r\n            isAddPointModeEnabled ? 'outline-danger' : 'outline-primary'\r\n          }\r\n          style={{\r\n            marginBottom:'2px',\r\n            marginTop: '2px',\r\n            width:isAdaptive()?\"70%\":'',\r\n            cursor:\r\n              isAddPolygonModeEnabled || isCompareMode || isAddTubeMode\r\n                ? 'not-allowed'\r\n                : 'pointer',\r\n            pointerEvents:\r\n              isAddPolygonModeEnabled || isCompareMode || isAddTubeMode\r\n                ? 'all'\r\n                : 'auto',\r\n          }}\r\n          disabled={isAddPolygonModeEnabled || isCompareMode || isAddTubeMode}\r\n          onClick={() => setAddPointMode(!isAddPointModeEnabled)}\r\n          className='ml-3'\r\n        >\r\n          {buttonText('маркер', isAddPointModeEnabled)}\r\n        </Button>\r\n      )}\r\n\r\n      {/* Add plygon button  */}\r\n      {user && (\r\n        <Button\r\n          className='ml-3'\r\n          size='sm'\r\n          variant={\r\n            isAddPolygonModeEnabled ? 'outline-danger' : 'outline-primary'\r\n          }\r\n          style={{\r\n            width:isAdaptive()?\"70%\":'',\r\n            marginBottom:'2px',\r\n            marginTop: '2px',\r\n            cursor:\r\n              isAddPointModeEnabled || isCompareMode || isAddTubeMode\r\n                ? 'not-allowed'\r\n                : 'pointer',\r\n            pointerEvents:\r\n              isAddPointModeEnabled || isCompareMode || isAddTubeMode\r\n                ? 'all'\r\n                : 'auto',\r\n          }}\r\n          disabled={isAddPointModeEnabled || isCompareMode || isAddTubeMode}\r\n          onClick={() => setAddPolygonMode(!isAddPolygonModeEnabled)}\r\n        >\r\n          {buttonText('полігон', isAddPolygonModeEnabled)}\r\n        </Button>\r\n      )}\r\n\r\n      {isAddPolygonModeEnabled && (\r\n        <Button\r\n          style={{\r\n            width:isAdaptive()?\"70%\":'',\r\n            marginBottom:'2px',\r\n            marginTop: '2px',\r\n          }}\r\n          className='ml-3'\r\n          size='sm'\r\n          variant='outline-success'\r\n          onClick={finishPolygon}\r\n        >\r\n          Закінчити полігон\r\n        </Button>\r\n      )}\r\n\r\n      {/* Add tube button  */}\r\n      {user && (\r\n        <Button\r\n          className='ml-3'\r\n          size='sm'\r\n          variant={isAddTubeMode ? 'outline-danger' : 'outline-primary'}\r\n          style={{\r\n            width:isAdaptive()?\"70%\":'',\r\n            marginBottom:'2px',\r\n            marginTop: '2px',\r\n            cursor:\r\n              isAddPointModeEnabled ||\r\n              isCompareMode ||\r\n              isAddPolygonModeEnabled\r\n                ? 'not-allowed'\r\n                : 'pointer',\r\n            pointerEvents:\r\n              isAddPointModeEnabled ||\r\n              isCompareMode ||\r\n              isAddPolygonModeEnabled\r\n                ? 'all'\r\n                : 'auto',\r\n          }}\r\n          disabled={\r\n            isAddPointModeEnabled || isCompareMode || isAddPolygonModeEnabled\r\n          }\r\n          onClick={() => setisAddTubeMode(!isAddTubeMode)}\r\n        >\r\n          {buttonText('трубу', isAddTubeMode)}\r\n        </Button>\r\n      )}\r\n\r\n      {isAddTubeMode && (\r\n        <Button\r\n          style={{\r\n            width:isAdaptive()?\"70%\":'',\r\n            marginBottom:'2px',\r\n            marginTop: '2px',\r\n          }}\r\n          className='ml-3'\r\n          size='sm'\r\n          variant='outline-success'\r\n          onClick={finishTube}\r\n        >\r\n          Закінчити трубу\r\n        </Button>\r\n      )}\r\n\r\n     {isCompareMode && (\r\n        <Button\r\n          style={{\r\n            width:isAdaptive()?\"70%\":'',\r\n            marginBottom:'2px',\r\n            marginTop: '2px',\r\n          }}\r\n          className='ml-3'\r\n          size='sm'\r\n          variant='outline-success'\r\n          onClick={finishCompare}\r\n        >\r\n          Порівняти точки\r\n        </Button>\r\n      )}\r\n\r\n      {/*  Compare some  */}\r\n      <Button\r\n        className='ml-3'\r\n        size='sm'\r\n        variant={'outline-primary'}\r\n        style={{\r\n          width:isAdaptive()?\"70%\":'',\r\n          marginBottom:'2px',\r\n          marginTop: '2px',\r\n          cursor:\r\n            isAddPolygonModeEnabled ||\r\n            isAddPointModeEnabled ||\r\n            isCompareMode ||\r\n            isAddTubeMode\r\n              ? 'not-allowed'\r\n              : 'pointer',\r\n          pointerEvents:\r\n            isAddPolygonModeEnabled ||\r\n            isAddPointModeEnabled ||\r\n            isCompareMode ||\r\n            isAddTubeMode\r\n              ? 'all'\r\n              : 'auto',\r\n        }}\r\n        disabled={\r\n          isAddPolygonModeEnabled ||\r\n          isAddPointModeEnabled ||\r\n          isCompareMode ||\r\n          isAddTubeMode\r\n        }\r\n        onClick={() => setcompareModalForm(true)}\r\n      >\r\n        Результати порівняння\r\n      </Button>\r\n\r\n      <CompareModal\r\n        style={{\r\n          width:isAdaptive()?\"70%\":'',\r\n          marginBottom:'2px',\r\n          marginTop: '2px',\r\n        }}\r\n        points={comparePointsId}\r\n        polygons={comparePolygonsId}\r\n        show={compareModalForm}\r\n        onHide={() => setcompareModalForm(false)}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst UpButton = ({show})=>{\r\n  return(\r\n      <div \r\n          className=\"upsideButton\"\r\n          onClick={()=>{\r\n              show(true);\r\n          }}\r\n      />\r\n  )\r\n}\r\n","import React, { useEffect, useState, useContext} from 'react';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport { Button, Form, Spinner} from \"react-bootstrap\";\r\nimport { CompareModal } from '../modals/modalCompare';\r\n\r\nimport { VerticallyCenteredModal } from \"../modals/modal\";\r\nimport { ActualEmmisionDate } from \"../rangePicker/dateRangePicker\";\r\nimport { Points } from \"../mapObjects/points/points\";\r\nimport { Polygons } from \"../mapObjects/polygons/polygons\";\r\nimport { Regions } from \"../mapObjects/regions/regions\";\r\nimport { EnvironmentsInfoContext } from '../context/environmentsInfoContext';\r\n\r\nimport { FooterMap } from \"../map/map\";\r\n\r\nimport { get } from '../../utils/httpService';\r\nimport {\r\n    ADVANCED_POLYGONS_URL,\r\n    MAP_CENTER_COORDS,\r\n    OPEN_STREET_MAP_URL,\r\n    EXPERTS_URL,\r\n    GET_POSSIBLE_ISSUES,\r\n    ADVANCED_POINTS_URL,\r\n  } from '../../utils/constants';\r\nimport { formParamsForGetCheckbox as formQuery, removeDuplicates } from \"../../utils/helpers\";\r\nimport \"./advancedmap.css\";\r\nimport '../radiowidget/radiowidget.css';\r\n\r\nconst initilDate=[\r\n    {\r\n      startDate: new Date(new Date().getFullYear(),new Date().getMonth(),new Date().getDate()),\r\n      endDate:  new Date(new Date().getFullYear(),new Date().getMonth(),new Date().getDate()),\r\n      key: 'selection',\r\n    },\r\n  ]\r\n\r\nexport const AdvancedMap = ({ user }) => {\r\n\r\n    const [ SettingsShow, SetSettingsShow ] = useState(true);\r\n\r\n    const [ showWarning, setShowWarning ] = useState(false);\r\n\r\n    const [LoadedPoints, setPoints] = useState([]);\r\n    const [LoadedPolygons, setPolygons] = useState([]); \r\n\r\n    const [isEditPointMode, setIsEditPointMode] = useState(false);\r\n    const [pointId, setPointId] = useState(null);\r\n    const [showPointModal, setShowPointModal] = useState(false);\r\n\r\n    const [isEditPolygonMode, setIsEditPolygonMode] = useState(false);\r\n    const [polygonId, setPolygonId] = useState(null);\r\n    const [showPolygonModal, setShowPolygonModal] = useState(false);\r\n  \r\n    const [comparePointsId, setcomparePointsId] = useState([]);\r\n    const [comaprePointId, setComaprePointId] = useState({\r\n        id: null,\r\n        isCompare: false,\r\n    })\r\n    const [comparePolygonsId, setcomparePolygonsId] = useState([]);\r\n    const [comparePolygonId, setcomparePolygonId] = useState({\r\n        id: null,\r\n        isCompare: false,\r\n      });\r\n\r\n    const [chosenEnvironments, setEnvironments ] = useState([]);\r\n    const [chosenObjects, setChosenObjects ] = useState(null);\r\n\r\n    const [uniqueObjectTypes, setuniqueObjectTypes] = useState([]);\r\n\r\n    const [filteredRegions, setFilteredRegions] = useState([]);\r\n\r\n    const [ActualRegionDate, SetActualRegionDate ] = useState(initilDate);\r\n\r\n    const submitForm = () => {\r\n        let form = document.forms.advancedForm;\r\n        let chosenEnvironment = Array.from(form.elements.environmentCheckbox).filter(({checked})=> checked);\r\n        return (chosenEnvironment.length!=0 || form.elements[`environmentAllCheckbox`].checked);\r\n    }\r\n\r\n    const submitHandler = (e)=>{\r\n        e.preventDefault();\r\n        if(submitForm()){\r\n            let form = document.forms.advancedForm;\r\n            let chosenEnvironment = Array.from(form.elements.environmentCheckbox).filter(({checked})=> checked);\r\n            let chosenExperts = Array.from(form.elements.expertCheckbox).filter(({checked})=> checked);\r\n            let chosenObjects = Array.from(form.elements.objectCheckbox).filter(({checked})=> checked)?.map(el=>el.value);\r\n            let choshenIssue = form.elements.issueCheckbox?Array.from(form.elements.issueCheckbox.length>0?form.elements.issueCheckbox:[form.elements.issueCheckbox]).filter(({checked})=> checked):[];\r\n            let query= (chosenEnvironment.length===0 && chosenExperts.length===0 && choshenIssue.length===0)?'':'?';\r\n\r\n            if (query.length>0) {\r\n                let expQuer = formQuery(chosenExperts,'experts');\r\n                let envQuer = formQuery(chosenEnvironment,'env');\r\n                let issueQuer =formQuery(choshenIssue,'issue');\r\n                query+= expQuer;\r\n                query+= (expQuer && envQuer)?'&'+envQuer:envQuer;\r\n                query+= ((expQuer||envQuer)&& issueQuer)?'&'+issueQuer:issueQuer;\r\n            }\r\n\r\n            let PromiseArr = [];\r\n\r\n            if(chosenObjects.find(el=>el==\"points\")  || chosenObjects?.length==0 ){\r\n                PromiseArr.push(get(ADVANCED_POINTS_URL+query));\r\n            }\r\n            else{\r\n                PromiseArr.push(new Promise((resolve,rejcet)=>{resolve()}))\r\n            }\r\n\r\n            if(chosenObjects.find(el=>el==\"polygon\") || chosenObjects?.length==0  ){\r\n                PromiseArr.push(get(ADVANCED_POLYGONS_URL+query));\r\n            }\r\n            else{\r\n                PromiseArr.push(new Promise((resolve,rejcet)=>{resolve()}))\r\n            }\r\n\r\n            Promise.all([...[...PromiseArr]]).then((res)=>{\r\n                if (res[0]?.data) {//[0] points \r\n                    setPoints(res[0].data);\r\n                    setuniqueObjectTypes(\r\n                        removeDuplicates(res[0].data.map(el=>{\r\n                          return {\r\n                            Object_Type_Id: el.Object_Type_Id,\r\n                            Object_Type_Name: el.Object_Type_Name\r\n                          }\r\n                        }))\r\n                    )\r\n                }\r\n                else{\r\n                    setPoints([]);\r\n                    setuniqueObjectTypes([]);\r\n                }\r\n                if(res[1]?.data){\r\n                    setPolygons(res[1].data); //[1] polygons\r\n                }\r\n                else{\r\n                    setPolygons([]);\r\n                }\r\n                SetSettingsShow(false);\r\n            })\r\n            setEnvironments(chosenEnvironment.map(el=>{\r\n                return el.value;\r\n            }));\r\n            setChosenObjects(chosenObjects);\r\n        }\r\n        else{\r\n            setShowWarning(true);\r\n        }\r\n    }\r\n\r\n    //compare points\r\n    useEffect(() => {\r\n        if (comaprePointId.id) {\r\n        let points = ([] = [...comparePointsId]);\r\n        if (\r\n            !comparePointsId.find((id) => id == comaprePointId.id) &&\r\n            !comaprePointId.isCompare\r\n        ) {\r\n            points.push(comaprePointId.id);\r\n        } else {\r\n            points.splice(points.indexOf(comaprePointId.id), 1);\r\n        }\r\n        setcomparePointsId(points);\r\n        }\r\n    }, [comaprePointId]);\r\n\r\n    //compare polygons\r\n    useEffect(() => {\r\n        if (comparePolygonId.id) {\r\n            let polygons = ([] = [...comparePolygonsId]);\r\n        if (\r\n            !comparePolygonsId.find((id) => id == comparePolygonId.id) &&\r\n            !comparePolygonId.isCompare\r\n        ) {\r\n            polygons.push(comparePolygonId.id);\r\n        } else {\r\n            polygons.splice(polygons.indexOf(comparePolygonId.id), 1);\r\n        }\r\n            setcomparePolygonsId(polygons);\r\n        }\r\n    }, [comparePolygonId]);\r\n\r\n    return(\r\n        <>\r\n            <LeafletMap\r\n                center={MAP_CENTER_COORDS}\r\n                zoom={6}\r\n                maxZoom={15}\r\n                attributionControl={true}\r\n                zoomControl={true}\r\n                doubleClickZoom={true}\r\n                scrollWheelZoom={true}\r\n                dragging={true}\r\n                animate={true}\r\n                easeLinearity={0.35}\r\n            >\r\n                {LoadedPoints.length===0 && Polygons.length===0 && (\r\n                    <div className=\"BlackMapWarning\">\r\n                        <Button onClick={()=>{SetSettingsShow(true)}}>Будь ласка оберіть параметри фільтрації в меню вище </Button>\r\n                    </div>\r\n                )}\r\n                <TileLayer url={OPEN_STREET_MAP_URL} />\r\n                \r\n                {(chosenObjects?.find(el=>el=='points') || chosenObjects?.length==0) && \r\n                    <Points\r\n                        points={LoadedPoints}\r\n                        setPointId={setPointId}\r\n                        setIsEditPointMode={setIsEditPointMode}\r\n                        setShowPointModal={setShowPointModal}\r\n                        setComaprePointId={setComaprePointId}\r\n                        uniqueObjectTypes={uniqueObjectTypes}\r\n                        isPointsNonEditable={true}\r\n                        isAdvanced={true}\r\n                    />\r\n                }\r\n\r\n                {(chosenObjects?.find(el=>el=='polygon') || chosenObjects?.length==0) &&\r\n                    <Polygons\r\n                        polygons={LoadedPolygons}\r\n                        setPolygonId={setPolygonId}\r\n                        setIsEditPolygonMode={setIsEditPolygonMode}\r\n                        setShowPolygonModal={setShowPolygonModal}\r\n                        setcomparePolygonId={setcomparePolygonId}\r\n                        isPolyggonsNonEditable={true}\r\n                        isSpecial={true}\r\n                    />\r\n                }\r\n\r\n                {(chosenObjects?.find(el=>el=='region') || chosenObjects?.length==0) && \r\n                    <Regions\r\n                        regions={filteredRegions}\r\n                        setFilteredRegions={setFilteredRegions}\r\n                        ActualRegionDate={ActualRegionDate}\r\n                   />\r\n                }\r\n\r\n                <UpButton\r\n                    show={SetSettingsShow}\r\n                />\r\n            </LeafletMap>\r\n\r\n            <FooterMap>\r\n                <FooterComponents\r\n                    comparePointsId={comparePointsId}\r\n                    comparePolygonsId={comparePolygonsId}\r\n                    chosenEnvironments={chosenEnvironments}\r\n                />\r\n            </FooterMap>\r\n            \r\n            <AdvancedFilter\r\n                show={SettingsShow}\r\n                ActualRegionDate={ActualRegionDate}\r\n                SetActualRegionDate={SetActualRegionDate}\r\n                onHide={()=>{\r\n                    SetSettingsShow(false)\r\n                }}\r\n                submitForm={submitHandler}\r\n            />\r\n\r\n            <WarningAlert\r\n                label={'Оберіть будь ласка хоч одне середовище'}\r\n                show={showWarning}\r\n                hide={()=>{setShowWarning(false)}}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst AdvancedFilter = ({show,onHide,submitForm,ActualRegionDate,SetActualRegionDate}) => {\r\n    const { environmentsInfo, setEnvironmentsInfo } = useContext(\r\n        EnvironmentsInfoContext\r\n    );\r\n\r\n    const [ showWarning, setShowWarning ] = useState(false);\r\n\r\n    const [ existingExperts, setExistingExperts] = useState([]);\r\n\r\n    const [ existingObjects, setExistingObjects] = useState([\r\n        {\r\n            type:'points',//points\r\n            label:'Точки',\r\n            checked:false,\r\n        },\r\n        {\r\n            type:'polygon',//polygon\r\n            label:'Полігони',\r\n            checked:false,\r\n        },\r\n        {\r\n            type:'region',//region\r\n            label:'Області',\r\n            checked:false,\r\n        }\r\n    ])\r\n\r\n    const [ possibleIssues, setPossibleIssues ] = useState([]);\r\n    const [ isLoading, setisLoading ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (existingExperts.length===0) {\r\n            get(EXPERTS_URL).then(({ data }) => {\r\n                setExistingExperts(data);\r\n            });\r\n        }\r\n      }, []);\r\n\r\n\r\n    const fetchpossibleIssues = ()=>{\r\n        let form = document.forms.advancedForm;\r\n        let chosenEnvironment = Array.from(form.elements.environmentCheckbox).filter(({checked})=> checked);\r\n        let chosenExperts = Array.from(form.elements.expertCheckbox).filter(({checked})=> checked);\r\n        let query= (chosenEnvironment.length===0 && chosenExperts.length===0)?'':'?';\r\n        if (query.length>0) {\r\n            query+=formQuery(chosenExperts,'experts');\r\n            query+= (chosenExperts.length===0)?formQuery(chosenEnvironment,'env'):'&'+formQuery(chosenEnvironment,'env');\r\n        }\r\n        setisLoading(true);        \r\n        get(GET_POSSIBLE_ISSUES+`${query}`).then(({data})=>{\r\n            setPossibleIssues(data);\r\n            setisLoading(false);\r\n        })\r\n    }\r\n\r\n    const CheckAllCheckBoxes = (objName,secondary) =>{\r\n        let form = document.forms.advancedForm;\r\n        let mainCheckBox = form.elements[`${objName}`]\r\n        let secondaryCheckBoxes = Array.from(form.elements[`${secondary}`]);\r\n        if(mainCheckBox.checked && secondaryCheckBoxes.filter(({checked})=>checked).length>0){\r\n            secondaryCheckBoxes.forEach((el)=>{\r\n                el.checked = false;\r\n            })\r\n            setShowWarning(true);\r\n        } \r\n        if (!mainCheckBox.checked && secondaryCheckBoxes.filter(({checked})=>checked).length===0) {\r\n            return false;\r\n        }\r\n        else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <VerticallyCenteredModal\r\n                size=\"xl\"\r\n                show={show}\r\n                onHide={onHide}\r\n                header=\"Оберіть експерта, середовище та задачу\"\r\n            >\r\n                {existingExperts.length===0? (\r\n                    <Spinner\r\n                        className='loading-spiner'\r\n                        animation='border'\r\n                        variant='primary'\r\n                    />\r\n                ):(\r\n                    <Form\r\n                        className=\"advancedForm\"\r\n                        name='advancedForm'\r\n                        onSubmit={submitForm}\r\n                    >\r\n                        <h5>Оберіть середовище:</h5>\r\n                        <div className=\"checkbox-list\">\r\n                            <div className=\"checkWrap\">\r\n                                <Form.Check \r\n                                onChange={()=>{\r\n                                    if(CheckAllCheckBoxes('environmentAllCheckbox','environmentCheckbox')){\r\n                                        fetchpossibleIssues();\r\n                                    }\r\n                                }}\r\n                                value={-1} className=\"checkField\" name='environmentAllCheckbox' type=\"checkbox\" label={\"Усі середовища\"}/>\r\n                            </div>\r\n                            {environmentsInfo.environments.map((el)=>{\r\n                            return(\r\n                                <div key={el.id} className=\"checkWrap\">\r\n                                    <Form.Check \r\n                                    onChange={()=>{\r\n                                        if(CheckAllCheckBoxes('environmentAllCheckbox','environmentCheckbox')){\r\n                                            fetchpossibleIssues();\r\n                                        }\r\n                                    }}\r\n                                    value={el.id} className=\"checkField\" name='environmentCheckbox' type=\"checkbox\" label={el.name}/>\r\n                                </div>\r\n                            )  \r\n                            })}\r\n                        </div>\r\n                        \r\n                        <hr style={{width:'100%'}}/>\r\n                        <h5>Оберіть типи об'єктів:</h5>\r\n                        <div className=\"checkbox-list\">\r\n                            <div className=\"checkWrap\">\r\n                                <Form.Check \r\n                                onChange={()=>{\r\n                                    CheckAllCheckBoxes('objectAllCheckbox','objectCheckbox');\r\n                                }}\r\n                                value={-1} className=\"checkField\" name='objectAllCheckbox' type=\"checkbox\" label={\"Усі об'єкти\"}/>\r\n                            </div>\r\n                            {existingObjects.map((el)=>{\r\n                            return(\r\n                                <div key={el.type} className=\"checkWrap\">\r\n                                    <Form.Check \r\n                                    onChange={()=>{\r\n                                        CheckAllCheckBoxes('objectAllCheckbox','objectCheckbox');\r\n                                    }}\r\n                                    value={el.type} className=\"checkField\" name='objectCheckbox' type=\"checkbox\" label={el.label}/>\r\n                                </div>\r\n                            )  \r\n                            })}\r\n                        </div>\r\n                        \r\n                        <hr style={{width:'100%'}}/>\r\n                        <h5>Оберіть експерта:</h5>\r\n                        <div className=\"checkbox-list\">\r\n                            <div className=\"checkWrap\">\r\n                                <Form.Check \r\n                                onChange={()=>{\r\n                                    if(CheckAllCheckBoxes('expertAllCheckbox','expertCheckbox')){\r\n                                        fetchpossibleIssues();\r\n                                    }\r\n                                }}\r\n                                value={-1} className=\"checkField\" name='expertAllCheckbox' type=\"checkbox\" label={\"Усі експерти\"}/>\r\n                            </div>\r\n                            {existingExperts.map((el)=>{\r\n                            return(\r\n                                <div key={el.id_of_expert} className=\"checkWrap\">\r\n                                    <Form.Check \r\n                                    onChange={()=>{\r\n                                        if(CheckAllCheckBoxes('expertAllCheckbox','expertCheckbox')){\r\n                                            fetchpossibleIssues();\r\n                                        }\r\n                                    }}\r\n                                    value={el.id_of_expert} className=\"checkField\" name='expertCheckbox' type=\"checkbox\" label={el.expert_name}/>\r\n                                </div>\r\n                            )  \r\n                            })}\r\n                        </div>\r\n                        <hr style={{width:'100%'}}/>\r\n                        {(isLoading) ? (\r\n                            <div className=\"SpinerWraper\">\r\n                                <Spinner animation=\"grow\" variant=\"primary\" />\r\n                            </div>\r\n                        ):(\r\n                            possibleIssues.length>0 &&\r\n                            (\r\n                                <>\r\n                                    <h5>Оберіть задачу:</h5>\r\n                                    <div className=\"checkbox-list\">\r\n                                        <div className=\"checkWrap\">\r\n                                            <Form.Check \r\n                                            onChange={()=>{\r\n                                                CheckAllCheckBoxes('issueAllCheckbox','issueCheckbox');\r\n                                            }}\r\n                                            value={-1} className=\"checkField\" name='issueAllCheckbox' type=\"checkbox\" label={\"Усі здачі\"}/>\r\n                                        </div>\r\n                                        {possibleIssues.map(el=>{\r\n                                            return(<div key={el.issue_id} className=\"checkWrap\">\r\n                                                <Form.Check \r\n                                                onChange={()=>{\r\n                                                    CheckAllCheckBoxes('issueAllCheckbox','issueCheckbox');\r\n                                                }}\r\n                                                value={el.issue_id} className=\"checkField\" name='issueCheckbox' type=\"checkbox\" label={el.name}/>\r\n                                            </div>)\r\n                                        })}\r\n                                    </div>\r\n                                    <hr style={{width:'100%'}}/>\r\n                                </>\r\n                            )\r\n                        )}\r\n                        <h5>Оберіть проміжок актуальності даних для областей:</h5>\r\n                        <ActualEmmisionDate\r\n                            dateState={ActualRegionDate}\r\n                            SetDateState={SetActualRegionDate}\r\n                            initilDate={initilDate}\r\n                            enabled={true}\r\n                        />\r\n                        <Button type=\"submit\"> Відобразити точки </Button>\r\n                    </Form>\r\n                )}\r\n            </VerticallyCenteredModal>\r\n            <WarningAlert\r\n                label={'Пункт \"Усі\" може використовуватись лише окремо '}\r\n                show={showWarning}\r\n                hide={()=>{setShowWarning(false)}}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst FooterComponents = ({\r\n    comparePointsId,\r\n    comparePolygonsId,\r\n    chosenEnvironments,\r\n})=>{\r\n    const isAdaptive = () =>{\r\n        return (window.innerWidth<=991)\r\n    }\r\n\r\n    const [compareModalForm, setcompareModalForm] = useState(false);\r\n\r\n    return(\r\n        <>\r\n            {/*  Compare some  */}\r\n            <Button\r\n                className='ml-3'\r\n                size='sm'\r\n                variant={'outline-primary'}\r\n                style={{\r\n                    width:isAdaptive()?\"70%\":'',\r\n                    marginBottom:'2px',\r\n                    marginTop: '2px',\r\n                    cursor:'pointer',\r\n                    pointerEvents:'all'\r\n                }}\r\n                onClick={() => setcompareModalForm(true)}\r\n            >\r\n                Результати порівняння\r\n            </Button>\r\n\r\n            <CompareModal\r\n                style={{\r\n                width:isAdaptive()?\"70%\":'',\r\n                marginBottom:'2px',\r\n                marginTop: '2px',\r\n                }}\r\n                points={comparePointsId}\r\n                polygons={comparePolygonsId}\r\n                chosenEnvironments={chosenEnvironments}\r\n                show={compareModalForm}\r\n                onHide={() => setcompareModalForm(false)}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst UpButton = ({show})=>{\r\n    return(\r\n        <div \r\n            className=\"upsideButton\"\r\n            onClick={()=>{\r\n                show(true);\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nconst WarningAlert = ({label,show,hide})=>{\r\n\r\n    const [isNotShowing, setIsNotShowing]= useState(true);\r\n\r\n    useEffect(()=>{\r\n        if(show && isNotShowing){\r\n            setIsNotShowing(false);\r\n            setTimeout(() => {\r\n                hide();\r\n                setIsNotShowing(true);\r\n            }, 2000);\r\n        }\r\n    },[show])\r\n\r\n    return(\r\n        <div className={`WarningAlert ${show?\"showWarning\":''}` }>\r\n            <b>\r\n                {label}\r\n            </b>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Carousel } from 'react-bootstrap';\r\n\r\nimport img1 from '../../images/1.jpg';\r\nimport img2 from '../../images/2.jpg';\r\nimport img3 from '../../images/3.jpg';\r\n\r\nexport const CarouselView = () => {\r\n  return (\r\n    <Carousel className='carousel'>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img1} alt='First slide' />\r\n        <Carousel.Caption>\r\n          <h3>Управління водними ресурсами</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img2} alt='Second slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Комплексний еколого-економічний моніторинг</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Third slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Управління відходами</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Fourth slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Охорона земель</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Fifth slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Атмосферне повітря</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Sixth slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Здоров'я населення</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n    </Carousel>\r\n  );\r\n};\r\n","import { ListGroup } from 'react-bootstrap';\r\nimport React from 'react';\r\n\r\nexport const KEEMPrinciples = () => {\r\n  return (\r\n    <ListGroup>\r\n      <h4>\r\n        Комплексний еколого-економіко-енергетичний моніторинг (КЕЕЕМ) базується на таких\r\n        основних принципах:\r\n      </h4>\r\n      <ListGroup.Item>\r\n        Збір різнорідної екологічної інформації з різних точок регіону.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Оброблення великих масивів даних різними експертами.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Одночасна робота різних експертів з екологічною інформацією та\r\n        інформацією від інших експертів.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Відображення екологічної інформації на карті місцевості для наочності.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Дослідження екологічної інформації за допомогою різних видів\r\n        математичного аналізу.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Оцінка ситуації у визначеному регіоні з точки зору закону та визначення\r\n        законності набору заходів по покращенню екологічного стану регіону або\r\n        ліквідації наслідків надзвичайних ситуацій.\r\n      </ListGroup.Item>\r\n    </ListGroup>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { CarouselView } from './carousel';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport { KEEMPrinciples } from './KEEMPrinciples';\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <CarouselView />\r\n      <Container>\r\n        <Row className='justify-content-center mt-5 mb-5'>\r\n          <Col xs={12}>\r\n            <KEEMPrinciples />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import {\r\n  ELEMENTS_URL,\r\n  GDK_URL,\r\n  ENVIRONMENTS_URL,\r\n  TYPE_OF_OBJECT_URL,\r\n  TAX_VALUES_URL,\r\n  TABLE_NAMES,\r\n} from './constants';\r\n\r\nexport const URL_FROM_TABLE_NAME_MAP = new Map([\r\n  [TABLE_NAMES.elements, ELEMENTS_URL],\r\n  [TABLE_NAMES.gdk, GDK_URL],\r\n  [TABLE_NAMES.environment, ENVIRONMENTS_URL],\r\n  [TABLE_NAMES.type_of_object, TYPE_OF_OBJECT_URL],\r\n  [TABLE_NAMES.tax_values, TAX_VALUES_URL],\r\n]);\r\n","import React from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\n\r\nimport { post } from '../../utils/httpService';\r\n\r\nconst getInitialState = (columns) => {\r\n  return columns\r\n    .map(({ field }) => field)\r\n    .reduce((o, key) => ({ ...o, [key]: '' }), {});\r\n};\r\n\r\nconst ExceptionColumns = [{ '/gdk': ['EnvironmentName', 'CodeName'] }];\r\n\r\nexport const AddDictionaryRecord = ({ columns, url, setShouldFetchData }) => {\r\n  let Obj = Object.values(ExceptionColumns).find(\r\n    (x) => Object.keys(x)[0] == url\r\n  );\r\n  if (Obj) {\r\n    for (const itr of columns) {\r\n      if (Obj[url].indexOf(itr.headerName) != -1) {\r\n        columns = columns.splice(columns.indexOf(itr), 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  const [formValues, setFormValues] = React.useState({});\r\n\r\n  React.useEffect(() => {\r\n    setFormValues(getInitialState(columns));\r\n  }, [columns]);\r\n\r\n  const setForm = (field, value) => {\r\n    setFormValues({ ...formValues, [field]: value });\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setFormValues(getInitialState(columns));\r\n  };\r\n\r\n  const addRecord = () => {\r\n    const hasNoEmptyFields = Object.values(formValues).every((value) =>\r\n      Boolean(value)\r\n    );\r\n\r\n    if (hasNoEmptyFields) {\r\n      post(url, formValues)\r\n        .then(() => {\r\n          clearForm();\r\n          setShouldFetchData(true);\r\n          alert('Нові дані успішно додано');\r\n        })\r\n        .catch((error) => {\r\n          console.log(error.response);\r\n          alert('Помилка додавання');\r\n          const message = error.response.data.message;\r\n          alert(message ? message.sqlMessage : message.toString());\r\n        });\r\n    } else {\r\n      window.alert('Будь ласка, заповніть усі поля');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form\r\n        style={{\r\n          margin: '0 auto',\r\n          width: '80%',\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n        }}\r\n      >\r\n        {columns &&\r\n          columns.map(({ field }) => (\r\n            <Form.Group style={{ padding: '0 10px', width: '50%' }} key={field}>\r\n              <Form.Label>{field}</Form.Label>\r\n              <Form.Control\r\n                type='input'\r\n                placeholder={`Введіть значення для ${field}`}\r\n                value={formValues[field]}\r\n                onChange={(e) => setForm(field, e.target.value)}\r\n              />\r\n            </Form.Group>\r\n          ))}\r\n      </Form>\r\n      {columns.length > 0 && (\r\n        <Button variant='primary' onClick={addRecord} className='mb-3'>\r\n          Додати запис\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { DICTIONARY_MODES } from '../../utils/constants';\r\n\r\nexport const DictionaryModes = ({ setSelectedMode, user }) => {\r\n  return [\r\n    {\r\n      mode: DICTIONARY_MODES.search,\r\n      displayName: 'Пошук',\r\n      visible: true,\r\n    },\r\n    {\r\n      mode: DICTIONARY_MODES.add,\r\n      displayName: 'Додати',\r\n      visible: user && user.id_of_expert === 0,\r\n    },\r\n    {\r\n      mode: DICTIONARY_MODES.edit,\r\n      displayName: 'Редагувати',\r\n      visible: user && user.id_of_expert === 0,\r\n    },\r\n    {\r\n      mode: DICTIONARY_MODES.delete,\r\n      displayName: 'Видалити',\r\n      visible: user && user.id_of_expert === 0,\r\n    },\r\n  ]\r\n    .filter(({ visible }) => !!visible)\r\n    .map(({ mode, displayName }) => (\r\n      <Form.Group>\r\n        <Form.Check\r\n          type='radio'\r\n          id={mode}\r\n          label={displayName}\r\n          name='mode'\r\n          onClick={() => setSelectedMode(mode)}\r\n        />\r\n      </Form.Group>\r\n    ));\r\n};\r\n","import React from 'react';\r\nimport { InputGroup, FormControl, Button, Alert } from 'react-bootstrap';\r\nimport { getIdColumnNameForDictionaryObject } from '../../utils/helpers';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { deleteRequest } from '../../utils/httpService';\r\n\r\nexport const RemoveDictionaryRecord = ({\r\n  selectedRow,\r\n  setShouldDeselectSelectedRows,\r\n  url,\r\n  setShouldFetchData,\r\n}) => {\r\n  const [idColumnName, setIdColumnName] = useState(null);\r\n  const [idValue, setIdValue] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (selectedRow) {\r\n      const idColumnName = getIdColumnNameForDictionaryObject(selectedRow);\r\n      setIdColumnName(idColumnName);\r\n\r\n      const idValue = selectedRow[idColumnName];\r\n      setIdValue(idValue);\r\n    }\r\n  }, [selectedRow]);\r\n\r\n  const removeRecord = async () => {\r\n    const warningMessage = `\r\n    Ви впевнені що бажаєте видалити обраний рядок?\r\n    Для підтверждення операції введіть: ${idValue}`;\r\n    const userConfirmation = window.prompt(warningMessage);\r\n\r\n    if (+userConfirmation === idValue) {\r\n      try {\r\n        await deleteRequest(`${url}/${idValue}`);\r\n        setShouldFetchData(true);\r\n        setShouldDeselectSelectedRows(true);\r\n        alert('Рядок успішно видалено');\r\n      } catch (error) {\r\n        console.log(error.response);\r\n        alert('Помилка видалення');\r\n        const message = error.response.data.message;\r\n        alert(message ? message.sqlMessage : message.toString());\r\n      }\r\n    } else {\r\n      alert(\r\n        'Невірно введене підтвердження або була відміна операції. Операцію скасовано.'\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!selectedRow && (\r\n        <Alert variant='primary'>Оберіть рядок для видалення</Alert>\r\n      )}\r\n      {selectedRow && (idValue || idValue === 0) && idColumnName && (\r\n        <div className='d-flex justify-content-center flex-column'>\r\n          <InputGroup size='md'>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id='inputGroup-sizing-md'>\r\n                Видалити {idColumnName}:\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              aria-label='Medium'\r\n              aria-describedby='inputGroup-sizing-md'\r\n              id='filter-text-box'\r\n              placeholder='Оберіть рядок для видалення...'\r\n              disabled\r\n              value={idValue}\r\n            />\r\n          </InputGroup>\r\n          <div className='col-1 mr-auto ml-auto mb-3 mt-3'>\r\n            <Button variant='danger' onClick={removeRecord}>\r\n              Видалити\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Button, Form, Alert } from 'react-bootstrap';\r\n\r\nimport { put } from '../../utils/httpService';\r\nimport { getIdColumnNameForDictionaryObject } from '../../utils/helpers';\r\n\r\nconst getInitialState = (columns, selectedRow) => {\r\n  return columns\r\n    .map(({ field }) => field)\r\n    .reduce((o, key) => ({ ...o, [key]: selectedRow[key] }), {});\r\n};\r\n\r\nconst ExceptionColumns = [{ '/gdk': ['EnvironmentName', 'CodeName'] }];\r\n\r\nexport const EditDictionaryRecord = ({\r\n  columns,\r\n  url,\r\n  setShouldFetchData,\r\n  selectedRow,\r\n  setShouldDeselectSelectedRows,\r\n}) => {\r\n  let Obj = Object.values(ExceptionColumns).find(\r\n    (x) => Object.keys(x)[0] == url\r\n  );\r\n  if (Obj) {\r\n    for (const itr of columns) {\r\n      if (Obj[url].indexOf(itr.headerName) != -1) {\r\n        columns = columns.splice(columns.indexOf(itr), 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  const [formValues, setFormValues] = React.useState({});\r\n\r\n  React.useEffect(() => {\r\n    if (selectedRow) {\r\n      setFormValues(getInitialState(columns, selectedRow));\r\n    }\r\n  }, [columns, selectedRow]);\r\n\r\n  const setForm = (field, value) => {\r\n    setFormValues({ ...formValues, [field]: value });\r\n  };\r\n\r\n  const editRecord = async () => {\r\n    const idColumnName = getIdColumnNameForDictionaryObject(selectedRow);\r\n    const idValue = selectedRow[idColumnName];\r\n    try {\r\n      await put(`${url}/${idValue}`, formValues);\r\n      setShouldFetchData(true);\r\n      setShouldDeselectSelectedRows(true);\r\n      alert('Рядок успішно змінено');\r\n    } catch (error) {\r\n      console.log(error.response);\r\n      alert('Помилка видалення');\r\n      const message = error.response.data.message;\r\n      alert(message ? message.sqlMessage : message.toString());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedRow && (\r\n        <>\r\n          <Form\r\n            style={{\r\n              margin: '0 auto',\r\n              width: '80%',\r\n              display: 'flex',\r\n              flexWrap: 'wrap',\r\n            }}\r\n          >\r\n            {columns &&\r\n              columns.map(({ field }) => (\r\n                <Form.Group\r\n                  style={{ padding: '0 10px', width: '50%' }}\r\n                  key={field}\r\n                >\r\n                  <Form.Label>{field}</Form.Label>\r\n                  <Form.Control\r\n                    type='input'\r\n                    placeholder={`Введіть значення для ${field}`}\r\n                    value={formValues[field]}\r\n                    onChange={(e) => setForm(field, e.target.value)}\r\n                  />\r\n                </Form.Group>\r\n              ))}\r\n          </Form>\r\n          {columns.length > 0 && (\r\n            <Button variant='primary' onClick={editRecord} className='mb-3'>\r\n              Редагувати\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n      {!selectedRow && (\r\n        <Alert className='m-auto' variant='primary'>\r\n          Оберіть рядок для редагування\r\n        </Alert>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { InputGroup, FormControl, Button, Table } from 'react-bootstrap';\r\n\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\n\r\nimport { URL_FROM_TABLE_NAME_MAP } from '../../utils/maps';\r\nimport { get } from '../../utils/httpService';\r\n\r\nimport { AddDictionaryRecord } from '../addComponents/addDictionaryRecord';\r\nimport { DictionaryModes } from './dictionaryModes';\r\nimport { DICTIONARY_MODES } from '../../utils/constants';\r\nimport { RemoveDictionaryRecord } from './removeDictionaryRecord';\r\nimport { EditDictionaryRecord } from './editDictionaryRecord';\r\nimport dicLegend from \"../../utils/dictionaryLegend.json\";\r\n\r\nimport './dictionary.css';\r\n\r\nconst mapColumns = (columns) => {\r\n  return columns.map((columnName) => ({\r\n    headerName: columnName,\r\n    field: columnName,\r\n    sortable: true,\r\n    filter: true,\r\n  }));\r\n};\r\n\r\nexport const Dictionary = ({ user, tableName }) => {\r\n  const url = URL_FROM_TABLE_NAME_MAP.get(tableName.toLowerCase());\r\n\r\n  const [columns, setColumns] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n\r\n  const [shouldFetchData, setShouldFetchData] = useState(true);\r\n\r\n  const [gridOptions, setGridOptions] = useState({});\r\n\r\n  const [selectedMode, setSelectedMode] = useState(null);\r\n  const [selectedRow, setSelectedRow] = useState(null);\r\n  const [shouldDeselectSelectedRows, setShouldDeselectSelectedRows] = useState(\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (shouldFetchData) {\r\n      get(url).then(({ data }) => {\r\n        const mappedColumns = mapColumns(Object.keys(data[0]));\r\n        setColumns(mappedColumns);\r\n        setRows(Object.values(data));\r\n      });\r\n\r\n      setShouldFetchData(false);\r\n    }\r\n  }, [url, shouldFetchData]);\r\n\r\n  useEffect(() => {\r\n    if (shouldDeselectSelectedRows && gridOptions.api) {\r\n      setSelectedRow(null);\r\n      gridOptions.api.deselectAll();\r\n      onFilterTextBoxChanged('');\r\n\r\n      setShouldDeselectSelectedRows(false);\r\n    }\r\n  }, [shouldDeselectSelectedRows, gridOptions.api]);\r\n\r\n  useEffect(() => {\r\n    setShouldDeselectSelectedRows(true);\r\n  }, [selectedMode]);\r\n\r\n  const onFilterTextBoxChanged = (inputText) => {\r\n    gridOptions.api.setQuickFilter(inputText);\r\n  };\r\n\r\n  const onGridReady = (gridOptions) => {\r\n    setGridOptions(gridOptions);\r\n  };\r\n\r\n  const onRowSelected = () => {\r\n    const selectedNodes = gridOptions.api.getSelectedNodes();\r\n    const selectedData = selectedNodes.map(({ data }) => data);\r\n\r\n    setSelectedRow(selectedData[0]);\r\n  };\r\n\r\n  const exportDataAsCSV = () => {\r\n    const params = {\r\n      fileName: 'exportingData.csv',\r\n    };\r\n\r\n    gridOptions.api.exportDataAsCsv(params);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='container d-flex justify-content-space-between mt-4 mb-4 dictionary'>\r\n        <div className='col-3 text-left dictionary__modes'>\r\n          <div className='mb-2'>Оберіть опцію</div>\r\n          <DictionaryModes\r\n            setSelectedMode={setSelectedMode}\r\n            user={user}\r\n            className='text-align-left'\r\n          />\r\n          <Button variant='secondary' onClick={exportDataAsCSV}>\r\n            Експорт у CSV\r\n          </Button>\r\n        </div>\r\n        <div\r\n          className='col-9'\r\n          style={{\r\n            backgroundColor: '#e1ebf3',\r\n            paddingTop: '10px',\r\n            paddingBottom: '10px',\r\n          }}\r\n        >\r\n          {selectedMode === DICTIONARY_MODES.search && (\r\n            <div className='row'>\r\n              <InputGroup size='md' className='col-9 m-auto'>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id='inputGroup-sizing-md'>\r\n                    Пошук:\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  aria-label='Medium'\r\n                  aria-describedby='inputGroup-sizing-md'\r\n                  id='filter-text-box'\r\n                  placeholder='Введіть пошукові дані...'\r\n                  onInput={({ target }) => onFilterTextBoxChanged(target.value)}\r\n                />\r\n              </InputGroup>\r\n            </div>\r\n          )}\r\n          {user &&\r\n            user.id_of_expert === 0 &&\r\n            selectedMode === DICTIONARY_MODES.add && (\r\n              <AddDictionaryRecord\r\n                columns={columns}\r\n                url={url}\r\n                setShouldFetchData={setShouldFetchData}\r\n              />\r\n            )}\r\n          {user &&\r\n            user.id_of_expert === 0 &&\r\n            selectedMode === DICTIONARY_MODES.edit && (\r\n              <EditDictionaryRecord\r\n                columns={columns}\r\n                url={url}\r\n                setShouldFetchData={setShouldFetchData}\r\n                selectedRow={selectedRow}\r\n                setShouldDeselectSelectedRows={setShouldDeselectSelectedRows}\r\n              />\r\n            )}\r\n          {user &&\r\n            user.id_of_expert === 0 &&\r\n            selectedMode === DICTIONARY_MODES.delete && (\r\n              <RemoveDictionaryRecord\r\n                selectedRow={selectedRow}\r\n                url={url}\r\n                setShouldFetchData={setShouldFetchData}\r\n                setShouldDeselectSelectedRows={setShouldDeselectSelectedRows}\r\n              />\r\n            )}\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={{ height: '500px', width: '99%', margin: '0 auto' }}\r\n        className='ag-theme-alpine'\r\n      >\r\n        <Table className='ColumnLegend' responsive size='lg'>\r\n              <tbody>\r\n                <tr>\r\n                  <th title='Абревіатура'> Абревіатура </th>\r\n                  {columns.map((el,i)=>{\r\n                    return(\r\n                      <td key={el+i} title={el.headerName}> {el.headerName} </td>\r\n                    )\r\n                  })}\r\n                </tr>\r\n                <tr>\r\n                  <th title='Визначення'> Визначення </th>\r\n                  {columns.map((el,i)=>{\r\n                    let foundTable = dicLegend.find(el2=>el2.table==tableName.toLowerCase())\r\n                    let found = foundTable?foundTable.names.find(el2=> el2.initName == el.headerName):undefined;\r\n                    if (found===undefined) {\r\n                      return (<td key={el+i} title=\"Не знайдено опис\"> Не знайдено опис </td>)\r\n                    }\r\n                    \r\n                    return(\r\n                      <td key={el+i} title={found.newName}> {found.newName} </td>\r\n                    )\r\n                  })}\r\n                </tr>\r\n              </tbody>\r\n        </Table>\r\n\r\n        <AgGridReact\r\n          columnDefs={columns}\r\n          rowData={rows}\r\n          rowSelection='single'\r\n          onGridReady={onGridReady}\r\n          onRowSelected={onRowSelected}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './App.css';\r\nimport { MenuView } from './components/menu/menu.jsx';\r\nimport { AdvancedMap } from \"./components/advancedmap/advancedmap.jsx\";\r\nimport { Home } from './components/home/home.jsx';\r\nimport { MapView } from './components/map/map.jsx';\r\nimport { Dictionary } from './components/dictionary/dictionary.jsx';\r\n\r\nimport { get } from './utils/httpService';\r\nimport { ENVIRONMENTS_URL } from './utils/constants';\r\n\r\nimport {\r\n  EnvironmentsInfoContext,\r\n  environmentsInfoInitialState,\r\n} from './components/context/environmentsInfoContext';\r\n\r\nexport const App = () => {\r\n  const [user, setUser] = useState({});\r\n  const [environmentsInfo, setEnvironmentsInfo] = useState(\r\n    environmentsInfoInitialState\r\n  );\r\n  const [dictionary, setDictionary] = useState('');\r\n\r\n  React.useEffect(() => {\r\n    setUser(JSON.parse(sessionStorage.getItem('user')));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    get(ENVIRONMENTS_URL).then(({ data }) => {\r\n      setEnvironmentsInfo({\r\n        selected: null,\r\n        environments: data,\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div className='App'>\r\n        <EnvironmentsInfoContext.Provider\r\n          value={{ environmentsInfo, setEnvironmentsInfo }}\r\n        >\r\n          <MenuView\r\n            user={user}\r\n            setUser={setUser}\r\n            dictionary={dictionary}\r\n            setDictionary={setDictionary}\r\n          />\r\n          <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route path='/earth' component={() => <MapView user={user} />} />\r\n            <Route\r\n              path='/dictionary'\r\n              component={() => (\r\n                <Dictionary user={user} tableName={dictionary} />\r\n              )}\r\n            />\r\n            <Route\r\n              path='/advancedmap'\r\n              component={()=>(\r\n                <AdvancedMap user={user}/>\r\n              )}\r\n            />\r\n          </Switch>\r\n        </EnvironmentsInfoContext.Provider>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-date-range/dist/styles.css';\r\nimport 'react-date-range/dist/theme/default.css';\r\n\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}